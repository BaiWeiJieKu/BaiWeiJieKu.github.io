I"fu<ul id="markdown-toc">
  <li><a href="#ognl" id="markdown-toc-ognl">OGNL</a>    <ul>
      <li><a href="#井号使用" id="markdown-toc-井号使用">井号使用</a></li>
      <li><a href="#使用" id="markdown-toc-使用">%使用</a></li>
    </ul>
  </li>
  <li><a href="#值栈" id="markdown-toc-值栈">值栈</a></li>
  <li><a href="#值栈对象" id="markdown-toc-值栈对象">值栈对象</a></li>
  <li><a href="#值栈结构" id="markdown-toc-值栈结构">值栈结构</a></li>
  <li><a href="#值栈放数据" id="markdown-toc-值栈放数据">值栈放数据</a>    <ul>
      <li><a href="#set-方法" id="markdown-toc-set-方法">set 方法</a></li>
      <li><a href="#push方法" id="markdown-toc-push方法">push方法</a></li>
      <li><a href="#get方法" id="markdown-toc-get方法">get方法</a></li>
      <li><a href="#放对象" id="markdown-toc-放对象">放对象</a></li>
      <li><a href="#放list" id="markdown-toc-放list">放list</a></li>
    </ul>
  </li>
  <li><a href="#值栈取数据" id="markdown-toc-值栈取数据">值栈取数据</a>    <ul>
      <li><a href="#取字符串" id="markdown-toc-取字符串">取字符串</a></li>
      <li><a href="#取对象" id="markdown-toc-取对象">取对象</a></li>
      <li><a href="#取list" id="markdown-toc-取list">取list</a></li>
      <li><a href="#其他操作" id="markdown-toc-其他操作">其他操作</a></li>
      <li><a href="#el获取" id="markdown-toc-el获取">el获取</a></li>
    </ul>
  </li>
</ul>
<h3 id="ognl">OGNL</h3>

<ul>
  <li>使用struts2标签时候，在jsp中引入标签库</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ taglib </span><span class="na">uri=</span><span class="s">"/struts-tags"</span><span class="na"> prefix=</span><span class="s">"s"</span><span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>使用struts2标签实现操作</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
	<span class="c">&lt;!-- 使用ognl+struts2标签实现计算字符串长度 
		value属性值：ognl表达式
	--&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"'haha'.length()"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<h4 id="井号使用">井号使用</h4>

<ul>
  <li>使用#获取context里面数据</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nt">&lt;s:iterator </span><span class="na">value=</span><span class="s">"list"</span><span class="na"> var=</span><span class="s">"user"</span><span class="nt">&gt;</span>
		<span class="c">&lt;!-- 
			遍历值栈list集合，得到每个user对象
			机制： 把每次遍历出来的user对象放到 context里面
			获取context里面数据特点：写ognl表达式，
			使用特殊符号 #
		 --&gt;</span>
		<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"#user.username"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"#user.password"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"#user.address"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;br/&gt;</span>
	<span class="nt">&lt;/s:iterator&gt;</span>

</code></pre></div></div>

<ul>
  <li>用ognl获取request中的数据</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContextAction</span> <span class="kd">extends</span> <span class="nc">ActionSupport</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		
		<span class="nc">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="nc">ServletActionContext</span><span class="o">.</span><span class="na">getRequest</span><span class="o">();</span>
		<span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"req"</span><span class="o">,</span> <span class="s">"reqValue"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ page </span><span class="na">language=</span><span class="s">"java"</span><span class="na"> contentType=</span><span class="s">"text/html; charset=UTF-8"</span><span class="na">
    pageEncoding=</span><span class="s">"UTF-8"</span><span class="nt">%&gt;</span>
<span class="nt">&lt;%@ taglib </span><span class="na">uri=</span><span class="s">"/struts-tags"</span><span class="na"> prefix=</span><span class="s">"s"</span><span class="nt">%&gt;</span>
<span class="cp">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"Content-Type"</span> <span class="na">content=</span><span class="s">"text/html; charset=UTF-8"</span><span class="nt">&gt;</span>
<span class="nt">&lt;title&gt;</span>Insert title here<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
	<span class="c">&lt;!-- 获取context里面数据，写ognl时候，首先添加符号  
		#context的key名称.域对象名称
	--&gt;</span>
	 <span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"#request.req"</span><span class="nt">/&gt;</span> 
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h4 id="使用">%使用</h4>

<ul>
  <li>在struts2表单标签里面使用ognl表达式，如果直接在struts2表单标签里面使用ognl表达式不识别，只有%之后才会识别</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;s:textfield </span><span class="na">name=</span><span class="s">"username"</span><span class="na"> value=</span><span class="s">"%{#request.req}"</span><span class="nt">&gt;&lt;/s:textfield&gt;</span>
</code></pre></div></div>

<h3 id="值栈">值栈</h3>

<ul>
  <li>之前在web阶段，在servlet里面进行操作，把数据放到域对象里面，在页面中使用el表达式获取到，域对象在一定范围内，存值和取值</li>
  <li>在struts2里面提供本身一种存储机制，类似于域对象，是值栈，可以存值和取值，在action里面把数据放到值栈里面，在页面中获取到值栈数据</li>
  <li>每次访问action时候，都会创建action对象</li>
  <li>在每个action对象里面都会有一个值栈对象（只有一个）</li>
</ul>

<h3 id="值栈对象">值栈对象</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">cn.itcast.action</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionSupport</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.util.ValueStack</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAction</span> <span class="kd">extends</span> <span class="nc">ActionSupport</span> <span class="o">{</span>


	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">// 1 获取ActionContext类的对象</span>
		<span class="nc">ActionContext</span> <span class="n">context</span> <span class="o">=</span> <span class="nc">ActionContext</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
		<span class="c1">//2 调用方法得到值栈对象</span>
		<span class="nc">ValueStack</span> <span class="n">stack1</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getValueStack</span><span class="o">();</span>
		
		<span class="nc">ValueStack</span> <span class="n">stack2</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getValueStack</span><span class="o">();</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stack1</span><span class="o">==</span><span class="n">stack2</span><span class="o">);</span><span class="c1">//true</span>
		<span class="k">return</span> <span class="no">NONE</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="值栈结构">值栈结构</h3>

<ul>
  <li>值栈分为两部分：第一部分 root，结构是list集合，一般操作都是root里面数据。第二部分 context，结构map集合</li>
  <li>struts2里面标签 s:debug，使用这个标签可以查看值栈结构和存储值</li>
  <li>访问action，执行action的方法有返回值，配置返回值到jsp页面中，在jsp页面中使用这个标签</li>
  <li>点击超链接看到结构</li>
  <li>在action没有做任何操作，栈顶元素是 action引用</li>
</ul>

<h3 id="值栈放数据">值栈放数据</h3>

<h4 id="set-方法">set 方法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">//第一种方式 使用值栈对象里面的 set方法</span>
		<span class="c1">//1 获取值栈对象</span>
		<span class="nc">ActionContext</span> <span class="n">context</span> <span class="o">=</span> <span class="nc">ActionContext</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
		<span class="nc">ValueStack</span> <span class="n">stack</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getValueStack</span><span class="o">();</span>
<span class="c1">//		//2 调用方法set方法</span>
		<span class="n">stack</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"itcast"</span><span class="o">,</span> <span class="s">"itcastitheima"</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="push方法">push方法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">//1 获取值栈对象</span>
		<span class="nc">ActionContext</span> <span class="n">context</span> <span class="o">=</span> <span class="nc">ActionContext</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
		<span class="nc">ValueStack</span> <span class="n">stack</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getValueStack</span><span class="o">();</span>	
<span class="c1">//		//3 调用方法push方法</span>
		<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"abcd"</span><span class="o">);</span>
		
		<span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
	<span class="o">}</span>

</code></pre></div></div>

<h4 id="get方法">get方法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">cn.itcast.action</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionSupport</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.util.ValueStack</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueStackDemoAction</span> <span class="kd">extends</span> <span class="nc">ActionSupport</span> <span class="o">{</span>

	<span class="c1">//1 定义变量</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="c1">//2 生成变量的get方法</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		
		<span class="c1">//在执行的方法里面向变量设置值</span>
		<span class="n">name</span> <span class="o">=</span> <span class="s">"abcdefgh"</span><span class="o">;</span>
		<span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="放对象">放对象</h4>

<ul>
  <li>第一步 定义对象变量</li>
  <li>第二步 生成变量的get方法</li>
  <li>第三步 在执行的方法里面向对象中设置值</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">cn.itcast.action</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionSupport</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">cn.itcast.entity.User</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectDemoAction</span> <span class="kd">extends</span> <span class="nc">ActionSupport</span> <span class="o">{</span>

	<span class="c1">//1 定义对象变量</span>
	<span class="kd">private</span> <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
	<span class="c1">//2 生成get方法</span>
	<span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">user</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">//3 向值栈的user里面放数据</span>
		<span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"lucy"</span><span class="o">);</span>
		<span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
		<span class="n">user</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="s">"美国"</span><span class="o">);</span>
		
		<span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="放list">放list</h4>

<ul>
  <li>第一步 定义list集合变量</li>
  <li>第二步 生成变量的get方法</li>
  <li>第三步 在执行的方法里面向list集合设置值</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">cn.itcast.action</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionSupport</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">cn.itcast.entity.User</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListDemoAction</span> <span class="kd">extends</span> <span class="nc">ActionSupport</span> <span class="o">{</span>

	<span class="c1">// 1 定义list变量</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;();</span>
	<span class="c1">// 2 get方法</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">list</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">//3 向list中设置值</span>
		<span class="nc">User</span> <span class="n">user1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
		<span class="n">user1</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"小奥"</span><span class="o">);</span>
		<span class="n">user1</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
		<span class="n">user1</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="s">"美国"</span><span class="o">);</span>
		
		<span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
		<span class="n">user2</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"小王"</span><span class="o">);</span>
		<span class="n">user2</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">"250"</span><span class="o">);</span>
		<span class="n">user2</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="s">"越南"</span><span class="o">);</span>
		
		<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">user1</span><span class="o">);</span>
		<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">user2</span><span class="o">);</span>
		
		<span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="值栈取数据">值栈取数据</h3>

<ul>
  <li>使用struts2的标签+ognl表达式获取值栈数据<code class="language-plaintext highlighter-rouge">&lt;s:property value=”ognl表达式”/&gt;</code></li>
</ul>

<h4 id="取字符串">取字符串</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">cn.itcast.action</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.ActionSupport</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.util.ValueStack</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueStackDemoAction</span> <span class="kd">extends</span> <span class="nc">ActionSupport</span> <span class="o">{</span>

	<span class="c1">//1 定义变量</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="c1">//2 生成变量的get方法</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		
		<span class="c1">//在执行的方法里面向变量设置值</span>
		<span class="n">name</span> <span class="o">=</span> <span class="s">"abcdefgh"</span><span class="o">;</span>
		<span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c">&lt;!-- 1 获取字符串值 --&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"username"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<h4 id="取对象">取对象</h4>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c">&lt;!-- 2 获取值栈对象的值 --&gt;</span>
	<span class="nt">&lt;br/&gt;</span>
	获取对象的值：user是变量名
	<span class="nt">&lt;br/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"user.username"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"user.password"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"user.address"</span><span class="nt">/&gt;</span>
	
	<span class="nt">&lt;br/&gt;</span>

</code></pre></div></div>

<h4 id="取list">取list</h4>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	获取list的值第一种方式：
	<span class="nt">&lt;br/&gt;</span>
	<span class="c">&lt;!-- 3 获取值栈list集合数据 --&gt;</span>
	<span class="c">&lt;!-- 第一种方式实现  --&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"list[0].username"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"list[0].password"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"list[0].address"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;br/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"list[1].username"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"list[1].password"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"list[1].address"</span><span class="nt">/&gt;</span>
	
	<span class="nt">&lt;br/&gt;</span>
	获取list的值第二种方式：
	<span class="nt">&lt;br/&gt;</span>
	<span class="c">&lt;!-- 使用struts2标签 类似jstl的foreach标签
		s:iterator：遍历值栈的list集合
	 --&gt;</span>
	 <span class="nt">&lt;s:iterator </span><span class="na">value=</span><span class="s">"list"</span><span class="nt">&gt;</span>
	 	<span class="c">&lt;!-- 遍历list得到list里面每个user对象 --&gt;</span>
	 	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"username"</span><span class="nt">/&gt;</span>
	 	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"password"</span><span class="nt">/&gt;</span>
	 	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"address"</span><span class="nt">/&gt;</span>
	 	<span class="nt">&lt;br/&gt;</span>
	 <span class="nt">&lt;/s:iterator&gt;</span>
	 
	  <span class="nt">&lt;br/&gt;</span>
	 <span class="nt">&lt;br/&gt;</span>
	获取list的值第三种方式：
	<span class="nt">&lt;br/&gt;</span>
	<span class="nt">&lt;s:iterator </span><span class="na">value=</span><span class="s">"list"</span><span class="na"> var=</span><span class="s">"user"</span><span class="nt">&gt;</span>
		<span class="c">&lt;!-- 
			遍历值栈list集合，得到每个user对象
			机制： 把每次遍历出来的user对象放到 context里面
			获取context里面数据特点：写ognl表达式，
			使用特殊符号 #
		 --&gt;</span>
		<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"#user.username"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"#user.password"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"#user.address"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;br/&gt;</span>
	<span class="nt">&lt;/s:iterator&gt;</span>
	
	<span class="nt">&lt;br/&gt;</span>
	<span class="nt">&lt;br/&gt;</span>

</code></pre></div></div>

<h4 id="其他操作">其他操作</h4>

<ul>
  <li>使用set方法向值栈放数据，获取</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stack</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"keydemo"</span><span class="o">,</span><span class="s">"valuedemo"</span><span class="o">);</span>
</code></pre></div></div>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c">&lt;!-- 获取set方法设置的值  根据名称获取值--&gt;</span>
	<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"keydemo"</span><span class="nt">/&gt;</span> 
</code></pre></div></div>

<ul>
  <li>使用push方法向值栈放数据，获取</li>
  <li>向值栈放数据，把向值栈放数据存到数组里面，数组名称 top，根据数组获取值</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"abcd"</span><span class="o">);</span>
</code></pre></div></div>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 获取push方法设置的值 [0].top表示获取栈顶元素--&gt;</span>
<span class="nt">&lt;s:property </span><span class="na">value=</span><span class="s">"[0].top"</span><span class="nt">/&gt;</span> 
</code></pre></div></div>

<h4 id="el获取">el获取</h4>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c">&lt;!-- 使用foreach标签+el表达式获取值栈list集合数据 --&gt;</span>
	<span class="nt">&lt;c:forEach </span><span class="na">items=</span><span class="s">"</span><span class="si">${</span><span class="n">list</span> <span class="si">}</span><span class="s">"</span><span class="na"> var=</span><span class="s">"user"</span><span class="nt">&gt;</span>
		${user.username }
		${user.password }
		${user.address }
		<span class="nt">&lt;br/&gt;</span>
	<span class="nt">&lt;/c:forEach&gt;</span>
</code></pre></div></div>

<ul>
  <li>EL表达式获取域对象值</li>
  <li>向域对象里面放值使用setAttribute方法，获取值使用getAttribute方法</li>
  <li>底层增强request对象里面的方法getAttribute方法</li>
  <li>首先从request域获取值，如果获取到，直接返回</li>
  <li>如果从request域获取不到值，到值栈中把值获取出来，把值放到域对象里面</li>
</ul>
:ET
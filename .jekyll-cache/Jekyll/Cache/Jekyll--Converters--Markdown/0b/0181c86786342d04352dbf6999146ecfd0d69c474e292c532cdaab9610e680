I"Z+<ul id="markdown-toc">
  <li><a href="#简介" id="markdown-toc-简介">简介</a>    <ul>
      <li><a href="#授权模型" id="markdown-toc-授权模型">授权模型</a></li>
    </ul>
  </li>
  <li><a href="#rbac" id="markdown-toc-rbac">RBAC</a>    <ul>
      <li><a href="#基于角色访问控制" id="markdown-toc-基于角色访问控制">基于角色访问控制</a></li>
      <li><a href="#基于资源访问控制" id="markdown-toc-基于资源访问控制">基于资源访问控制</a></li>
    </ul>
  </li>
  <li><a href="#session认证" id="markdown-toc-session认证">session认证</a>    <ul>
      <li><a href="#pom" id="markdown-toc-pom">pom</a></li>
      <li><a href="#配置类" id="markdown-toc-配置类">配置类</a></li>
      <li><a href="#容器初始化" id="markdown-toc-容器初始化">容器初始化</a></li>
      <li><a href="#认证页面" id="markdown-toc-认证页面">认证页面</a></li>
      <li><a href="#认证接口" id="markdown-toc-认证接口">认证接口</a></li>
      <li><a href="#controller" id="markdown-toc-controller">controller</a></li>
      <li><a href="#实现会话功能" id="markdown-toc-实现会话功能">实现会话功能</a></li>
      <li><a href="#实现授权功能" id="markdown-toc-实现授权功能">实现授权功能</a></li>
    </ul>
  </li>
  <li><a href="#spring-security快速入门" id="markdown-toc-spring-security快速入门">Spring Security快速入门</a>    <ul>
      <li><a href="#pom-1" id="markdown-toc-pom-1">pom</a></li>
      <li><a href="#配置类-1" id="markdown-toc-配置类-1">配置类</a></li>
      <li><a href="#容器初始化-1" id="markdown-toc-容器初始化-1">容器初始化</a></li>
      <li><a href="#认证" id="markdown-toc-认证">认证</a></li>
      <li><a href="#spring-security初始化" id="markdown-toc-spring-security初始化">Spring Security初始化</a></li>
      <li><a href="#默认根路径请求" id="markdown-toc-默认根路径请求">默认根路径请求</a></li>
      <li><a href="#controller-1" id="markdown-toc-controller-1">controller</a></li>
      <li><a href="#授权" id="markdown-toc-授权">授权</a></li>
    </ul>
  </li>
</ul>
<h3 id="简介">简介</h3>

<ul>
  <li>系统为什么要认证？认证是为了保护系统的隐私数据与资源，用户的身份合法方可访问该系统的资源。</li>
  <li><strong>认证</strong> ：用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维码登录，手机短信登录，指纹认证等方式。</li>
  <li><strong>会话</strong>：用户认证通过后，为了避免用户的每次操作都进行认证可将用户的信息保证在会话中。会话就是系统为了保持当前用户的登录状态所提供的机制，常见的有基于session方式、基于token方式等。</li>
  <li>基于session的认证方式流程是，用户认证成功后，在服务端生成用户相关的数据保存在session(当前会话)中，发给客户端的 sesssion_id 存放到 cookie 中，这样用户客户端请求时带上 session_id 就可以验证服务器端是否存在 session 数据，以此完成用户的合法校验，当用户退出系统或session过期销毁时,客户端的session_id也就无效了。</li>
</ul>

<p><img src="https://i.loli.net/2020/01/02/mPpJqUCaZ2sAGSo.png" alt="image.png" /></p>

<ul>
  <li>基于token方式交互流程是，用户认证成功后，服务端生成一个token发给客户端，客户端可以放到 cookie 或 localStorage 等存储中，每次请求时带上 token，服务端收到token通过验证后即可确认用户身份。</li>
</ul>

<p><img src="https://i.loli.net/2020/01/02/XLWU8KDvdk94QS5.png" alt="image.png" /></p>

<ul>
  <li>基于session的认证方式由Servlet规范定制，服务端要存储session信息需要占用内存资源，客户端需要支持cookie；</li>
  <li>基于token的方式则一般不需要服务端存储token，并且不限制客户端的存储方式。如今移动互联网时代更多类型的客户端需要接入系统，系统多是采用前后端分离的架构进行实现，所以基于token的方式更适合。</li>
  <li><strong>授权</strong>： 授权是用户认证通过根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访问，没有权限则拒绝访问。</li>
  <li>认证是为了保证用户身份的合法性，授权则是为了更细粒度的对隐私数据进行划分，授权是在认证通过后发生的，控制不同的用户能够访问不同的资源。</li>
</ul>

<h4 id="授权模型">授权模型</h4>

<ul>
  <li>授权可简单理解为Who对What(which)进行How操作</li>
  <li>Who，即主体（Subject），主体一般是指用户，也可以是程序，需要访问系统中的资源。</li>
  <li>What，即资源（Resource），如系统菜单、页面、按钮、代码方法、系统商品信息、系统订单信息等。</li>
  <li>系统菜单、页面、按钮、代码方法都属于系统功能资源，对于web系统每个功能资源通常对应一个URL；系统商品信息、系统订单信息都属于实体资源（数据资源），实体资源由资源类型和资源实例组成，比如商品信息为资源类型，商品编号 为001的商品为资源实例。</li>
  <li>How，权限/许可（Permission），规定了用户对资源的操作许可，权限离开资源没有意义，如用户查询权限、用户添加权限、某个代码方法的调用权限、编号为001的用户的修改权限等，通过权限可知用户对哪些资源都有哪些操作许可。</li>
</ul>

<p><img src="https://i.loli.net/2020/01/02/Hi7FlEOMPqshr6Y.png" alt="image.png" /></p>

<ul>
  <li>主体、资源、权限相关的数据模型如下：
    <ul>
      <li>主体（用户id、账号、密码、…）</li>
      <li>资源（资源id、资源名称、访问地址、…）</li>
      <li>权限（权限id、权限标识、权限名称、资源id、…）</li>
      <li>角色（角色id、角色名称、…）</li>
      <li>角色和权限关系（角色id、权限id、…）</li>
      <li>主体（用户）和角色关系（用户id、角色id、…）</li>
    </ul>
  </li>
  <li>主体（用户）、资源、权限关系如下图：</li>
</ul>

<p><img src="https://i.loli.net/2020/02/22/MpGdaUH2TENn5Rg.png" alt="image.png" /></p>

<ul>
  <li>
    <p>通常企业开发中将资源和权限表合并为一张权限表，如下：</p>

    <p>资源（资源id、资源名称、访问地址、…）</p>

    <p>权限（权限id、权限标识、权限名称、资源id、…）</p>

    <p>合并为：</p>

    <p>权限（权限id、权限标识、权限名称、资源名称、资源访问地址、…）</p>
  </li>
</ul>

<p><img src="https://i.loli.net/2020/02/22/4RCgeAc8fp7w5JO.png" alt="image.png" /></p>

<h3 id="rbac">RBAC</h3>

<h4 id="基于角色访问控制">基于角色访问控制</h4>

<ul>
  <li>RBAC基于角色的访问控制（Role-Based Access Control）是按角色进行授权，比如：主体的角色为总经理可以查询企业运营报表，查询员工工资信息等，访问控制流程如下：</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if(主体.hasRole("总经理角色id")){
查询工资
}
</code></pre></div></div>

<ul>
  <li>当需要修改角色的权限时就需要修改授权的相关代码，系统可扩展性差</li>
</ul>

<h4 id="基于资源访问控制">基于资源访问控制</h4>

<ul>
  <li>RBAC基于资源的访问控制（Resource-Based Access Control）是按资源（或权限）进行授权，比如：用户必须具有查询工资权限才可以查询员工工资信息等</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if(主体.hasPermission("查询工资权限标识")){
    查询工资
}
</code></pre></div></div>

<ul>
  <li>优点：系统设计时定义好查询工资的权限标识，即使查询工资所需要的角色变化为总经理和部门经理也不需要修改授权代码，系统可扩展性强。</li>
</ul>

<h3 id="session认证">session认证</h3>

<ul>
  <li>基于Session的认证机制由Servlet规范定制，Servlet容器已实现，用户通过HttpSession的操作方法即可实现，如下是HttpSession相关的操作API。</li>
  <li>本案例工程使用maven进行构建，使用SpringMVC、Servlet3.0实现。</li>
  <li>创建maven工程 security-springmvc</li>
</ul>

<p><img src="https://i.loli.net/2020/02/22/5bKpiBSJrOn2FMy.png" alt="image.png" /></p>

<h4 id="pom">pom</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="nt">&lt;groupId&gt;</span>com.pbteach.security<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>security-springmvc<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
    <span class="nt">&lt;properties&gt;</span>
        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
        <span class="nt">&lt;maven.compiler.source&gt;</span>1.8<span class="nt">&lt;/maven.compiler.source&gt;</span>
        <span class="nt">&lt;maven.compiler.target&gt;</span>1.8<span class="nt">&lt;/maven.compiler.target&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>5.1.5.RELEASE<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>3.0.1<span class="nt">&lt;/version&gt;</span>
            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
         <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>1.18.8<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;finalName&gt;</span>security-springmvc<span class="nt">&lt;/finalName&gt;</span>
        <span class="nt">&lt;pluginManagement&gt;</span>
            <span class="nt">&lt;plugins&gt;</span>
                <span class="nt">&lt;plugin&gt;</span>
                    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
                    <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                    <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
                <span class="nt">&lt;/plugin&gt;</span>
                <span class="nt">&lt;plugin&gt;</span>
                    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
                    <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
                    <span class="nt">&lt;configuration&gt;</span>
                        <span class="nt">&lt;source&gt;</span>1.8<span class="nt">&lt;/source&gt;</span>
                        <span class="nt">&lt;target&gt;</span>1.8<span class="nt">&lt;/target&gt;</span>
                    <span class="nt">&lt;/configuration&gt;</span>
                <span class="nt">&lt;/plugin&gt;</span>

                <span class="nt">&lt;plugin&gt;</span>
                    <span class="nt">&lt;artifactId&gt;</span>maven-resources-plugin<span class="nt">&lt;/artifactId&gt;</span>
                    <span class="nt">&lt;configuration&gt;</span>
                        <span class="nt">&lt;encoding&gt;</span>utf-8<span class="nt">&lt;/encoding&gt;</span>
                        <span class="nt">&lt;useDefaultDelimiters&gt;</span>true<span class="nt">&lt;/useDefaultDelimiters&gt;</span>
                        <span class="nt">&lt;resources&gt;</span>
                            <span class="nt">&lt;resource&gt;</span>
                                <span class="nt">&lt;directory&gt;</span>src/main/resources<span class="nt">&lt;/directory&gt;</span>
                                <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
                                <span class="nt">&lt;includes&gt;</span>
                                    <span class="nt">&lt;include&gt;</span>**/*<span class="nt">&lt;/include&gt;</span>
                                <span class="nt">&lt;/includes&gt;</span>
                            <span class="nt">&lt;/resource&gt;</span>
                            <span class="nt">&lt;resource&gt;</span>
                                <span class="nt">&lt;directory&gt;</span>src/main/java<span class="nt">&lt;/directory&gt;</span>
                                <span class="nt">&lt;includes&gt;</span>
                                    <span class="nt">&lt;include&gt;</span>**/*.xml<span class="nt">&lt;/include&gt;</span>
                                <span class="nt">&lt;/includes&gt;</span>
                            <span class="nt">&lt;/resource&gt;</span>
                        <span class="nt">&lt;/resources&gt;</span>
                    <span class="nt">&lt;/configuration&gt;</span>
                <span class="nt">&lt;/plugin&gt;</span>
            <span class="nt">&lt;/plugins&gt;</span>
        <span class="nt">&lt;/pluginManagement&gt;</span>
    <span class="nt">&lt;/build&gt;</span>

<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<h4 id="配置类">配置类</h4>

<ul>
  <li>在config包下定义ApplicationConfig.java，它对应web.xml中ContextLoaderListener的配置</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//相当于applicationContext.xml</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">basePackages</span> <span class="o">=</span> <span class="s">"com.pbteach.security.springmvc"</span>
                <span class="o">,</span><span class="n">excludeFilters</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@ComponentScan</span><span class="o">.</span><span class="na">Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">)})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationConfig</span> <span class="o">{</span>
    <span class="c1">//在此配置除了Controller的其它bean，比如：数据库链接池、事务管理器、业务bean等。</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>采用Servlet3.0无web.xml方式，在config包下定义WebConfig.java，它对应于DispatcherServlet配置。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//相当于springmvc.xml</span>
<span class="nd">@Configuration</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">basePackages</span> <span class="o">=</span> <span class="s">"com.pbteach.security.springmvc"</span>
            <span class="o">,</span><span class="n">includeFilters</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@ComponentScan</span><span class="o">.</span><span class="na">Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">)})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

    <span class="c1">//视频解析器</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">InternalResourceViewResolver</span> <span class="nf">viewResolver</span><span class="o">(){</span>
        <span class="nc">InternalResourceViewResolver</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InternalResourceViewResolver</span><span class="o">();</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h4 id="容器初始化">容器初始化</h4>

<ul>
  <li>在init包下定义Spring容器初始化类SpringApplicationInitializer，此类实现WebApplicationInitializer接口，Spring容器启动时加载WebApplicationInitializer接口的所有实现类。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringApplicationInitializer</span> <span class="kd">extends</span> <span class="nc">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>
    <span class="c1">//spring容器，相当于加载applicationContext.xml</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="nc">ApplicationConfig</span><span class="o">.</span><span class="na">class</span> <span class="o">};</span><span class="c1">//指定rootContext的配置类</span>
    <span class="o">}</span>
	<span class="c1">//servlet容器，相当于加载springmvc.xml</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="nc">WebConfig</span><span class="o">.</span><span class="na">class</span> <span class="o">};</span> <span class="c1">//指定servletContext的配置类</span>
    <span class="o">}</span>
	<span class="c1">//URL-mapping映射集合</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">String</span> <span class="o">[]</span> <span class="o">{</span><span class="s">"/"</span><span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>SpringApplicationInitializer相当于web.xml，使用了servlet3.0开发则不需要再定义web.xml，ApplicationConfig.class对应以下配置的application-context.xml，WebConfig.class对应以下配置的spring-mvc.xml，web.xml的内容参考：</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;web-app&gt;</span>
    <span class="nt">&lt;listener&gt;</span>
        <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener
        <span class="nt">&lt;/listener-class&gt;</span>
    <span class="nt">&lt;/listener&gt;</span>
    <span class="nt">&lt;context-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>/WEB-INF/application-context.xml<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/context-param&gt;</span>
  
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>/WEB-INF/spring-mvc.xml<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>
    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>

<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<h4 id="认证页面">认证页面</h4>

<ul>
  <li>在webapp/WEB-INF/views下定义认证页面login.jsp</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ page </span><span class="na">contentType=</span><span class="s">"text/html;charset=UTF-8"</span><span class="na"> pageEncoding=</span><span class="s">"utf-8"</span> <span class="nt">%&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>用户登录<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"login"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    用户名：<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span><span class="nt">&gt;&lt;br&gt;</span>
    密<span class="ni">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>码:
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span><span class="nt">&gt;&lt;br&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"登录"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<ul>
  <li>在WebConfig中新增如下配置，将/直接导向login.jsp页面：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"login"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="认证接口">认证接口</h4>

<ul>
  <li>用户进入认证页面，输入账号和密码，点击登录，请求/login进行身份认证。</li>
  <li>定义认证接口，此接口用于对传来的用户名、密码校验，若成功则返回该用户的详细信息，否则抛出错误异常：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 认证服务
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AuthenticationService</span> <span class="o">{</span>

    <span class="cm">/**
     * 用户认证
     * @param authenticationRequest 用户认证请求,包含账号和密码
     * @return 认证成功的用户信息
     */</span>
    <span class="nc">UserDto</span> <span class="nf">authentication</span><span class="o">(</span><span class="nc">AuthenticationRequest</span> <span class="n">authenticationRequest</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationRequest</span> <span class="o">{</span>
    <span class="cm">/**
     * 用户名
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="cm">/**
     * 密码
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 当前登录用户信息
 */</span>
<span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDto</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">fullname</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">mobile</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>认证实现类，根据用户名查找用户信息，并校验密码，这里模拟了两个用户：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationServiceImpl</span> <span class="kd">implements</span> <span class="nc">AuthenticationService</span><span class="o">{</span>

    <span class="cm">/**
     * 用户认证,校验用户身份信息是否合法
     * @param authenticationRequest 用户认证请求,包含账号和密码
     * @return 认证成功的用户信息
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">UserDto</span> <span class="nf">authentication</span><span class="o">(</span><span class="nc">AuthenticationRequest</span> <span class="n">authenticationRequest</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">//校验参数是否为空</span>
        <span class="k">if</span><span class="o">(</span><span class="n">authenticationRequest</span> <span class="o">==</span> <span class="kc">null</span>
                <span class="o">||</span> <span class="nc">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">authenticationRequest</span><span class="o">.</span><span class="na">getUsername</span><span class="o">())</span>
                <span class="o">||</span> <span class="nc">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">authenticationRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"账号或密码为空"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">//根据账号去查询数据库</span>
        <span class="nc">UserDto</span> <span class="n">userDto</span> <span class="o">=</span> <span class="n">getUserDto</span><span class="o">(</span><span class="n">authenticationRequest</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
        <span class="c1">//判断用户是否为空</span>
        <span class="k">if</span><span class="o">(</span><span class="n">userDto</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"查询不到该用户"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">//校验密码</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">authenticationRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">userDto</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"账号或密码错误"</span><span class="o">);</span>
        <span class="o">}</span>
		<span class="c1">//认证通过，返回用户身份信息</span>
        <span class="k">return</span> <span class="n">userDto</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">//模拟用户查询</span>
    <span class="kd">public</span> <span class="nc">UserDto</span> <span class="nf">getUserDto</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">userMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">//用户信息</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">UserDto</span><span class="o">&gt;</span> <span class="n">userMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="o">{</span>
        <span class="n">userMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"zhangsan"</span><span class="o">,</span><span class="k">new</span> <span class="nc">UserDto</span><span class="o">(</span><span class="s">"1010"</span><span class="o">,</span><span class="s">"zhangsan"</span><span class="o">,</span><span class="s">"123"</span><span class="o">,</span><span class="s">"张三"</span><span class="o">,</span><span class="s">"133443"</span><span class="o">));</span>
        <span class="n">userMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"lisi"</span><span class="o">,</span><span class="k">new</span> <span class="nc">UserDto</span><span class="o">(</span><span class="s">"1011"</span><span class="o">,</span><span class="s">"lisi"</span><span class="o">,</span><span class="s">"456"</span><span class="o">,</span><span class="s">"李四"</span><span class="o">,</span><span class="s">"144553"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="controller">controller</h4>

<ul>
  <li>登录Controller，对/login请求处理，它调用AuthenticationService完成认证并返回登录结果提示信息：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">AuthenticationService</span> <span class="n">authenticationService</span><span class="o">;</span>

    <span class="cm">/**
     * 用户登录,登录出错就会抛出异常，登录成功就会返回纯文本
     * @param authenticationRequest 登录请求
     * @return
     */</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/login"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="o">{</span><span class="s">"text/plain;charset=UTF-8"</span><span class="o">})</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">login</span><span class="o">(</span><span class="nc">AuthenticationRequest</span> <span class="n">authenticationRequest</span><span class="o">){</span>
        <span class="nc">UserDetails</span> <span class="n">userDetails</span> <span class="o">=</span> <span class="n">authenticationService</span><span class="o">.</span><span class="na">authentication</span><span class="o">(</span><span class="n">authenticationRequest</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">userDetails</span><span class="o">.</span><span class="na">getFullname</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 登录成功"</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h4 id="实现会话功能">实现会话功能</h4>

<ul>
  <li>会话是指用户登入系统后，系统会记住该用户的登录状态，他可以在系统连续操作直到退出系统的过程。</li>
  <li>认证的目的是对系统资源的保护，每次对资源的访问，系统必须得知道是谁在访问资源，才能对该请求进行合法性拦截。因此，在认证成功后，一般会把认证成功的用户信息放入Session中，在后续的请求中，系统能够从Session中获取到当前用户，用这样的方式来实现会话机制。</li>
  <li>（1）增加会话控制：首先在UserDto中定义一个SESSION_USER_KEY，作为Session中存放登录用户信息的key。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">public static final String SESSION_USER_KEY = "_user";</code></p>

<ul>
  <li>然后修改LoginController，认证成功后，将用户信息放入当前会话。并增加用户登出方法，登出时将session置为失效。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 用户登录
 * @param authenticationRequest 登录请求
 * @param session http会话
 * @return
 */</span>
 <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/login"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="s">"text/plain;charset=utf-8"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">login</span><span class="o">(</span><span class="nc">AuthenticationRequest</span> <span class="n">authenticationRequest</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span>	<span class="o">{</span>

        <span class="nc">UserDto</span> <span class="n">userDto</span> <span class="o">=</span> <span class="n">authenticationService</span><span class="o">.</span><span class="na">authentication</span><span class="o">(</span><span class="n">authenticationRequest</span><span class="o">);</span>
        <span class="c1">//用户信息存入session</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="nc">UserDto</span><span class="o">.</span><span class="na">SESSION_USER_KEY</span><span class="o">,</span><span class="n">userDto</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">userDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()</span> <span class="o">+</span> <span class="s">"登录成功"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"logout"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="s">"text/plain;charset=utf-8"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">logout</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">){</span>
        <span class="c1">//清空session	</span>
        <span class="n">session</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
        <span class="k">return</span> <span class="s">"退出成功"</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="实现授权功能">实现授权功能</h4>

<ul>
  <li>
    <p>匿名用户（未登录用户）访问拦截：禁止匿名用户访问某些资源。</p>

    <p>登录用户访问拦截：根据用户的权限决定是否能访问某些资源。</p>
  </li>
  <li>
    <p>（1）增加权限数据：为了实现这样的功能，我们需要在UserDto里增加权限属性，用于表示该登录用户所拥有的权限，同时修改UserDto的构造方法。</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDto</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">SESSION_USER_KEY</span> <span class="o">=</span> <span class="s">"_user"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">fullname</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">mobile</span><span class="o">;</span>
    <span class="cm">/**
     * 用户权限
     */</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>并在AuthenticationServiceImpl中为模拟用户初始化权限，其中张三给了p1权限，李四给了p2权限。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//用户信息</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">UserDto</span><span class="o">&gt;</span> <span class="n">userMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="n">authorities1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"p1"</span><span class="o">);</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="n">authorities2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"p2"</span><span class="o">);</span>
        <span class="n">userMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"zhangsan"</span><span class="o">,</span><span class="k">new</span> <span class="nc">UserDto</span><span class="o">(</span><span class="s">"1010"</span><span class="o">,</span><span class="s">"zhangsan"</span><span class="o">,</span><span class="s">"123"</span><span class="o">,</span><span class="s">"张三"</span><span class="o">,</span><span class="s">"133443"</span><span class="o">,</span><span class="n">authorities1</span><span class="o">));</span>
        <span class="n">userMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"lisi"</span><span class="o">,</span><span class="k">new</span> <span class="nc">UserDto</span><span class="o">(</span><span class="s">"1011"</span><span class="o">,</span><span class="s">"lisi"</span><span class="o">,</span><span class="s">"456"</span><span class="o">,</span><span class="s">"李四"</span><span class="o">,</span><span class="s">"144553"</span><span class="o">,</span><span class="n">authorities2</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">UserDetails</span> <span class="nf">getUserDetails</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userDetailsMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>（2）增加测试资源：我们想实现针对不同的用户能访问不同的资源，前提是得有多个资源，因此在LoginController中增加测试资源2。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
     * 测试资源1
     * @param session
     * @return
     */</span>
 
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/r/r1"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="o">{</span><span class="s">"text/plain;charset=UTF-8"</span><span class="o">})</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">r1</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">){</span>
        <span class="nc">String</span> <span class="n">fullname</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">Object</span> <span class="n">userObj</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="nc">UserDto</span><span class="o">.</span><span class="na">SESSION_USER_KEY</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">userObj</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="n">fullname</span> <span class="o">=</span> <span class="o">((</span><span class="nc">UserDto</span><span class="o">)</span><span class="n">userObj</span><span class="o">).</span><span class="na">getFullname</span><span class="o">();</span>
        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
            <span class="n">fullname</span> <span class="o">=</span> <span class="s">"匿名"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">fullname</span> <span class="o">+</span> <span class="s">" 访问资源1"</span><span class="o">;</span>
    <span class="o">}</span>

<span class="cm">/**
 * 测试资源2
 * @param session
 * @return
 */</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/r/r2"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="o">{</span><span class="s">"text/plain;charset=UTF-8"</span><span class="o">})</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">r2</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">){</span>
    <span class="nc">String</span> <span class="n">fullname</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="nc">Object</span> <span class="n">userObj</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="nc">UserDto</span><span class="o">.</span><span class="na">SESSION_USER_KEY</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">userObj</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
        <span class="n">fullname</span> <span class="o">=</span> <span class="o">((</span><span class="nc">UserDto</span><span class="o">)</span><span class="n">userObj</span><span class="o">).</span><span class="na">getFullname</span><span class="o">();</span>
    <span class="o">}</span><span class="k">else</span><span class="o">{</span>
        <span class="n">fullname</span> <span class="o">=</span> <span class="s">"匿名"</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">fullname</span> <span class="o">+</span> <span class="s">" 访问资源2"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>（3）实现授权拦截器:在interceptor包下定义SimpleAuthenticationInterceptor拦截器，实现授权拦截：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//实现springmvc的拦截器，在访问controller之前进行拦截</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleAuthenticationInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="c1">//请求拦截方法，在这个方法中校验用户请求的URL是否在用户权限范围内</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">//读取会话信息，取出用户身份信息</span>
        <span class="nc">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">getAttribute</span><span class="o">(</span><span class="nc">UserDto</span><span class="o">.</span><span class="na">SESSION_USER_KEY</span><span class="o">);</span>
        <span class="c1">//没有认证，提示登录</span>
        <span class="k">if</span><span class="o">(</span><span class="n">object</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="n">writeContent</span><span class="o">(</span><span class="n">response</span><span class="o">,</span><span class="s">"请登录"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">UserDto</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="nc">UserDto</span><span class="o">)</span> <span class="n">object</span><span class="o">;</span>
        <span class="c1">//请求的url</span>
        <span class="nc">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">"p1"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">requestURI</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"/r1"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">"p2"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">requestURI</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"/r2"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">writeContent</span><span class="o">(</span><span class="n">response</span><span class="o">,</span><span class="s">"权限不足，拒绝访问"</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//响应输出</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">writeContent</span><span class="o">(</span><span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html;charset=utf-8"</span><span class="o">);</span>
        <span class="nc">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>在WebConfig中配置拦截器，匹配/r/**的资源为受保护的系统资源，访问该资源的请求进入SimpleAuthenticationInterceptor拦截器。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Autowired</span>
 <span class="kd">private</span> <span class="nc">SimpleAuthenticationInterceptor</span> <span class="n">simpleAuthenticationInterceptor</span><span class="o">;</span>
    
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">simpleAuthenticationInterceptor</span><span class="o">).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">"/r/**"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>未登录情况下，/r/r1与/r/r2均提示 “请先登录”。</p>

    <p>张三登录情况下，由于张三有p1权限，因此可以访问/r/r1，张三没有p2权限，访问/r/r2时提示 “权限不足 “。</p>

    <p>李四登录情况下，由于李四有p2权限，因此可以访问/r/r2，李四没有p1权限，访问/r/r1时提示 “权限不足 “。</p>
  </li>
</ul>

<h3 id="spring-security快速入门">Spring Security快速入门</h3>

<ul>
  <li>创建maven工程 security-spring-security</li>
</ul>

<p><img src="https://i.loli.net/2020/02/22/Pf6kyioVnOucqbs.png" alt="image.png" /></p>

<h4 id="pom-1">pom</h4>

<ul>
  <li>在security-springmvc的基础上增加spring-security的依赖：</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-security-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.1.4.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-security-config<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.1.4.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h4 id="配置类-1">配置类</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">basePackages</span> <span class="o">=</span> <span class="s">"com.pbteach.security.springmvc"</span>
                <span class="o">,</span><span class="n">excludeFilters</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@ComponentScan</span><span class="o">.</span><span class="na">Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">)})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationConfig</span> <span class="o">{</span>
    <span class="c1">//在此配置除了Controller的其它bean，比如：数据库链接池、事务管理器、业务bean等。</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">basePackages</span> <span class="o">=</span> <span class="s">"com.pbteach.security.springmvc"</span>
            <span class="o">,</span><span class="n">includeFilters</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@ComponentScan</span><span class="o">.</span><span class="na">Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">)})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

    <span class="c1">//视频解析器</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">InternalResourceViewResolver</span> <span class="nf">viewResolver</span><span class="o">(){</span>
        <span class="nc">InternalResourceViewResolver</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InternalResourceViewResolver</span><span class="o">();</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h4 id="容器初始化-1">容器初始化</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringApplicationInitializer</span> <span class="kd">extends</span> <span class="nc">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="nc">ApplicationConfig</span><span class="o">.</span><span class="na">class</span> <span class="o">};</span><span class="c1">//指定rootContext的配置类</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="nc">WebConfig</span><span class="o">.</span><span class="na">class</span> <span class="o">};</span> <span class="c1">//指定servletContext的配置类</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">String</span> <span class="o">[]</span> <span class="o">{</span><span class="s">"/"</span><span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="认证">认证</h4>

<ul>
  <li>springSecurity默认提供认证页面，不需要额外开发。</li>
  <li>spring security提供了用户名密码登录、退出、会话管理等认证功能，只需要配置即可使用。</li>
  <li>1) 在config包下定义WebSecurityConfig，安全配置的内容包括：用户信息、密码编码器、安全拦截机制。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableWebSecurity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="nc">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
<span class="c1">//配置用户信息服务</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span>  <span class="o">{</span>
        <span class="c1">//在userDetailsService()方法中，我们返回了一个UserDetailsService给spring容器，Spring Security会使用它来获取用户信息。我们暂时使用InMemoryUserDetailsManager实现类，并在其中分别创建了zhangsan、lisi两个用户，并设置密码和权限。</span>
        <span class="nc">InMemoryUserDetailsManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InMemoryUserDetailsManager</span><span class="o">();</span>
        <span class="n">manager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">"zhangsan"</span><span class="o">).</span><span class="na">password</span><span class="o">(</span><span class="s">"123"</span><span class="o">).</span><span class="na">authorities</span><span class="o">(</span><span class="s">"p1"</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
        <span class="n">manager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">"lisi"</span><span class="o">).</span><span class="na">password</span><span class="o">(</span><span class="s">"456"</span><span class="o">).</span><span class="na">authorities</span><span class="o">(</span><span class="s">"p2"</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">manager</span><span class="o">;</span>
<span class="o">}</span>
    <span class="c1">//密码编码器</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//先使用不加密的密码编码器</span>
        <span class="k">return</span>  <span class="nc">NoOpPasswordEncoder</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="c1">//配置安全拦截机制</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/r/**"</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span> <span class="c1">//所有的/r/**请求必须认证通过</span>
                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">permitAll</span><span class="o">()</span>             <span class="c1">//除了/r/**以外的请求都可以直接访问</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span><span class="c1">//允许表单登录</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">successForwardUrl</span><span class="o">(</span><span class="s">"/login-success"</span><span class="o">);</span><span class="c1">//自定义登录成功后的跳转地址</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>2) 加载 WebSecurityConfig：修改SpringApplicationInitializer的getRootConfigClasses()方法，添加WebSecurityConfig.class：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="nc">ApplicationConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">WebSecurityConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="spring-security初始化">Spring Security初始化</h4>

<ul>
  <li>Spring Security初始化，这里有两种情况:
    <ul>
      <li>若当前环境没有使用Spring或Spring MVC，则需要将 WebSecurityConfig(Spring Security配置类) 传入超类，以确保获取配置，并创建spring context。</li>
      <li>相反，若当前环境已经使用spring，我们应该在现有的springContext中注册Spring Security(上一步已经做将WebSecurityConfig加载至rootcontext)，此方法可以什么都不做。</li>
    </ul>
  </li>
  <li>在init包下定义SpringSecurityApplicationInitializer：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringSecurityApplicationInitializer</span>
        <span class="kd">extends</span> <span class="nc">AbstractSecurityWebApplicationInitializer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SpringSecurityApplicationInitializer</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//super(WebSecurityConfig.class);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="默认根路径请求">默认根路径请求</h4>

<ul>
  <li>在WebConfig.java中添加默认请求根路径跳转到/login，此url为spring security提供：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//默认Url根路径跳转到/login，此url为spring security提供</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"redirect:/login"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>认证成功页面:在安全配置中，认证成功将跳转到/login-success</li>
</ul>

<h4 id="controller-1">controller</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/login-success"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="o">{</span><span class="s">"text/plain;charset=UTF-8"</span><span class="o">})</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">loginSuccess</span><span class="o">(){</span>
    <span class="k">return</span> <span class="s">" 登录成功"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>启动项目，访问http://localhost:8080/security-spring-security/路径地址， 页面会根据WebConfig中addViewControllers配置规则，跳转至/login，/login是pring Security提供的登录页面。</li>
  <li>请求/logout退出，退出后再访问资源自动跳转到登录页面</li>
</ul>

<h4 id="授权">授权</h4>

<ul>
  <li>实现授权需要对用户的访问进行拦截校验，校验用户的权限是否可以操作指定的资源，Spring Security默认提供授权实现方法。</li>
  <li>在LoginController添加/r/r1或/r/r2</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 测试资源1
 * @return
 */</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/r/r1"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="o">{</span><span class="s">"text/plain;charset=UTF-8"</span><span class="o">})</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">r1</span><span class="o">(){</span>
    <span class="k">return</span> <span class="s">" 访问资源1"</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**
 * 测试资源2
 * @return
 */</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/r/r2"</span><span class="o">,</span><span class="n">produces</span> <span class="o">=</span> <span class="o">{</span><span class="s">"text/plain;charset=UTF-8"</span><span class="o">})</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">r2</span><span class="o">(){</span>
    <span class="k">return</span> <span class="s">" 访问资源2"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>在安全配置类WebSecurityConfig.java中配置授权规则：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="n">http</span>
            <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/r/r1"</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">"p1"</span><span class="o">)</span><span class="c1">//访问/r/r1资源的 url需要拥有p1权限</span>
            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/r/r2"</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">"p2"</span><span class="o">)</span><span class="c1">//访问/r/r2资源的 url需要拥有p2权限</span>
            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/r/**"</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
            <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">permitAll</span><span class="o">()</span>
            <span class="o">.</span><span class="na">and</span><span class="o">()</span>
            <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">successForwardUrl</span><span class="o">(</span><span class="s">"/login-success"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

:ET
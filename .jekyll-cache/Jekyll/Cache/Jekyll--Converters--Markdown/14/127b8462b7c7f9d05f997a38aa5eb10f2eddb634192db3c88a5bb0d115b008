I"O<ul id="markdown-toc">
  <li><a href="#场景和本质" id="markdown-toc-场景和本质">场景和本质</a>    <ul>
      <li><a href="#场景" id="markdown-toc-场景">场景</a></li>
      <li><a href="#本质" id="markdown-toc-本质">本质</a></li>
    </ul>
  </li>
  <li><a href="#案例" id="markdown-toc-案例">案例</a>    <ul>
      <li><a href="#原理" id="markdown-toc-原理">原理</a></li>
    </ul>
  </li>
  <li><a href="#应用场景" id="markdown-toc-应用场景">应用场景</a></li>
</ul>
<h3 id="场景和本质">场景和本质</h3>

<h4 id="场景">场景</h4>

<ul>
  <li>我们要建造一个复杂的产品。比如：神州飞船,Iphone。这个复杂的产品的创建。有这样一个问题需要处理：装配这些子组件是不是有个步骤问题?</li>
  <li>实际开发中，我们所需要的对象构建时，也非常复杂，有很多步骤需要处理时。</li>
</ul>

<h4 id="本质">本质</h4>

<ul>
  <li>分离了对象子组件的单独构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况下使用。</li>
  <li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li>
  <li><strong>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象</strong></li>
  <li><strong>意图：</strong>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示</li>
  <li><strong>何时使用：</strong>一些基本部件不会变，而其组合经常变化的时候（飞船可以用不同品牌的零部件构造而成）</li>
  <li><strong>优点：</strong> 1、建造者独立，易扩展。 2、便于控制细节风险</li>
  <li><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类</li>
  <li><strong>使用场景：</strong> 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖</li>
  <li><strong>注意事项：</strong>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序</li>
</ul>

<h3 id="案例">案例</h3>

<ul>
  <li><strong>builder（抽象建造者）</strong>：给出一个抽象结论，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的对象部件的创建。</li>
  <li><strong>ConcreteBuilder（具体建造者）</strong>：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。在构造过程完成后，提供产品的实例</li>
  <li><strong>Director（指导者）</strong>：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建</li>
  <li><strong>Product（产品类）</strong>：要创建的复杂对象</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.builder</span><span class="o">;</span>

<span class="cm">/**
 * 宇宙飞船类
 * @author 尚学堂高淇 www.sxt.cn
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AirShip</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="nc">OrbitalModule</span> <span class="n">orbitalModule</span><span class="o">;</span>  <span class="c1">//轨道舱</span>
	<span class="kd">private</span> <span class="nc">Engine</span> <span class="n">engine</span><span class="o">;</span> <span class="c1">//发动机</span>
	<span class="kd">private</span> <span class="nc">EscapeTower</span> <span class="n">escapeTower</span><span class="o">;</span>  <span class="c1">//逃逸塔</span>
	
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">launch</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"发射！"</span><span class="o">);</span>
	<span class="o">}</span>
	
	
	
	<span class="kd">public</span> <span class="nc">OrbitalModule</span> <span class="nf">getOrbitalModule</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">orbitalModule</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOrbitalModule</span><span class="o">(</span><span class="nc">OrbitalModule</span> <span class="n">orbitalModule</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">orbitalModule</span> <span class="o">=</span> <span class="n">orbitalModule</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">Engine</span> <span class="nf">getEngine</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">engine</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEngine</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">engine</span> <span class="o">=</span> <span class="n">engine</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">EscapeTower</span> <span class="nf">getEscapeTower</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">escapeTower</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEscapeTower</span><span class="o">(</span><span class="nc">EscapeTower</span> <span class="n">escapeTower</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">escapeTower</span> <span class="o">=</span> <span class="n">escapeTower</span><span class="o">;</span>
	<span class="o">}</span>
	
	
	
<span class="o">}</span>
<span class="cm">/**
 * 轨道舱类
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">OrbitalModule</span><span class="o">{</span>
	<span class="cm">/**
	 * 轨道舱名称
	 */</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">OrbitalModule</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span>
<span class="cm">/**
 * 发动机名称
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">Engine</span> <span class="o">{</span>
	<span class="cm">/**
	 * 发动机名称
	 */</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Engine</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	
	
<span class="o">}</span>
<span class="cm">/**
 * 逃逸塔类
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">EscapeTower</span><span class="o">{</span>
	<span class="cm">/**
	 * 逃逸塔名称
	 */</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">EscapeTower</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span>



</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.builder</span><span class="o">;</span>
<span class="cm">/**
 * 飞船组装接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AirShipDirector</span> <span class="o">{</span>
	
	<span class="cm">/**
	 * 组装飞船对象
	 * @return
	 */</span>
	<span class="nc">AirShip</span>   <span class="nf">directAirShip</span><span class="o">();</span>
	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.builder</span><span class="o">;</span>

<span class="cm">/**
 * 宇宙飞船构造接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AirShipBuilder</span> <span class="o">{</span>
	<span class="cm">/**
	 * 构造发动机
	 * @return
	 */</span>
	<span class="nc">Engine</span> <span class="nf">builderEngine</span><span class="o">();</span>
	<span class="cm">/**
	 * 构造轨道舱
	 * @return
	 */</span>
	<span class="nc">OrbitalModule</span> <span class="nf">builderOrbitalModule</span><span class="o">();</span>
	<span class="cm">/**
	 * 构造逃逸塔
	 * @return
	 */</span>
	<span class="nc">EscapeTower</span>  <span class="nf">builderEscapeTower</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.builder</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SxtAirShipBuilder</span> <span class="kd">implements</span> <span class="nc">AirShipBuilder</span> <span class="o">{</span>
	<span class="c1">//StringBuilder, 以后学习XML解析中，JDOM库中的类：DomBuilder,SaxBuilder</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Engine</span> <span class="nf">builderEngine</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"构建尚学堂牌发动机！"</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Engine</span><span class="o">(</span><span class="s">"尚学堂牌发动机！"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">EscapeTower</span> <span class="nf">builderEscapeTower</span><span class="o">()</span> <span class="o">{</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"构建逃逸塔"</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">EscapeTower</span><span class="o">(</span><span class="s">"尚学堂牌逃逸塔"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">OrbitalModule</span> <span class="nf">builderOrbitalModule</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"构建轨道舱"</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">OrbitalModule</span><span class="o">(</span><span class="s">"尚学堂牌轨道舱"</span><span class="o">);</span>
	<span class="o">}</span>	
	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.builder</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SxtAirshipDirector</span> <span class="kd">implements</span> <span class="nc">AirShipDirector</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">AirShipBuilder</span> <span class="n">builder</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">SxtAirshipDirector</span><span class="o">(</span><span class="nc">AirShipBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">;</span>
	<span class="o">}</span>


	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">AirShip</span> <span class="nf">directAirShip</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">Engine</span> <span class="n">e</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">builderEngine</span><span class="o">();</span>
		<span class="nc">OrbitalModule</span> <span class="n">o</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">builderOrbitalModule</span><span class="o">();</span>
		<span class="nc">EscapeTower</span> <span class="n">et</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">builderEscapeTower</span><span class="o">();</span>
		
		<span class="c1">//装配成飞船对象</span>
		<span class="nc">AirShip</span> <span class="n">ship</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AirShip</span><span class="o">();</span>
		<span class="n">ship</span><span class="o">.</span><span class="na">setEngine</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
		<span class="n">ship</span><span class="o">.</span><span class="na">setEscapeTower</span><span class="o">(</span><span class="n">et</span><span class="o">);</span>
		<span class="n">ship</span><span class="o">.</span><span class="na">setOrbitalModule</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
		
		<span class="k">return</span> <span class="n">ship</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.builder</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">AirShipDirector</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SxtAirshipDirector</span><span class="o">(</span><span class="k">new</span> <span class="nc">SxtAirShipBuilder</span><span class="o">());</span>

		<span class="nc">AirShip</span> <span class="n">ship</span> <span class="o">=</span> <span class="n">director</span><span class="o">.</span><span class="na">directAirShip</span><span class="o">();</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ship</span><span class="o">.</span><span class="na">getEngine</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
		
		<span class="n">ship</span><span class="o">.</span><span class="na">launch</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="原理">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>飞船类（有轨道舱，发动机，逃逸塔属性），轨道舱类（有名称属性），发动机类（有名称属性），逃逸塔类（有名称属性）

飞船构造接口（有构造发动机，轨道舱，逃逸塔方法）---&gt;尚学堂飞船构造类

飞船组装接口（有组装飞船对象的方法）---&gt;尚学堂飞船组装类（使用了飞船构造接口）
</code></pre></div></div>

<h3 id="应用场景">应用场景</h3>

<ul>
  <li>StringBuilder类的append方法：StringBuilder把构建者的角色交给了其的父类AbstractStringBuilder，<strong>最终调用的是父类的append（）</strong></li>
  <li>SQL中的PreparedStatement</li>
  <li>JDOM中，DomBuilder、SAXBuilder</li>
</ul>
:ET
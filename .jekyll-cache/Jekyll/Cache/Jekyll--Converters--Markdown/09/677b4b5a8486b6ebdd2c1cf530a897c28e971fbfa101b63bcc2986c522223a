I"zL<ul id="markdown-toc">
  <li><a href="#核心作用" id="markdown-toc-核心作用">核心作用</a></li>
  <li><a href="#核心角色" id="markdown-toc-核心角色">核心角色</a></li>
  <li><a href="#应用场景" id="markdown-toc-应用场景">应用场景</a>    <ul>
      <li><a href="#分类" id="markdown-toc-分类">分类</a></li>
    </ul>
  </li>
  <li><a href="#静态代理" id="markdown-toc-静态代理">静态代理</a>    <ul>
      <li><a href="#原理" id="markdown-toc-原理">原理</a></li>
    </ul>
  </li>
  <li><a href="#动态代理" id="markdown-toc-动态代理">动态代理</a>    <ul>
      <li><a href="#jdk自带" id="markdown-toc-jdk自带">jdk自带</a></li>
      <li><a href="#原理-1" id="markdown-toc-原理-1">原理</a></li>
      <li><a href="#优点" id="markdown-toc-优点">优点</a></li>
    </ul>
  </li>
  <li><a href="#应用场景-1" id="markdown-toc-应用场景-1">应用场景</a></li>
</ul>
<h3 id="核心作用">核心作用</h3>

<ul>
  <li>通过代理，控制对对象的访问！<strong>Proxy  pattern</strong></li>
  <li>可以详细控制访问某个（某类）对象的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理。（即：AOP的微观实现！）</li>
  <li>AOP(Aspect Oriented  Programming面向切面编程)的核心实现机制！</li>
</ul>

<h3 id="核心角色">核心角色</h3>

<ul>
  <li><strong>抽象角色</strong>：定义代理角色和真实角色的公共对外方法</li>
  <li><strong>真实角色</strong>：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用，<strong>关注真正的业务逻辑</strong></li>
  <li><strong>代理角色</strong>：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加
自己的操作。–<strong>将统一的流程控制放到代理角色中处理！</strong></li>
</ul>

<h3 id="应用场景">应用场景</h3>

<ul>
  <li>安全代理：屏蔽对真实角色的直接访问</li>
  <li>远程代理：通过代理类处理远程方法调用(RMI)</li>
  <li>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</li>
</ul>

<h4 id="分类">分类</h4>

<ul>
  <li>
    <p>静态代理(静态定义代理类)</p>
  </li>
  <li>
    <p>动态代理(动态生成代理类)</p>

    <p>•JDK自带的动态代理</p>

    <p>•javaassist字节码操作库实现</p>

    <p>•CGLIB</p>

    <p>•ASM(底层使用指令，可维护性较差)</p>
  </li>
</ul>

<h3 id="静态代理">静态代理</h3>

<ul>
  <li><strong>static  proxy</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.proxy.staticProxy</span><span class="o">;</span>
<span class="cm">/**
 * 明星接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Star</span> <span class="o">{</span>
	<span class="cm">/**
	 * 面谈
	 */</span>
	<span class="kt">void</span> <span class="nf">confer</span><span class="o">();</span>
	<span class="cm">/**
	 * 签合同
	 */</span>
	<span class="kt">void</span> <span class="nf">signContract</span><span class="o">();</span>
	<span class="cm">/**
	 * 订票
	 */</span>
	<span class="kt">void</span> <span class="nf">bookTicket</span><span class="o">();</span>
	<span class="cm">/**
	 * 唱歌
	 */</span>
	<span class="kt">void</span> <span class="nf">sing</span><span class="o">();</span>
	<span class="cm">/**
	 * 收钱
	 */</span>
	<span class="kt">void</span> <span class="nf">collectMoney</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.proxy.staticProxy</span><span class="o">;</span>
<span class="cm">/**
 * 真实角色，实现了明星接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RealStar</span> <span class="kd">implements</span> <span class="nc">Star</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">bookTicket</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"RealStar.bookTicket()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">collectMoney</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"RealStar.collectMoney()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">confer</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"RealStar.confer()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">signContract</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"RealStar.signContract()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sing</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"RealStar(周杰伦本人).sing()"</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.proxy.staticProxy</span><span class="o">;</span>
<span class="cm">/**
 * 代理人（含有真实角色属性，完成代理人不能完成的工作），实现了明星接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxyStar</span> <span class="kd">implements</span> <span class="nc">Star</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="nc">Star</span> <span class="n">star</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">ProxyStar</span><span class="o">(</span><span class="nc">Star</span> <span class="n">star</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">star</span> <span class="o">=</span> <span class="n">star</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">bookTicket</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ProxyStar.bookTicket()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">collectMoney</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ProxyStar.collectMoney()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">confer</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ProxyStar.confer()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">signContract</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ProxyStar.signContract()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sing</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">star</span><span class="o">.</span><span class="na">sing</span><span class="o">();</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.proxy.staticProxy</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Star</span> <span class="n">real</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RealStar</span><span class="o">();</span>
		<span class="nc">Star</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProxyStar</span><span class="o">(</span><span class="n">real</span><span class="o">);</span>
		
		<span class="n">proxy</span><span class="o">.</span><span class="na">confer</span><span class="o">();</span>
		<span class="n">proxy</span><span class="o">.</span><span class="na">signContract</span><span class="o">();</span>
		<span class="n">proxy</span><span class="o">.</span><span class="na">bookTicket</span><span class="o">();</span>
		<span class="n">proxy</span><span class="o">.</span><span class="na">sing</span><span class="o">();</span>
		
		<span class="n">proxy</span><span class="o">.</span><span class="na">collectMoney</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ProxyStar.confer()
ProxyStar.signContract()
ProxyStar.bookTicket()
RealStar(周杰伦本人).sing()
ProxyStar.collectMoney()
</code></pre></div></div>

<h4 id="原理">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>明星接口---》真实角色，代理角色（包含了真实角色）
客户---》代理角色（做一些无关紧要的事）---》真实角色（若代理角色无法做到的事，代理角色就调用真实角色）
</code></pre></div></div>

<h3 id="动态代理">动态代理</h3>

<ul>
  <li><strong>dynamic  proxy</strong></li>
</ul>

<h4 id="jdk自带">jdk自带</h4>

<ul>
  <li>JDK自带的动态代理</li>
  <li>–java.lang.reflect.Proxy：作用：动态生成代理类和对象</li>
  <li>–java.lang.reflect.InvocationHandler(处理器接口)：可以通过invoke方法实现对真实角色的代理访问。每次通过Proxy生成代理类对象对象时都要指定对应的处理器对象</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.proxy.dynamicProxy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>
<span class="cm">/**
 * 动态代理处理器
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StarHandler</span> <span class="kd">implements</span> <span class="nc">InvocationHandler</span> <span class="o">{</span>
	
	<span class="nc">Star</span> <span class="n">realStar</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">StarHandler</span><span class="o">(</span><span class="nc">Star</span> <span class="n">realStar</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">realStar</span> <span class="o">=</span> <span class="n">realStar</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
		<span class="nc">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"真正的方法执行前！"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"面谈，签合同，预付款，订机票"</span><span class="o">);</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"sing"</span><span class="o">)){</span>
			<span class="n">object</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">realStar</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"真正的方法执行后！"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"收尾款"</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">object</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.proxy.dynamicProxy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">Star</span> <span class="n">realStar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RealStar</span><span class="o">();</span>
		<span class="nc">StarHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StarHandler</span><span class="o">(</span><span class="n">realStar</span><span class="o">);</span>
		<span class="c1">//jdk动态生成代理类和对象</span>
		<span class="nc">Star</span> <span class="n">proxy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Star</span><span class="o">)</span> <span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="nc">ClassLoader</span><span class="o">.</span><span class="na">getSystemClassLoader</span><span class="o">(),</span> 
				<span class="k">new</span> <span class="nc">Class</span><span class="o">[]{</span><span class="nc">Star</span><span class="o">.</span><span class="na">class</span><span class="o">},</span> <span class="n">handler</span><span class="o">);</span>
		
		<span class="n">proxy</span><span class="o">.</span><span class="na">sing</span><span class="o">();</span>
		
	<span class="o">}</span>
	
<span class="o">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>真正的方法执行前！
面谈，签合同，预付款，订机票
RealStar(周杰伦本人).sing()
真正的方法执行后！
收尾款
</code></pre></div></div>

<h4 id="原理-1">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1:通过jdk自带的反射动态生成代理类和对象
2：当调用对象的方法时会进入到动态代理处理器的invoke方法中，如果方法名为真实对象需要调用的，就返回真实对象的方法结果
</code></pre></div></div>

<h4 id="优点">优点</h4>

<ul>
  <li>抽象角色中(接口)声明的所以方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。</li>
</ul>

<h3 id="应用场景-1">应用场景</h3>

<ul>
  <li>struts2中拦截器的实现</li>
  <li>数据库连接池关闭处理</li>
  <li>Hibernate中延时加载的实现</li>
  <li>mybatis中实现拦截器插件</li>
  <li>AspectJ的实现</li>
  <li>spring中AOP的实现（•日志拦截•声明式事务处理）</li>
  <li>web service</li>
  <li>RMI远程方法调用</li>
  <li>实际上，随便选择一个技术框架都会用到代理模式！！</li>
</ul>
:ET
I"+5<ul id="markdown-toc">
  <li><a href="#职责" id="markdown-toc-职责">职责</a></li>
  <li><a href="#实现细节" id="markdown-toc-实现细节">实现细节</a></li>
  <li><a href="#案例" id="markdown-toc-案例">案例</a>    <ul>
      <li><a href="#抽象构建" id="markdown-toc-抽象构建">抽象构建</a></li>
      <li><a href="#测试" id="markdown-toc-测试">测试</a></li>
      <li><a href="#原理" id="markdown-toc-原理">原理</a></li>
    </ul>
  </li>
  <li><a href="#使用场景" id="markdown-toc-使用场景">使用场景</a></li>
  <li><a href="#总结" id="markdown-toc-总结">总结</a>    <ul>
      <li><a href="#优点" id="markdown-toc-优点">优点</a></li>
      <li><a href="#缺点" id="markdown-toc-缺点">缺点</a></li>
      <li><a href="#与桥接区别" id="markdown-toc-与桥接区别">与桥接区别</a></li>
    </ul>
  </li>
</ul>
<h3 id="职责">职责</h3>

<ul>
  <li>动态的为一个对象增加新的功能</li>
  <li>装饰模式是一种用于代替继承的技术，无须通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀</li>
</ul>

<h3 id="实现细节">实现细节</h3>

<ul>
  <li>Component抽象构件角色：真实对象和装饰对象有相同的接口。这样，客户端对象就能够以与真实对象相同的方式同装饰对象交互</li>
  <li>ConcreteComponent 具体构件角色(真实对象)：•io流中的FileInputStream、FileOutputStream</li>
  <li>Decorator装饰角色：持有一个抽象构件的引用。装饰对象接受所有客户端的请求，并把这些请求转发给真实的对象。这样，就能在真实对象调用前后增加新的功能</li>
  <li>ConcreteDecorator具体装饰角色：负责给构件对象增加新的责任</li>
</ul>

<h3 id="案例">案例</h3>

<h4 id="抽象构建">抽象构建</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.decorator</span><span class="o">;</span>

<span class="cm">/**
 * 抽象构建
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ICar</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">move</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">//ConcreteComponent 具体构件角色(真实对象)</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="kd">implements</span> <span class="nc">ICar</span> <span class="o">{</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"陆地上跑！"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">//Decorator装饰角色</span>
<span class="kd">class</span> <span class="nc">SuperCar</span> <span class="kd">implements</span> <span class="nc">ICar</span> <span class="o">{</span>
	<span class="kd">protected</span> <span class="nc">ICar</span> <span class="n">car</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">SuperCar</span><span class="o">(</span><span class="nc">ICar</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">car</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">//ConcreteDecorator具体装饰角色</span>
<span class="kd">class</span> <span class="nc">FlyCar</span> <span class="kd">extends</span> <span class="nc">SuperCar</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">FlyCar</span><span class="o">(</span><span class="nc">ICar</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"天上飞！"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
		<span class="n">fly</span><span class="o">();</span>
	<span class="o">}</span>
	
<span class="o">}</span>

<span class="c1">//ConcreteDecorator具体装饰角色</span>
<span class="kd">class</span> <span class="nc">WaterCar</span> <span class="kd">extends</span> <span class="nc">SuperCar</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="nf">WaterCar</span><span class="o">(</span><span class="nc">ICar</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">swim</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"水上游！"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
		<span class="n">swim</span><span class="o">();</span>
	<span class="o">}</span>
	
<span class="o">}</span>

<span class="c1">//ConcreteDecorator具体装饰角色</span>
<span class="kd">class</span> <span class="nc">AICar</span> <span class="kd">extends</span> <span class="nc">SuperCar</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="nf">AICar</span><span class="o">(</span><span class="nc">ICar</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">autoMove</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"自动跑！"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
		<span class="n">autoMove</span><span class="o">();</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h4 id="测试">测试</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.decorator</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Car</span> <span class="n">car</span>  <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="o">();</span>
		<span class="n">car</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"增加新的功能，飞行----------"</span><span class="o">);</span>
		<span class="nc">FlyCar</span> <span class="n">flycar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FlyCar</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
		<span class="n">flycar</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"增加新的功能，水里游---------"</span><span class="o">);</span>
		<span class="nc">WaterCar</span>  <span class="n">waterCar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WaterCar</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
		<span class="n">waterCar</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"增加两个新的功能，飞行，水里游-------"</span><span class="o">);</span>
		<span class="nc">WaterCar</span> <span class="n">waterCar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WaterCar</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlyCar</span><span class="o">(</span><span class="n">car</span><span class="o">));</span>
		<span class="n">waterCar2</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>

		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>陆地上跑！
增加新的功能，飞行----------
陆地上跑！
天上飞！
增加新的功能，水里游---------
陆地上跑！
水上游！
增加两个新的功能，飞行，水里游-------
陆地上跑！
天上飞！
水上游！
</code></pre></div></div>

<h4 id="原理">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>具体构建角色：车---&gt;实现汽车接口
装饰角色：特殊车---&gt;实现汽车接口（包含一个实现了汽车接口的子类）
具体装饰角色：飞车---&gt;继承装饰角色（传入需要装饰的车，类似于组合）
</code></pre></div></div>

<h3 id="使用场景">使用场景</h3>

<ul>
  <li>IO中输入流和输出流的设计</li>
  <li>Swing包中图形界面构件功能</li>
  <li>Servlet API 中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper，HttpServletRequestWrapper 类，增强了request对象的功能。</li>
  <li>Struts2中，request，response,session对象的处理</li>
</ul>

<h3 id="总结">总结</h3>

<ul>
  <li>装饰模式（Decorator）也叫包装器模式（Wrapper）</li>
  <li>装饰模式降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构建类和具体装饰类可以独立变化，以便增加新的具体构建类和具体装饰类</li>
</ul>

<h4 id="优点">优点</h4>

<ul>
  <li>扩展对象功能，比继承灵活，不会导致类个数急剧增加</li>
  <li>可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象</li>
  <li>具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类</li>
</ul>

<h4 id="缺点">缺点</h4>

<ul>
  <li>产生很多小对象。大量小对象占据内存，一定程度上影响性能</li>
  <li>装饰模式易于出错，调试排查比较麻烦</li>
</ul>

<h4 id="与桥接区别">与桥接区别</h4>

<ul>
  <li>两个模式都是为了解决过多子类对象问题。但他们の诱因不一样。桥模式是对象自身现有机制沿着多个维度变化，是既有部分不稳定。装饰模式是为了增加新的功能</li>
</ul>
:ET
I"]2<ul id="markdown-toc">
  <li><a href="#创建型模式" id="markdown-toc-创建型模式">创建型模式</a>    <ul>
      <li><a href="#单例模式" id="markdown-toc-单例模式">单例模式</a></li>
      <li><a href="#工厂模式" id="markdown-toc-工厂模式">工厂模式</a></li>
      <li><a href="#建造者模式" id="markdown-toc-建造者模式">建造者模式</a></li>
      <li><a href="#原型模式" id="markdown-toc-原型模式">原型模式</a></li>
    </ul>
  </li>
  <li><a href="#结构型模式" id="markdown-toc-结构型模式">结构型模式</a>    <ul>
      <li><a href="#适配器模式" id="markdown-toc-适配器模式">适配器模式</a></li>
      <li><a href="#桥接模式" id="markdown-toc-桥接模式">桥接模式</a></li>
      <li><a href="#装饰模式" id="markdown-toc-装饰模式">装饰模式</a></li>
      <li><a href="#组合模式" id="markdown-toc-组合模式">组合模式</a></li>
      <li><a href="#外观模式" id="markdown-toc-外观模式">外观模式</a></li>
      <li><a href="#享元模式" id="markdown-toc-享元模式">享元模式</a></li>
      <li><a href="#代理模式" id="markdown-toc-代理模式">代理模式</a></li>
    </ul>
  </li>
  <li><a href="#行为型模式" id="markdown-toc-行为型模式">行为型模式</a>    <ul>
      <li><a href="#模板模式" id="markdown-toc-模板模式">模板模式</a></li>
      <li><a href="#命令模式" id="markdown-toc-命令模式">命令模式</a></li>
      <li><a href="#迭代器模式" id="markdown-toc-迭代器模式">迭代器模式</a></li>
      <li><a href="#观察者模式" id="markdown-toc-观察者模式">观察者模式</a></li>
      <li><a href="#中介者模式" id="markdown-toc-中介者模式">中介者模式</a></li>
      <li><a href="#备忘录模式" id="markdown-toc-备忘录模式">备忘录模式</a></li>
      <li><a href="#解释器模式" id="markdown-toc-解释器模式">解释器模式</a></li>
      <li><a href="#状态模式" id="markdown-toc-状态模式">状态模式</a></li>
      <li><a href="#策略模式" id="markdown-toc-策略模式">策略模式</a></li>
      <li><a href="#职责链模式" id="markdown-toc-职责链模式">职责链模式</a></li>
      <li><a href="#访问者模式" id="markdown-toc-访问者模式">访问者模式</a></li>
    </ul>
  </li>
</ul>
<h3 id="创建型模式">创建型模式</h3>

<h4 id="单例模式">单例模式</h4>

<ul>
  <li><a href="https://baiweijieku.github.io/2019/04/27/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">单例模式</a></li>
  <li><strong>单例模式保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</strong></li>
</ul>

<h4 id="工厂模式">工厂模式</h4>

<ul>
  <li><a href="https://baiweijieku.github.io/2019/04/27/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">工厂模式</a></li>
  <li>实例化对象，用工厂方法代替new操作，将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦</li>
</ul>

<h4 id="建造者模式">建造者模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/28/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">建造者模式</a></p>
  </li>
  <li>
    <p>分离了对象子组件的单独构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况下使用</p>
  </li>
</ul>

<h4 id="原型模式">原型模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/28/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/">原型模式</a></p>
  </li>
  <li>
    <p>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式</p>
  </li>
</ul>

<h3 id="结构型模式">结构型模式</h3>

<h4 id="适配器模式">适配器模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/29/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">适配器模式</a></p>
  </li>
  <li>
    <p>适配器模式是将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作</p>
  </li>
</ul>

<h4 id="桥接模式">桥接模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/29/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/">桥接模式</a></p>
  </li>
  <li>
    <p>处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联</p>
  </li>
</ul>

<h4 id="装饰模式">装饰模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/29/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/">装饰模式</a></p>
  </li>
  <li>装饰模式是一种用于代替继承的技术，无须通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀</li>
  <li>动态的为一个对象增加新的功能</li>
</ul>

<h4 id="组合模式">组合模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/29/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">组合模式</a></p>
  </li>
  <li>组合模式为处理树形结构提供了完美的解决方案，描述了如何将容器和叶子进行递归组合，使得用户在使用时可以一致性的对待容器和叶子</li>
  <li>当容器对象的指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行。其中，使用了递归调用的机制对整个结构进行处理</li>
</ul>

<h4 id="外观模式">外观模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/29/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">外观模式</a></p>
  </li>
  <li>为子系统提供统一的入口。封装子系统的复杂性，便于客户端调用</li>
  <li>最少知识原则:一个软件实体应当尽可能少的与其他实体发生相互作用</li>
</ul>

<h4 id="享元模式">享元模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/29/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/">享元模式</a></p>
  </li>
  <li>享元模式以共享的方式高效地支持大量细粒度对象的重用</li>
  <li>享元对象能做到共享的关键是区分了内部状态和外部状态</li>
  <li>内部状态：可以共享，不会随环境变化而改变</li>
  <li>外部状态：不可以共享，会随环境变化而改变</li>
</ul>

<h4 id="代理模式">代理模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/29/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">代理模式</a></p>
  </li>
  <li>
    <p>可以详细控制访问某个（某类）对象的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理</p>
  </li>
</ul>

<h3 id="行为型模式">行为型模式</h3>

<h4 id="模板模式">模板模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">模板模式</a></p>
  </li>
  <li>
    <p>处理某个流程的代码已经都具备，但是其中某个节点的代码暂时不能确定，我们采用工厂方法模式，将这个节点的代码实现转移给子类完成</p>
  </li>
</ul>

<h4 id="命令模式">命令模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">命令模式</a></p>
  </li>
  <li>
    <p>将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化</p>
  </li>
</ul>

<h4 id="迭代器模式">迭代器模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/30/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">迭代器模式</a></p>
  </li>
  <li>提供一种可以遍历聚合对象的方式</li>
  <li>聚合对象：存储数据</li>
  <li>迭代器：遍历数据</li>
</ul>

<h4 id="观察者模式">观察者模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">观察者模式</a></p>
  </li>
  <li>
    <p>观察者模式主要用于1：N的通知。当一个对象(<strong>目标对象Subject或Objservable</strong>)的状态变化时，他需要及时告知一系列对象(<strong>观察者对象,Observer</strong>)，令他们做出响应</p>
  </li>
</ul>

<h4 id="中介者模式">中介者模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/">中介者模式</a></p>
  </li>
  <li>如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对多关系，将导致关系及其复杂，<strong>这些对象称为“同事对象”</strong></li>
  <li>我们可以引入一个<strong>中介者对象</strong>，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为如下的星形结构</li>
</ul>

<h4 id="备忘录模式">备忘录模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/">备忘录模式</a></p>
  </li>
  <li>
    <p>就是保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态</p>
  </li>
</ul>

<h4 id="解释器模式">解释器模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/">解释器模式</a></p>
  </li>
  <li>–是一种不常用的设计模式</li>
  <li>用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计</li>
</ul>

<h4 id="状态模式">状态模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">状态模式</a></p>
  </li>
  <li>
    <p>用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题</p>
  </li>
</ul>

<h4 id="策略模式">策略模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/23/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">策略模式</a></p>
  </li>
  <li>
    <p>策略模式对应于解决某一个问题的一个算法族，允许用户从该算法族中任选一个算法解决某一问题，同时可以方便的更换算法或者增加新的算法。并且由客户端决定调用哪个算法</p>
  </li>
</ul>

<h4 id="职责链模式">职责链模式</h4>

<ul>
  <li>
    <p><a href="https://baiweijieku.github.io/2019/04/30/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/">职责链模式</a></p>
  </li>
  <li>
    <p>将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象</p>
  </li>
</ul>

<h4 id="访问者模式">访问者模式</h4>

<ul>
  <li><a href="https://baiweijieku.github.io/2019/05/04/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/">访问者模式</a></li>
  <li>表示一个作用于某对象结构中的各元素的操作，它使我们可以在不改变个元素的类的前提下定义作用于这些元素的新操作</li>
</ul>
:ET
I"+<ul id="markdown-toc">
  <li><a href="#autowired" id="markdown-toc-autowired">@Autowired</a>    <ul>
      <li><a href="#方法上" id="markdown-toc-方法上">方法上</a></li>
      <li><a href="#构造器上" id="markdown-toc-构造器上">构造器上</a></li>
      <li><a href="#参数上" id="markdown-toc-参数上">参数上</a></li>
    </ul>
  </li>
  <li><a href="#qualifier" id="markdown-toc-qualifier">@Qualifier</a></li>
  <li><a href="#不强制装配" id="markdown-toc-不强制装配">不强制装配</a></li>
  <li><a href="#primary" id="markdown-toc-primary">@Primary</a>    <ul>
      <li><a href="#使用" id="markdown-toc-使用">使用</a></li>
    </ul>
  </li>
  <li><a href="#reource" id="markdown-toc-reource">@Reource</a></li>
  <li><a href="#inject" id="markdown-toc-inject">@Inject</a></li>
  <li><a href="#aware接口" id="markdown-toc-aware接口">Aware接口</a>    <ul>
      <li><a href="#使用-1" id="markdown-toc-使用-1">使用</a></li>
    </ul>
  </li>
  <li><a href="#profile" id="markdown-toc-profile">@Profile</a>    <ul>
      <li><a href="#value" id="markdown-toc-value">@value</a></li>
      <li><a href="#测试" id="markdown-toc-测试">测试</a></li>
      <li><a href="#环境注册" id="markdown-toc-环境注册">环境注册</a></li>
    </ul>
  </li>
</ul>
<h3 id="autowired">@Autowired</h3>

<ul>
  <li>使用<code class="language-plaintext highlighter-rouge">@Autowired</code>的这个注解来进行自动装配</li>
  <li>Spring利用依赖注入（DI）完成对IOC容器中各个组件的依赖关系赋值</li>
  <li><code class="language-plaintext highlighter-rouge">@Autowired</code>：自动注入，默认优先按照类型去容器中去找对应的组件：applicationContext.getBean(BookDao.class);如果找到了则进行赋值；如果找到了多个相同类型的组件，再将属性的名称作为组件的id去容器中查找applicationContext.getBean(“bookDao”)</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//在IOC容器里面默认就是类名的首字母小写</span>
<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookDao</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">lable</span> <span class="o">=</span> <span class="s">"1"</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLable</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">lable</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLable</span><span class="o">(</span><span class="nc">String</span> <span class="n">lable</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lable</span> <span class="o">=</span> <span class="n">lable</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookDao{"</span> <span class="o">+</span>
                <span class="s">"lable='"</span> <span class="o">+</span> <span class="n">lable</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao2</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao2</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 自动装配：
 *      Spring利用依赖注入（DI）完成对IOC容器中各个组件的依赖关系赋值
 * 1) @Autowired：自动注入
 *      (1)默认优先按照类型去容器中去找对应的组件：applicationContext.getBean(BookDao.class);如果找到了则进行赋值；
 *      public class BookService {
 *          @Autowired
 *          BookDao bookDao;
 *      }
 */</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">"com.ldc.service"</span><span class="o">,</span><span class="s">"com.ldc.dao"</span><span class="o">,</span><span class="s">"com.ldc.controller"</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainConfigOfAutowired</span> <span class="o">{</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"bookDao2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">BookDao</span> <span class="nf">bookDao</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">BookDao</span> <span class="n">bookDao</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BookDao</span><span class="o">();</span>
        <span class="n">bookDao</span><span class="o">.</span><span class="na">setLable</span><span class="o">(</span><span class="s">"2"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">bookDao</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//1.创建IOC容器</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">MainConfigOfAutowired</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">BookService</span> <span class="n">bookService</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">BookService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookService</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=BookDao{lable=‘2’}}
</code></pre></div></div>

<h4 id="方法上">方法上</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Autowired</code>注解标注在方法上：用的最多的方式就是在<code class="language-plaintext highlighter-rouge">@Bean</code>注解标注的方法的参数，这个参数就是会从容器中获取，在这个方法的参数前面可以加上<code class="language-plaintext highlighter-rouge">@Autowired</code>注解，也可以省略，默认是不写<code class="language-plaintext highlighter-rouge">@Autowired</code>，都能自动装配</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Boss</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Car</span> <span class="n">car</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Car</span> <span class="nf">getCar</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Autowired</span> <span class="c1">//标注在方法上，Spring容器在创建当前对象的时候，就会调用当前方法完成赋值；</span>
    <span class="c1">//方法使用的参数，自定义类型的值从IOC容器里面进行获取</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCar</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Boss{"</span> <span class="o">+</span>
                <span class="s">"car="</span> <span class="o">+</span> <span class="n">car</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//1.创建IOC容器</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">MainConfigOfAutowired</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Boss</span> <span class="n">boss</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Boss</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Car</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">boss</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com.ldc.bean.Car@69930714
Boss{car=com.ldc.bean.Car@69930714}
</code></pre></div></div>

<h4 id="构造器上">构造器上</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Autowired</code>注解标注在构造器上，默认加在IOC容器中的组件，容器启动的时候会调用无参构造器创建对象，再进行初始化赋值操作，构造器要用的组件，也都是从容器中来获取：</li>
  <li>注意：如果组件只有一个有参的构造器，这个有参的构造器的 <code class="language-plaintext highlighter-rouge">@Autowired</code>注解可以省略，参数位置的组件还是可以自动从容器中获取</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//默认加在IOC容器中的组件，容器启动的时候会调用无参构造器创建对象，再进行初始化赋值操作</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Boss</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Car</span> <span class="n">car</span><span class="o">;</span>

    <span class="c1">//构造器要用的组件，也都是从容器中来获取</span>
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">Boss</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Boss的有参构造器"</span><span class="o">+</span><span class="n">car</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Car</span> <span class="nf">getCar</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//@Autowired //标注在方法上，Spring容器在创建当前对象的时候，就会调用当前方法完成赋值；</span>
    <span class="c1">//方法使用的参数，自定义类型的值从IOC容器里面进行获取</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCar</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Boss{"</span> <span class="o">+</span>
                <span class="s">"car="</span> <span class="o">+</span> <span class="n">car</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>还有一种用法：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Color</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Car</span> <span class="n">car</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Car</span> <span class="nf">getCar</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCar</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Color{"</span> <span class="o">+</span>
                <span class="s">"car="</span> <span class="o">+</span> <span class="n">car</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">"com.ldc.service"</span><span class="o">,</span><span class="s">"com.ldc.dao"</span><span class="o">,</span><span class="s">"com.ldc.controller"</span><span class="o">,</span><span class="s">"com.ldc.bean"</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainConfigOfAutowired</span> <span class="o">{</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"bookDao2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">BookDao</span> <span class="nf">bookDao</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">BookDao</span> <span class="n">bookDao</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BookDao</span><span class="o">();</span>
        <span class="n">bookDao</span><span class="o">.</span><span class="na">setLable</span><span class="o">(</span><span class="s">"2"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">bookDao</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//@Bean标注的方法创建对象的时候，方法参数的值从容器中获取</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Color</span> <span class="nf">color</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Color</span> <span class="n">color</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Color</span><span class="o">();</span>
        <span class="n">color</span><span class="o">.</span><span class="na">setCar</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">color</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//1.创建IOC容器</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">MainConfigOfAutowired</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Boss</span> <span class="n">boss</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Boss</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Car</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">boss</span><span class="o">);</span>
        <span class="nc">Color</span> <span class="n">color</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com.ldc.bean.Car@6e75aa0d
Boss{car=com.ldc.bean.Car@6e75aa0d}
Color{car=com.ldc.bean.Car@6e75aa0d}
</code></pre></div></div>

<h4 id="参数上">参数上</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Autowired</code>注解标注在参数上：效果是一样的</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//默认加在IOC容器中的组件，容器启动的时候会调用无参构造器创建对象，再进行初始化赋值操作</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Boss</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Car</span> <span class="n">car</span><span class="o">;</span>

    <span class="c1">//构造器要用的组件，也都是从容器中来获取</span>

    <span class="c1">//我们也可以标注在参数上效果是一样的</span>
    <span class="kd">public</span> <span class="nf">Boss</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Boss的有参构造器"</span><span class="o">+</span><span class="n">car</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Car</span> <span class="nf">getCar</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//@Autowired //标注在方法上，Spring容器在创建当前对象的时候，就会调用当前方法完成赋值；</span>
    <span class="c1">//方法使用的参数，自定义类型的值从IOC容器里面进行获取</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCar</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Boss{"</span> <span class="o">+</span>
                <span class="s">"car="</span> <span class="o">+</span> <span class="n">car</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="qualifier">@Qualifier</h3>

<ul>
  <li>虽然，我们在属性名写了bookDao2，但是，我就想要装配bookDao;实际上也是可以的：我们可以使用 <code class="language-plaintext highlighter-rouge">@Qualifier</code>这个注解</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">@Qualifier</code> 指定需要装配的组件的id，而不是使用属性名</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"bookDao"</span><span class="o">)</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao2</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao2</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=BookDao{lable=‘1’}}
</code></pre></div></div>

<ul>
  <li>而当我们的容器里面没有一个对应的bean的时候，这个时候，就是会报一个错 ：</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name ‘bookService’: Unsatisfied dependency expressed through field ‘bookDao2’; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type ‘com.ldc.dao.BookDao’ available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=bookDao), @org.springframework.beans.factory.annotation.Autowired(required=true)}
</code></pre></div></div>

<h3 id="不强制装配">不强制装配</h3>

<ul>
  <li>那可不可以在使用自动装配的时候，这个bean不是必须的呢？如果容器里面没有对应的bean，我就不装配，实际上也是可以的：我们要<code class="language-plaintext highlighter-rouge">@Autowired</code>注解里面添加<code class="language-plaintext highlighter-rouge">required = false</code>这个属性</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"bookDao"</span><span class="o">)</span>
    <span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao2</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao2</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=null}
</code></pre></div></div>

<h3 id="primary">@Primary</h3>

<ul>
  <li>我们还可以利用一个注解来让Spring在自动装配的时候，首选装配哪个bean：<code class="language-plaintext highlighter-rouge">@Primary</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">({</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">})</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Inherited</span>
<span class="nd">@Documented</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Primary</span> <span class="o">{</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="使用">使用</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">"com.ldc.service"</span><span class="o">,</span><span class="s">"com.ldc.dao"</span><span class="o">,</span><span class="s">"com.ldc.controller"</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainConfigOfAutowired</span> <span class="o">{</span>
	<span class="c1">//标注bookDao2是首选装配</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"bookDao2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">BookDao</span> <span class="nf">bookDao</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">BookDao</span> <span class="n">bookDao</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BookDao</span><span class="o">();</span>
        <span class="n">bookDao</span><span class="o">.</span><span class="na">setLable</span><span class="o">(</span><span class="s">"2"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">bookDao</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="c1">//@Qualifier("bookDao")</span>
    <span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao2</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao2</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=BookDao{lable=‘2’}}
</code></pre></div></div>

<ul>
  <li>如果是使用了<code class="language-plaintext highlighter-rouge">@Qualifier("bookDao")</code>明确指定了的：那还是按照明确指定的bean来进行装配</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"bookDao"</span><span class="o">)</span>
    <span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=BookDao{lable=‘1’}}
</code></pre></div></div>

<h3 id="reource">@Reource</h3>

<ul>
  <li>Spring还支持使用<code class="language-plaintext highlighter-rouge">@Resource</code>(JSR250)和<code class="language-plaintext highlighter-rouge">@Inject</code>(JSR330)</li>
  <li><code class="language-plaintext highlighter-rouge">@Resource</code>：可以和<code class="language-plaintext highlighter-rouge">@Autowired</code>一样实现自动的装配，默认是按照组件的名称来进行装配,没有支持<code class="language-plaintext highlighter-rouge">@Primary</code>也没有支持和<code class="language-plaintext highlighter-rouge">@Autowired(required = false)</code>一样的功能</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="nd">@Resource</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//1.创建IOC容器</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">MainConfigOfAutowired</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">BookService</span> <span class="n">bookService</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">BookService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookService</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=BookDao{lable=‘1’}}
</code></pre></div></div>

<ul>
  <li>我们也可以用<code class="language-plaintext highlighter-rouge">@Resource</code>注解里面的name属性来指定装配哪一个：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"bookDao2"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=BookDao{lable=‘2’}}
</code></pre></div></div>

<h3 id="inject">@Inject</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Inject</code>：需要导入javax.inject的包,和<code class="language-plaintext highlighter-rouge">@Autowired</code>的功能一样,没有支持和<code class="language-plaintext highlighter-rouge">@Autowired(required = false)</code>一样的功能</li>
  <li><code class="language-plaintext highlighter-rouge">AutowiredAnnotationBeanPostProcessor</code>是用来解析完成自动装配的功能的</li>
  <li><code class="language-plaintext highlighter-rouge">@Autowired</code>：是Spring定义的</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@Resource</code> 和 <code class="language-plaintext highlighter-rouge">@Inject</code>都是java的规范</p>
  </li>
  <li>导入jar包</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     &lt;!-- https://mvnrepository.com/artifact/javax.inject/javax.inject --&gt;
     &lt;dependency&gt;
         &lt;groupId&gt;javax.inject&lt;/groupId&gt;
         &lt;artifactId&gt;javax.inject&lt;/artifactId&gt;
         &lt;version&gt;1&lt;/version&gt;
     &lt;/dependency&gt;

</code></pre></div></div>

<ul>
  <li>使用</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">BookDao</span> <span class="n">bookDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookDao</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"BookService{"</span> <span class="o">+</span>
                <span class="s">"bookDao="</span> <span class="o">+</span> <span class="n">bookDao</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BookService{bookDao=BookDao{lable=‘2’}}
</code></pre></div></div>

<h3 id="aware接口">Aware接口</h3>

<ul>
  <li>自定义组件想要使用Spring容器底层的一些组件（ApplicationContext、BeanFactory…）
自定义组件实现xxxAware接口就可以实现，在创建对象的时候，会调用接口规定的方法注入相关的组件;</li>
  <li>把Spring底层的一些组件注入到自定义的bean中；</li>
  <li>xxxAware等这些都是利用后置处理器的机制，比如ApplicationContextAware 是通过ApplicationContextAwareProcessor来进行处理的；</li>
  <li>Aware是一个总接口，他有很多的实现类</li>
</ul>

<h4 id="使用-1">使用</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Red</span> <span class="kd">implements</span> <span class="nc">ApplicationContextAware</span><span class="o">,</span> <span class="nc">BeanNameAware</span> <span class="o">,</span> <span class="nc">EmbeddedValueResolverAware</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setApplicationContext</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
        <span class="c1">//如果我们后来要用，我们就用一个变量来存起来</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"传入的IOC容器："</span><span class="o">+</span><span class="n">applicationContext</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">applicationContext</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBeanName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"当前bean的名字："</span><span class="o">+</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmbeddedValueResolver</span><span class="o">(</span><span class="nc">StringValueResolver</span> <span class="n">resolver</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">resolveStringValue</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">.</span><span class="na">resolveStringValue</span><span class="o">(</span><span class="s">"你好${os.name} 我是#{20*18}"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"解析的字符串"</span><span class="o">+</span><span class="n">resolveStringValue</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//1.创建IOC容器</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">MainConfigOfAutowired</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>当前bean的名字：red
解析的字符串你好Windows 7 我是360
传入的IOC容器：org.springframework.context.annotation.AnnotationConfigApplicationContext@4141d797: startup date [Tue Jan 15 15:29:08 CST 2019]; root of context hierarchy

</code></pre></div></div>

<h3 id="profile">@Profile</h3>

<ul>
  <li>
    <p>使用@Profile进行环境搭建</p>
  </li>
  <li>
    <p>源码</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">({</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">})</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="nd">@Conditional</span><span class="o">(</span><span class="nc">ProfileCondition</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Profile</span> <span class="o">{</span>

	<span class="cm">/**
	 * The set of profiles for which the annotated component should be registered.
	 */</span>
	<span class="nc">String</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>

<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>引入数据源和mysql驱动</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      &lt;!--数据源--&gt;
      &lt;!-- https://mvnrepository.com/artifact/c3p0/c3p0 --&gt;
      &lt;dependency&gt;
          &lt;groupId&gt;c3p0&lt;/groupId&gt;
          &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
          &lt;version&gt;0.9.1.2&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;!--数据库驱动--&gt;
      &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;
      &lt;dependency&gt;
          &lt;groupId&gt;mysql&lt;/groupId&gt;
          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
          &lt;version&gt;5.1.44&lt;/version&gt;
      &lt;/dependency&gt;

</code></pre></div></div>

<ul>
  <li>再写一个dbconfig.properties</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.user=root
db.password=12358
db.driverClass=com.mysql.jdbc.Driver
</code></pre></div></div>

<ul>
  <li>配置文件</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Profile:
 *      Spring为我们提供的可以根据当前的环境，动态的激活和切换一系列组件的功能；
 * 开发环境，测试环境，生产环境
 * 我们以切换数据源为例：
 * 数据源：开发环境中(用的是A数据库)、测试环境(用的是B数据库)、而生产环境（用的又是C数据库）
 */</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:/dbconfig.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainConfigOfProfile</span> <span class="kd">implements</span> <span class="nc">EmbeddedValueResolverAware</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.user}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">user</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">StringValueResolver</span> <span class="n">resolver</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">driverClass</span><span class="o">;</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"testDataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSourceTest</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">pwd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PropertyVetoException</span> <span class="o">{</span>
        <span class="nc">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComboPooledDataSource</span><span class="o">();</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pwd</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://localhost:3306/test"</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClass</span><span class="o">(</span><span class="n">driverClass</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"devDataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSourceDev</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">pwd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PropertyVetoException</span> <span class="o">{</span>
        <span class="nc">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComboPooledDataSource</span><span class="o">();</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pwd</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://localhost:3306/dev"</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClass</span><span class="o">(</span><span class="n">driverClass</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"prodDataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSourceProd</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">pwd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PropertyVetoException</span> <span class="o">{</span>
        <span class="nc">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComboPooledDataSource</span><span class="o">();</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pwd</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://localhost:3306/prod"</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClass</span><span class="o">(</span><span class="n">driverClass</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmbeddedValueResolver</span><span class="o">(</span><span class="nc">StringValueResolver</span> <span class="n">resolver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">resolver</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">;</span>
        <span class="n">driverClass</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">.</span><span class="na">resolveStringValue</span><span class="o">(</span><span class="s">"${db.driverClass}"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="value">@value</h4>

<ul>
  <li>直接通过属性上面加上<code class="language-plaintext highlighter-rouge">@Value("${db.user}")</code>获取配置文件中的值</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.user}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">user</span><span class="o">;</span>
</code></pre></div></div>

<ul>
  <li>在参数上面使用<code class="language-plaintext highlighter-rouge">@Value("${db.password}")</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 	<span class="nd">@Bean</span><span class="o">(</span><span class="s">"testDataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSourceTest</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">pwd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PropertyVetoException</span> <span class="o">{</span>
        <span class="nc">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComboPooledDataSource</span><span class="o">();</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pwd</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://localhost:3306/test"</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClass</span><span class="o">(</span><span class="n">driverClass</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>实现EmbeddedValueResolverAware接口</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmbeddedValueResolver</span><span class="o">(</span><span class="nc">StringValueResolver</span> <span class="n">resolver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">resolver</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">;</span>
        <span class="n">driverClass</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">.</span><span class="na">resolveStringValue</span><span class="o">(</span><span class="s">"${db.driverClass}"</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<h4 id="测试">测试</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">MainConfigOfProfile</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">beanNamesForType</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBeanNamesForType</span><span class="o">(</span><span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">beanNamesForType</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>testDataSource
devDataSource
prodDataSource
</code></pre></div></div>

<h4 id="环境注册">环境注册</h4>

<ul>
  <li>Spring为我们提供的可以根据当前的环境，动态的激活和切换一系列组件的功能；</li>
  <li>开发环境，测试环境，生产环境</li>
  <li>我们以切换数据源为例：
数据源：开发环境中(用的是A数据库)、测试环境(用的是B数据库)、而生产环境（用的又是C数据库）</li>
  <li><code class="language-plaintext highlighter-rouge">@Profile</code>: 指定组件在哪一个环境的情况下才能被注册到容器中，不指定任何环境都能被注册这个组件</li>
  <li>加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中，默认是default环境，如果指定了default，那么这个bean默认会被注册到容器中</li>
  <li><code class="language-plaintext highlighter-rouge">@Profile</code> 写在配置类上，只有是指定的环境，整个配置类里面的所有配置才能开始生效</li>
  <li>没有标注环境标识的bean，在任何环境都是加载的</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @Profile:
 *      Spring为我们提供的可以根据当前的环境，动态的激活和切换一系列组件的功能；
 * 开发环境，测试环境，生产环境
 * 我们以切换数据源为例：
 * 数据源：开发环境中(用的是A数据库)、测试环境(用的是B数据库)、而生产环境（用的又是C数据库）
 * @Profile: 指定组件在哪一个环境的情况下才能被注册到容器中，不指定任何环境都能被注册这个组件
 * 1）加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中，默认是default环境，如果指定了
 * default，那么这个bean默认会被注册到容器中
 * 2）@Profile 写在配置类上，只有是指定的环境，整个配置类里面的所有配置才能开始生效
 * 3）没有标注环境标识的bean，在任何环境都是加载的
 */</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:/dbconfig.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainConfigOfProfile</span> <span class="kd">implements</span> <span class="nc">EmbeddedValueResolverAware</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.user}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">user</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">StringValueResolver</span> <span class="n">resolver</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">driverClass</span><span class="o">;</span>

    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Yellow</span> <span class="nf">yellow</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Yellow</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"testDataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSourceTest</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">pwd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PropertyVetoException</span> <span class="o">{</span>
        <span class="nc">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComboPooledDataSource</span><span class="o">();</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pwd</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://localhost:3306/test"</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClass</span><span class="o">(</span><span class="n">driverClass</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"dev"</span><span class="o">)</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"devDataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSourceDev</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">pwd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PropertyVetoException</span> <span class="o">{</span>
        <span class="nc">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComboPooledDataSource</span><span class="o">();</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pwd</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://localhost:3306/dev"</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClass</span><span class="o">(</span><span class="n">driverClass</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"prod"</span><span class="o">)</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"prodDataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSourceProd</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${db.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">pwd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PropertyVetoException</span> <span class="o">{</span>
        <span class="nc">ComboPooledDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComboPooledDataSource</span><span class="o">();</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pwd</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://localhost:3306/prod"</span><span class="o">);</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClass</span><span class="o">(</span><span class="n">driverClass</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmbeddedValueResolver</span><span class="o">(</span><span class="nc">StringValueResolver</span> <span class="n">resolver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">resolver</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">;</span>
        <span class="n">driverClass</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">.</span><span class="na">resolveStringValue</span><span class="o">(</span><span class="s">"${db.driverClass}"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">();</span>
        <span class="c1">//1)使用无参构造器来创建applicationContext对象</span>
        <span class="c1">//2)设置需要激活的环境</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">getEnvironment</span><span class="o">().</span><span class="na">setActiveProfiles</span><span class="o">(</span><span class="s">"dev"</span><span class="o">);</span>
        <span class="c1">//3)加载主配置类</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">MainConfigOfProfile</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="c1">//4)启动刷新容器</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">refresh</span><span class="o">();</span>

        <span class="nc">String</span><span class="o">[]</span> <span class="n">beanNamesForType</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBeanNamesForType</span><span class="o">(</span><span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">beanNamesForType</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>devDataSource
</code></pre></div></div>

:ET
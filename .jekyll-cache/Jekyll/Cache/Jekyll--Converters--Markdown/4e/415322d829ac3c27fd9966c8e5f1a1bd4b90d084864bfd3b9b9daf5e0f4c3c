I"B<ul id="markdown-toc">
  <li><a href="#servlet" id="markdown-toc-servlet">servlet</a></li>
  <li><a href="#servletcontainerinitializer" id="markdown-toc-servletcontainerinitializer">servletContainerInitializer</a></li>
  <li><a href="#servletcontext" id="markdown-toc-servletcontext">servletContext</a>    <ul>
      <li><a href="#servlet-1" id="markdown-toc-servlet-1">servlet</a></li>
      <li><a href="#filter" id="markdown-toc-filter">filter</a></li>
      <li><a href="#listener" id="markdown-toc-listener">listener</a></li>
      <li><a href="#注册" id="markdown-toc-注册">注册</a></li>
    </ul>
  </li>
  <li><a href="#整合springmvc" id="markdown-toc-整合springmvc">整合springMVC</a>    <ul>
      <li><a href="#父子配置类" id="markdown-toc-父子配置类">父子配置类</a></li>
      <li><a href="#controller" id="markdown-toc-controller">controller</a></li>
    </ul>
  </li>
  <li><a href="#定制springmvc" id="markdown-toc-定制springmvc">定制springMVC</a>    <ul>
      <li><a href="#静态资源" id="markdown-toc-静态资源">静态资源</a></li>
      <li><a href="#拦截器" id="markdown-toc-拦截器">拦截器</a></li>
    </ul>
  </li>
  <li><a href="#异步请求" id="markdown-toc-异步请求">异步请求</a>    <ul>
      <li><a href="#servlet-2" id="markdown-toc-servlet-2">servlet</a></li>
      <li><a href="#springmvc" id="markdown-toc-springmvc">springmvc</a></li>
      <li><a href="#deferredresult" id="markdown-toc-deferredresult">DeferredResult</a></li>
    </ul>
  </li>
</ul>
<h3 id="servlet">servlet</h3>

<ul>
  <li>用<code class="language-plaintext highlighter-rouge">@WebServlet("/hello")</code>来标注，并且指明要拦截哪些路径</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.ldc.servlet</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="nd">@WebServlet</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"hello..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>要注册Filter用<code class="language-plaintext highlighter-rouge">@WebFilter</code>注解、注册Listener用<code class="language-plaintext highlighter-rouge">@WebListener</code>注解；如果在注册的时候，需要一些初始化参数，我们就可以用<code class="language-plaintext highlighter-rouge">@WebInitParam</code>注解</li>
</ul>

<h3 id="servletcontainerinitializer">servletContainerInitializer</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shared libraries（共享库） / runtimes pluggability（运行时插件能力）

1、Servlet容器启动会扫描，当前应用里面每一个jar包的ServletContainerInitializer的实现
2、提供ServletContainerInitializer的实现类；
	必须绑定在，META-INF/services/javax.servlet.ServletContainerInitializer
	文件的内容就是ServletContainerInitializer实现类的全类名；

总结：容器在启动应用的时候，会扫描当前应用每一个jar包里面
META-INF/services/javax.servlet.ServletContainerInitializer
指定的实现类，启动并运行这个实现类的方法；传入感兴趣的类型；


ServletContainerInitializer；
@HandlesTypes；
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//容器启动的时候会将@HandlesTypes指定的这个类型下面的子类（实现类或者子接口等）传递过来</span>
<span class="c1">//传入感兴趣的类型</span>
<span class="nd">@HandlesTypes</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="nc">HelloService</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyServletContainerInitializer</span> <span class="kd">implements</span> <span class="nc">ServletContainerInitializer</span> <span class="o">{</span>
    <span class="cm">/**
     * 在应用启动的时候，会运行onStartup方法；
     * Set&lt;Class&lt;?&gt;&gt; ：感兴趣的类型的所有子类型；
     * ServletContext 代表当前的web应用的ServletContext对象，一个web应用相当于是一个ServletContext
     * @throws ServletException
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartup</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">set</span><span class="o">,</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"感兴趣的类型："</span><span class="o">);</span>
        <span class="n">set</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="servletcontext">servletContext</h3>

<h4 id="servlet-1">servlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"tomcat..."</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"UserServlet...doGet..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="filter">filter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">servletResponse</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="c1">//过滤请求</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"UserFilter...doFilter..."</span><span class="o">);</span>
        <span class="c1">//放行</span>
        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span><span class="n">servletResponse</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>

    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="listener">listener</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 监听项目的启动和停止
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserListener</span> <span class="kd">implements</span> <span class="nc">ServletContextListener</span> <span class="o">{</span>
    <span class="c1">//监听ServletContextEvent的启动初始化</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextInitialized</span><span class="o">(</span><span class="nc">ServletContextEvent</span> <span class="n">servletContextEvent</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"UserListener...contextInitialized"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">//监听ServletContextEvent销毁</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextDestroyed</span><span class="o">(</span><span class="nc">ServletContextEvent</span> <span class="n">servletContextEvent</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"UserListener...contextDestroyed"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="注册">注册</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//容器启动的时候会将@HandlesTypes指定的这个类型下面的子类（实现类或者子接口等）传递过来</span>
<span class="c1">//传入感兴趣的类型</span>
<span class="nd">@HandlesTypes</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="nc">HelloService</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyServletContainerInitializer</span> <span class="kd">implements</span> <span class="nc">ServletContainerInitializer</span> <span class="o">{</span>
    <span class="cm">/**
     * 在应用启动的时候，会运行onStartup方法；
     * Set&lt;Class&lt;?&gt;&gt; ：感兴趣的类型的所有子类型；
     * ServletContext 代表当前的web应用的ServletContext对象，一个web应用相当于是一个ServletContext
     * 1）、使用ServletContext注册Web组件（Servlet、Filter、Listener）
     * 2）、使用编码的方式，在项目启动的时候给ServletContext添加组件
     * 必须在项目启动的时候来添加
     *  （1）ServletContainerInitializer得到ServletContext对象来注册；
     *  （2）ServletContextListener的方法的参数里面的ServletContextEvent对象可以获取ServletContext对象
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartup</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">set</span><span class="o">,</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"感兴趣的类型："</span><span class="o">);</span>
        <span class="n">set</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

        <span class="c1">//注册组件</span>
        <span class="nc">Dynamic</span> <span class="n">servlet</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">addServlet</span><span class="o">(</span><span class="s">"userServlet"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">UserServlet</span><span class="o">());</span>
        <span class="c1">//配置servlet的映射信息</span>
        <span class="n">servlet</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/user"</span><span class="o">);</span>

        <span class="c1">//注册Listener</span>
        <span class="n">servletContext</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="nc">UserListener</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="c1">//注册Filter</span>
        <span class="nc">FilterRegistration</span><span class="o">.</span><span class="na">Dynamic</span> <span class="n">filter</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="s">"userFilter"</span><span class="o">,</span> <span class="nc">UserFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">filter</span><span class="o">.</span><span class="na">addMappingForUrlPatterns</span><span class="o">(</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">),</span><span class="kc">true</span><span class="o">,</span><span class="s">"/*"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>感兴趣的类型：
class com.ldc.service.AbstractHelloService
class com.ldc.service.HelloServiceImpl
class com.ldc.service.HelloServiceExt
UserListener…contextInitialized
UserFilter…doFilter…
UserFilter…doFilter…
UserFilter…doFilter…
UserServlet…doGet…
</code></pre></div></div>

<h3 id="整合springmvc">整合springMVC</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1、web容器在启动的时候，会扫描每个jar包下的META-INF/services/javax.servlet.ServletContainerInitializer
2、加载这个文件指定的类SpringServletContainerInitializer
3、spring的应用一启动会加载感兴趣的WebApplicationInitializer接口的下的所有组件；
4、并且为WebApplicationInitializer组件创建对象（组件不是接口，不是抽象类）
	1）、AbstractContextLoaderInitializer：创建根容器；createRootApplicationContext()；
	2）、AbstractDispatcherServletInitializer：
			创建一个web的ioc容器；createServletApplicationContext();
			创建了DispatcherServlet；createDispatcherServlet()；
			将创建的DispatcherServlet添加到ServletContext中；
				getServletMappings();
	3）、AbstractAnnotationConfigDispatcherServletInitializer：注解方式配置的DispatcherServlet初始化器
			创建根容器：createRootApplicationContext()
					getRootConfigClasses();传入一个配置类
			创建web的ioc容器： createServletApplicationContext();
					获取配置类；getServletConfigClasses();
	
总结：
	以注解方式来启动SpringMVC；继承AbstractAnnotationConfigDispatcherServletInitializer；
实现抽象方法指定DispatcherServlet的配置信息；



</code></pre></div></div>

<h4 id="父子配置类">父子配置类</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Web容器启动的时候创建对象；调用方法来初始化容器以及前端控制器</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWebInitializer</span> <span class="kd">extends</span> <span class="nc">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>

    <span class="c1">//获取父容器的配置类:（Spring的配置文件） ---&gt;作为父容器</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]{</span><span class="nc">RootConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
    <span class="o">}</span>

    <span class="c1">//获取web容器的配置类（SpringMVC配置文件） ---&gt;作为一个子容器</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]{</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
    <span class="o">}</span>

    <span class="c1">//获取DispatcherServlet的映射信息</span>
    <span class="c1">//  /:拦截所有请求（包括静态资源（xx.js,xx.png），但是不包括*.jsp）</span>
    <span class="c1">//  /*:拦截所有请求，连*.jsp页面都拦截；jsp页面是tomcat引擎解析的</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"/"</span><span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Spring的容器不扫描Controller，父容器</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"com.ldc."</span><span class="o">},</span><span class="n">excludeFilters</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RootConfig</span> <span class="o">{</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//SpringMVC只扫描Controller，子容器</span>
<span class="c1">//useDefaultFilters = false 禁用默认的过滤规则</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"com.ldc"</span><span class="o">},</span><span class="n">includeFilters</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="o">},</span><span class="n">useDefaultFilters</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="controller">controller</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">HelloService</span> <span class="n">helloService</span><span class="o">;</span>

    <span class="nd">@ResponseBody</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">helloService</span><span class="o">.</span><span class="na">sayHello</span><span class="o">(</span><span class="s">"tomcat"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">hello</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Hello,"</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>


</code></pre></div></div>

<h3 id="定制springmvc">定制springMVC</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>定制SpringMVC；
1）、@EnableWebMvc:开启SpringMVC定制配置功能；
	&lt;mvc:annotation-driven/&gt;；

2）、配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）
	extends WebMvcConfigurerAdapter

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//SpringMVC只扫描Controller，子容器</span>
<span class="c1">//useDefaultFilters = false 禁用默认的过滤规则</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"com.ldc"</span><span class="o">},</span><span class="n">includeFilters</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="o">},</span><span class="n">useDefaultFilters</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@EnableWebMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configurePathMatch</span><span class="o">(</span><span class="nc">PathMatchConfigurer</span> <span class="n">pathMatchConfigurer</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureContentNegotiation</span><span class="o">(</span><span class="nc">ContentNegotiationConfigurer</span> <span class="n">contentNegotiationConfigurer</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureAsyncSupport</span><span class="o">(</span><span class="nc">AsyncSupportConfigurer</span> <span class="n">asyncSupportConfigurer</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureDefaultServletHandling</span><span class="o">(</span><span class="nc">DefaultServletHandlerConfigurer</span> <span class="n">defaultServletHandlerConfigurer</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//将SpringMVC处理不了的请求交给tomcat，专门针对于静态资源的，这个时候，静态资源就是可以访问的</span>
        <span class="n">defaultServletHandlerConfigurer</span><span class="o">.</span><span class="na">enable</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFormatters</span><span class="o">(</span><span class="nc">FormatterRegistry</span> <span class="n">formatterRegistry</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//添加自定义的类型转换器</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">interceptorRegistry</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">resourceHandlerRegistry</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">corsRegistry</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">viewControllerRegistry</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureViewResolvers</span><span class="o">(</span><span class="nc">ViewResolverRegistry</span> <span class="n">viewResolverRegistry</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addArgumentResolvers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerMethodArgumentResolver</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addReturnValueHandlers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerMethodReturnValueHandler</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureMessageConverters</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">extendMessageConverters</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureHandlerExceptionResolvers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">extendHandlerExceptionResolvers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Validator</span> <span class="nf">getValidator</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">MessageCodesResolver</span> <span class="nf">getMessageCodesResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>但是上面直接实现WebMvcConfigurer接口的方式，有很多的方法用不到，我们可以用这个适配器WebMvcConfigurerAdapter来实现，它实现了WebMvcConfigurer接口</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//SpringMVC只扫描Controller，子容器</span>
<span class="c1">//useDefaultFilters = false 禁用默认的过滤规则</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"com.ldc"</span><span class="o">},</span><span class="n">includeFilters</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="o">},</span><span class="n">useDefaultFilters</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@EnableWebMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="kd">extends</span> <span class="nc">WebMvcConfigurerAdapter</span> <span class="o">{</span>
    <span class="c1">//定制</span>

    <span class="c1">//视图解析器</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureViewResolvers</span><span class="o">(</span><span class="nc">ViewResolverRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//默认所有页面都是从/WEB-INF/xxx.jsp</span>
        <span class="c1">//registry.jsp();</span>
        <span class="c1">//我们也可以自己来写规则</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">jsp</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span><span class="o">,</span> <span class="s">".jsp"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="静态资源">静态资源</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//SpringMVC只扫描Controller，子容器</span>
<span class="c1">//useDefaultFilters = false 禁用默认的过滤规则</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"com.ldc"</span><span class="o">},</span><span class="n">includeFilters</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="o">},</span><span class="n">useDefaultFilters</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@EnableWebMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="kd">extends</span> <span class="nc">WebMvcConfigurerAdapter</span> <span class="o">{</span>
    <span class="c1">//定制</span>

    <span class="c1">//视图解析器</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureViewResolvers</span><span class="o">(</span><span class="nc">ViewResolverRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//默认所有页面都是从/WEB-INF/xxx.jsp</span>
        <span class="c1">//registry.jsp();</span>
        <span class="c1">//我们也可以自己来写规则</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">jsp</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span><span class="o">,</span> <span class="s">".jsp"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//静态资源的访问</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureDefaultServletHandling</span><span class="o">(</span><span class="nc">DefaultServletHandlerConfigurer</span> <span class="n">configurer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">configurer</span><span class="o">.</span><span class="na">enable</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="拦截器">拦截器</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFirstInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="c1">//在目标方法执行之前执行</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">httpServletRequest</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">httpServletResponse</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"preHandle..."</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//在目标方法执行之后执行</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">httpServletRequest</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">httpServletResponse</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"postHandle..."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//页面响应以后执行</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">httpServletRequest</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">httpServletResponse</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"afterCompletion..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//SpringMVC只扫描Controller，子容器</span>
<span class="c1">//useDefaultFilters = false 禁用默认的过滤规则</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"com.ldc"</span><span class="o">},</span><span class="n">includeFilters</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="o">},</span><span class="n">useDefaultFilters</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@EnableWebMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="kd">extends</span> <span class="nc">WebMvcConfigurerAdapter</span> <span class="o">{</span>
    <span class="c1">//定制</span>

    <span class="c1">//视图解析器</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureViewResolvers</span><span class="o">(</span><span class="nc">ViewResolverRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//默认所有页面都是从/WEB-INF/xxx.jsp</span>
        <span class="c1">//registry.jsp();</span>
        <span class="c1">//我们也可以自己来写规则</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">jsp</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span><span class="o">,</span> <span class="s">".jsp"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//静态资源的访问</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureDefaultServletHandling</span><span class="o">(</span><span class="nc">DefaultServletHandlerConfigurer</span> <span class="n">configurer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">configurer</span><span class="o">.</span><span class="na">enable</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">//配置拦截器</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//拦截任意的路径</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyFirstInterceptor</span><span class="o">()).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">"/**"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>preHandle…
postHandle…
afterCompletion…
preHandle…
postHandle…
afterCompletion…
</code></pre></div></div>

<h3 id="异步请求">异步请求</h3>

<h4 id="servlet-2">servlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span><span class="s">" start..."</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">sayHello</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"hello..."</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span><span class="s">" end..."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">sayHello</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span> <span class="s">" processing..."</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UserFilter…doFilter…
Thread[http-nio-8081-exec-3,5,main] start…
Thread[http-nio-8081-exec-3,5,main] processing…
Thread[http-nio-8081-exec-3,5,main] end…
--------------------- 
启动服务之后，控制台打印结果为：我们可以发现从线程开始、处理请求到执行结束从始至终都是Thread[http-nio-8081-exec-3,5,main]这个线程，主线程得不到释放，当下一个请求进来就得不到处理
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/async"</span><span class="o">,</span><span class="n">asyncSupported</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloAsyncServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">//1.支持异步处理:asyncSupported = true</span>

        <span class="c1">//2.开启异步模式</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"主线程开始..."</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span><span class="s">"==&gt;"</span><span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toEpochMilli</span><span class="o">());</span>
        <span class="nc">AsyncContext</span> <span class="n">startAsync</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">startAsync</span><span class="o">();</span>
        <span class="c1">//3.业务逻辑进行异步处理，开始异步处理</span>
        <span class="n">startAsync</span><span class="o">.</span><span class="na">start</span><span class="o">(()-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"副线程开始..."</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span><span class="s">"==&gt;"</span><span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toEpochMilli</span><span class="o">());</span>
                <span class="n">sayHello</span><span class="o">();</span>
                <span class="n">startAsync</span><span class="o">.</span><span class="na">complete</span><span class="o">();</span>
                <span class="c1">//获取异步上下文</span>
                <span class="c1">//AsyncContext asyncContext = req.getAsyncContext();</span>
                <span class="c1">//4.获取响应</span>
                <span class="nc">ServletResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">startAsync</span><span class="o">.</span><span class="na">getResponse</span><span class="o">();</span>
                <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"hello async..."</span><span class="o">);</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"副线程结束..."</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span><span class="s">"==&gt;"</span><span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toEpochMilli</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"主线程结束..."</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span><span class="s">"==&gt;"</span><span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toEpochMilli</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">sayHello</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()+</span> <span class="s">" processing..."</span><span class="o">+</span><span class="s">"==&gt;"</span><span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toEpochMilli</span><span class="o">());</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>感兴趣的类型：
class com.ldc.service.HelloServiceImpl
class com.ldc.service.HelloServiceExt
class com.ldc.service.AbstractHelloService
UserListener…contextInitialized
[2019-01-18 04:47:06,991] Artifact servlet3.0:war exploded: Artifact is deployed successfully
[2019-01-18 04:47:06,992] Artifact servlet3.0:war exploded: Deploy took 447 milliseconds
UserFilter…doFilter…
UserFilter…doFilter…
UserFilter…doFilter…
主线程开始…Thread[http-nio-8081-exec-7,5,main]&gt;1547801232248
主线程结束…Thread[http-nio-8081-exec-7,5,main]&gt;1547801232253
副线程开始…Thread[http-nio-8081-exec-8,5,main]&gt;1547801232253
Thread[http-nio-8081-exec-8,5,main] processing…&gt;1547801232253
副线程结束…Thread[http-nio-8081-exec-8,5,main]==&gt;1547801235253

</code></pre></div></div>

<h4 id="springmvc">springmvc</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AsyncController</span> <span class="o">{</span>
	 <span class="cm">/**
     * 1、控制器返回Callable
     * 2、Spring异步处理，将Callable 提交到 TaskExecutor 使用一个隔离的线程进行执行
     * 3、DispatcherServlet和所有的Filter退出web容器的线程，但是response 保持打开状态；
     * 4、Callable返回结果，SpringMVC将请求重新派发给容器，恢复之前的处理；
     * 5、根据Callable返回的结果。SpringMVC继续进行视图渲染流程等（从收请求-视图渲染）。
     *
     * preHandle.../springmvc-annotation/async01
     主线程开始...Thread[http-bio-8081-exec-3,5,main]==&gt;1513932494700
     主线程结束...Thread[http-bio-8081-exec-3,5,main]==&gt;1513932494700
     =========DispatcherServlet及所有的Filter退出线程============================

     ================等待Callable执行==========
     副线程开始...Thread[MvcAsync1,5,main]==&gt;1513932494707
     副线程开始...Thread[MvcAsync1,5,main]==&gt;1513932496708
     ================Callable执行完成==========

     ================再次收到之前重发过来的请求========
     preHandle.../springmvc-annotation/async01
     postHandle...（Callable的之前的返回值就是目标方法的返回值）
     afterCompletion...

     异步的拦截器:
     1）、原生API的AsyncListener
     2）、SpringMVC：实现AsyncHandlerInterceptor；
     * @return
     */</span>
    <span class="nd">@ResponseBody</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/async01"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">async01</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"主线程开始..."</span> <span class="o">+</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">"==&gt;"</span> <span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">getEpochSecond</span><span class="o">());</span>
        <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">callable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"副线程开始..."</span> <span class="o">+</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">"==&gt;"</span> <span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">getEpochSecond</span><span class="o">());</span>
                <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"副线程结束..."</span> <span class="o">+</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">"==&gt;"</span> <span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">getEpochSecond</span><span class="o">());</span>
                <span class="k">return</span> <span class="s">"Callable&lt;String&gt; async01()"</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"主线程结束..."</span> <span class="o">+</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">"==&gt;"</span> <span class="o">+</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">getEpochSecond</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">callable</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>preHandle…
主线程开始…Thread[http-nio-8081-exec-7,5,main]&gt;1547802269
主线程结束…Thread[http-nio-8081-exec-7,5,main]&gt;1547802269
副线程开始…Thread[MvcAsync1,5,main]&gt;1547802269
副线程结束…Thread[MvcAsync1,5,main]&gt;1547802271
preHandle…
postHandle…
afterCompletion…

</code></pre></div></div>

<h4 id="deferredresult">DeferredResult</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeferredResultQueue</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">DeferredResult</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentLinkedDeque</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="nc">DeferredResult</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">deferredResult</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">deferredResult</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">DeferredResult</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AsyncController</span> <span class="o">{</span>


    <span class="nd">@ResponseBody</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/createOrder"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">DeferredResult</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">createOrder</span><span class="o">(){</span>
        <span class="nc">DeferredResult</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">deferredResult</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeferredResult</span><span class="o">&lt;&gt;((</span><span class="kt">long</span><span class="o">)</span><span class="mi">3000</span><span class="o">,</span> <span class="s">"create fail..."</span><span class="o">);</span>

        <span class="nc">DeferredResultQueue</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">deferredResult</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">deferredResult</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="nd">@ResponseBody</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/create"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">create</span><span class="o">(){</span>
        <span class="c1">//创建订单</span>
        <span class="nc">String</span> <span class="n">order</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
        <span class="nc">DeferredResult</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">deferredResult</span> <span class="o">=</span> <span class="nc">DeferredResultQueue</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="n">deferredResult</span><span class="o">.</span><span class="na">setResult</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"success===&gt;"</span><span class="o">+</span><span class="n">order</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>我们先访问这个创建订单createOrder接口</li>
  <li>我们再来访问这个create接口</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>success===&gt;a2769eec-6cc7
</code></pre></div></div>

:ET
I"&q<ul id="markdown-toc">
  <li><a href="#集合泛型" id="markdown-toc-集合泛型">集合泛型</a>    <ul>
      <li><a href="#不用泛型" id="markdown-toc-不用泛型">不用泛型</a></li>
      <li><a href="#使用泛型" id="markdown-toc-使用泛型">使用泛型</a></li>
      <li><a href="#子类对象" id="markdown-toc-子类对象">子类对象</a></li>
      <li><a href="#泛型简写" id="markdown-toc-泛型简写">泛型简写</a></li>
    </ul>
  </li>
  <li><a href="#泛型类" id="markdown-toc-泛型类">泛型类</a></li>
  <li><a href="#通配符" id="markdown-toc-通配符">通配符</a>    <ul>
      <li><a href="#-extends" id="markdown-toc--extends">? extends</a></li>
      <li><a href="#-super" id="markdown-toc--super">? super</a></li>
      <li><a href="#泛型通配符" id="markdown-toc-泛型通配符">泛型通配符?</a></li>
      <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
    </ul>
  </li>
  <li><a href="#泛型转型" id="markdown-toc-泛型转型">泛型转型</a>    <ul>
      <li><a href="#对象转型" id="markdown-toc-对象转型">对象转型</a></li>
      <li><a href="#子转父" id="markdown-toc-子转父">子转父</a></li>
    </ul>
  </li>
</ul>
<h2 id="集合泛型">集合泛型</h2>

<h3 id="不用泛型">不用泛型</h3>

<ul>
  <li>不使用泛型带来的问题</li>
  <li>ADHero（物理攻击英雄） APHero（魔法攻击英雄）都是Hero的子类</li>
  <li>ArrayList 默认接受Object类型的对象，所以所有对象都可以放进ArrayList中</li>
  <li>所以get(0) 返回的类型是Object</li>
  <li>接着，需要进行强制转换才可以得到APHero类型或者ADHero类型。</li>
  <li>如果软件开发人员记忆比较好，能记得哪个是哪个，还是可以的。 但是开发人员会犯错误，比如第20行，会记错，把第0个对象转换为ADHero,这样就会出现类型转换异常</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.ADHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.APHero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">ArrayList</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
		
		<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">APHero</span><span class="o">());</span>
		<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ADHero</span><span class="o">());</span>
		
		<span class="nc">APHero</span> <span class="n">apHero</span> <span class="o">=</span>  <span class="o">(</span><span class="nc">APHero</span><span class="o">)</span> <span class="n">heros</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="nc">ADHero</span> <span class="n">adHero</span> <span class="o">=</span>  <span class="o">(</span><span class="nc">ADHero</span><span class="o">)</span> <span class="n">heros</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
		
		<span class="nc">ADHero</span> <span class="n">adHero2</span> <span class="o">=</span>  <span class="o">(</span><span class="nc">ADHero</span><span class="o">)</span> <span class="n">heros</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="使用泛型">使用泛型</h3>

<ul>
  <li>使用泛型的好处：泛型表示这种容器，只能存放APHero，ADHero就放不进去了。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.APHero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">APHero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">APHero</span><span class="o">&gt;();</span>
		
		<span class="c1">//只有APHero可以放进去		</span>
		<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">APHero</span><span class="o">());</span>
		
		<span class="c1">//ADHero甚至放不进去</span>
		<span class="c1">//heros.add(new ADHero());</span>
		
		<span class="c1">//获取的时候也不需要进行转型，因为取出来一定是APHero</span>
		<span class="nc">APHero</span> <span class="n">apHero</span> <span class="o">=</span>  <span class="n">heros</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="子类对象">子类对象</h3>

<ul>
  <li>假设容器的泛型是Hero,那么Hero的子类APHero,ADHero都可以放进去</li>
  <li>和Hero无关的类型Item还是放不进去</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">property.Item</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.ADHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.APHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
		
		<span class="c1">//只有作为Hero的子类可以放进去		</span>
		<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">APHero</span><span class="o">());</span>
		<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ADHero</span><span class="o">());</span>
		
		<span class="c1">//和Hero无关的类型Item还是放不进去</span>
		<span class="c1">//heros.add(new Item());</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="泛型简写">泛型简写</h3>

<ul>
  <li>为了不使编译器出现警告，需要前后都使用泛型，像这样：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
</code></pre></div></div>

<ul>
  <li>不过JDK7提供了一个可以略微减少代码量的泛型简写方式</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>

<h2 id="泛型类">泛型类</h2>

<ul>
  <li>设计一个支持泛型的栈MyStack</li>
  <li>设计这个类的时候，在类的声明上，加上一个<code class="language-plaintext highlighter-rouge">&lt;T&gt;</code>，表示该类支持泛型。</li>
  <li>T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">property.Item</span><span class="o">;</span>
  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyStack</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
  
    <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;();</span>
      
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">values</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">pull</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">values</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">peek</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">values</span><span class="o">.</span><span class="na">getLast</span><span class="o">();</span>
    <span class="o">}</span>
      
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    	<span class="c1">//在声明这个Stack的时候，使用泛型&lt;Hero&gt;就表示该Stack只能放Hero</span>
    	<span class="nc">MyStack</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heroStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyStack</span><span class="o">&lt;&gt;();</span>
        <span class="n">heroStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">());</span>
        <span class="c1">//不能放Item</span>
        <span class="n">heroStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="nc">Item</span><span class="o">());</span>
        
    	<span class="c1">//在声明这个Stack的时候，使用泛型&lt;Item&gt;就表示该Stack只能放Item</span>
    	<span class="nc">MyStack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">itemStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyStack</span><span class="o">&lt;&gt;();</span>
    	<span class="n">itemStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="nc">Item</span><span class="o">());</span>
        <span class="c1">//不能放Hero</span>
    	<span class="n">itemStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">());</span>
    <span class="o">}</span>
  
<span class="o">}</span>

</code></pre></div></div>

<h2 id="通配符">通配符</h2>

<h3 id="-extends">? extends</h3>

<ul>
  <li>ArrayList heroList&lt;? extends Hero&gt; 表示这是一个Hero泛型或者其子类泛型</li>
  <li>heroList 的泛型可能是Hero，可能是APHero，可能是ADHero</li>
  <li>所以 可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的</li>
</ul>

<p><img src="http://stepimagewm.how2j.cn/837.png" alt="" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">charactor.ADHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.APHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>
  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
         
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">APHero</span><span class="o">&gt;</span> <span class="n">apHeroList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">APHero</span><span class="o">&gt;();</span>
        <span class="n">apHeroList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">APHero</span><span class="o">());</span>
        
        <span class="nc">ArrayList</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heroList</span> <span class="o">=</span> <span class="n">apHeroList</span><span class="o">;</span>
         
        <span class="c1">//? extends Hero 表示这是一个Hero泛型的子类泛型</span>
         
        <span class="c1">//heroList 的泛型可以是Hero</span>
        <span class="c1">//heroList 的泛型可以使APHero</span>
        <span class="c1">//heroList 的泛型可以使ADHero</span>
         
        <span class="c1">//可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的</span>
         
        <span class="nc">Hero</span> <span class="n">h</span><span class="o">=</span> <span class="n">heroList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
         
        <span class="c1">//但是，不能往里面放东西</span>
        <span class="n">heroList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ADHero</span><span class="o">());</span> <span class="c1">//编译错误，因为heroList的泛型 有可能是APHero</span>
         
    <span class="o">}</span>
     
<span class="o">}</span>

</code></pre></div></div>

<h3 id="-super">? super</h3>

<ul>
  <li>ArrayList heroList&lt;? super Hero&gt; 表示这是一个Hero泛型或者其父类泛型</li>
  <li>heroList的泛型可能是Hero,可能是Object</li>
  <li>可以往里面插入Hero以及Hero的子类,但是取出来有风险，因为不确定取出来是Hero还是Object</li>
</ul>

<p><img src="http://stepimagewm.how2j.cn/838.png" alt="" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">charactor.ADHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.APHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
 
        <span class="nc">ArrayList</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heroList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;();</span>
         
        <span class="c1">//? super Hero 表示 heroList的泛型是Hero或者其父类泛型</span>
         
        <span class="c1">//heroList 的泛型可以是Hero</span>
        <span class="c1">//heroList 的泛型可以是Object</span>
         
        <span class="c1">//所以就可以插入Hero</span>
        <span class="n">heroList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">());</span>
        <span class="c1">//也可以插入Hero的子类</span>
        <span class="n">heroList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">APHero</span><span class="o">());</span>
        <span class="n">heroList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ADHero</span><span class="o">());</span>
         
        <span class="c1">//但是，不能从里面取数据出来,因为其泛型可能是Object,而Object是强转Hero会失败</span>
        <span class="nc">Hero</span> <span class="n">h</span><span class="o">=</span> <span class="n">heroList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
         
    <span class="o">}</span>
 
<span class="o">}</span>

</code></pre></div></div>

<h3 id="泛型通配符">泛型通配符?</h3>

<ul>
  <li>泛型通配符? 代表任意泛型</li>
  <li>既然?代表任意泛型，那么换句话说，这个容器什么泛型都有可能</li>
  <li>所以只能以Object的形式取出来</li>
  <li>并且不能往里面放对象，因为不知道到底是一个什么泛型的容器</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">property.Item</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.APHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
 
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">APHero</span><span class="o">&gt;</span> <span class="n">apHeroList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">APHero</span><span class="o">&gt;();</span>
        
        <span class="c1">//?泛型通配符，表示任意泛型</span>
        <span class="nc">ArrayList</span><span class="o">&lt;?&gt;</span> <span class="n">generalList</span> <span class="o">=</span> <span class="n">apHeroList</span><span class="o">;</span>

        <span class="c1">//?的缺陷1： 既然?代表任意泛型，那么换句话说，你就不知道这个容器里面是什么类型</span>
        <span class="c1">//所以只能以Object的形式取出来</span>
        <span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">generalList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

        <span class="c1">//?的缺陷2： 既然?代表任意泛型，那么既有可能是Hero,也有可能是Item</span>
        <span class="c1">//所以，放哪种对象进去，都有风险，结果就什么什么类型的对象，都不能放进去</span>
        <span class="n">generalList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Item</span><span class="o">());</span> <span class="c1">//编译错误 因为?代表任意泛型，很有可能不是Item</span>
        <span class="n">generalList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">());</span> <span class="c1">//编译错误 因为?代表任意泛型，很有可能不是Hero</span>
        <span class="n">generalList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">APHero</span><span class="o">());</span> <span class="c1">//编译错误  因为?代表任意泛型，很有可能不是APHero</span>
 
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="总结">总结</h3>

<ul>
  <li>如果希望只取出，不插入，就使用? extends Hero</li>
  <li>如果希望只插入，不取出，就使用? super Hero</li>
  <li>如果希望，又能插入，又能取出，就不要用通配符？</li>
</ul>

<h2 id="泛型转型">泛型转型</h2>

<h3 id="对象转型">对象转型</h3>

<ul>
  <li>根据面向对象学习的知识，<a href="http://how2j.cn/k/interface-inheritance/interface-inheritance-casting/308.html#step624">子类转父类</a> 是一定可以成功的</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.ADHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="nc">Hero</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hero</span><span class="o">();</span>
		<span class="nc">ADHero</span> <span class="n">ad</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ADHero</span><span class="o">();</span>
		<span class="c1">//子类转父类</span>
		<span class="n">h</span> <span class="o">=</span> <span class="n">ad</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="子转父">子转父</h3>

<ul>
  <li>子类泛型不可以转换为父类泛型</li>
</ul>

<p><img src="http://stepimagewm.how2j.cn/835.png" alt="" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">generic</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.ADHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.APHero</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGeneric</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">hs</span> <span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">ADHero</span><span class="o">&gt;</span> <span class="n">adhs</span> <span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

		<span class="c1">//假设能转换成功</span>
		<span class="n">hs</span> <span class="o">=</span> <span class="n">adhs</span><span class="o">;</span>
		
		<span class="c1">//作为Hero泛型的hs,是可以向其中加入APHero的</span>
		<span class="c1">//但是hs这个引用，实际上是指向的一个ADHero泛型的容器</span>
		<span class="c1">//如果能加进去，就变成了ADHero泛型的容器里放进了APHero，这就矛盾了</span>
		<span class="n">hs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">APHero</span><span class="o">());</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p>本文章引用自：http://how2j.cn/</p>
:ET
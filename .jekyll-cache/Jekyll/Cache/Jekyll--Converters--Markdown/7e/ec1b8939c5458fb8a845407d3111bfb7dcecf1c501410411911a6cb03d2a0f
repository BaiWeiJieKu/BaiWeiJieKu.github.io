I"8O<ul id="markdown-toc">
  <li><a href="#后置处理器" id="markdown-toc-后置处理器">后置处理器</a>    <ul>
      <li><a href="#手动实现" id="markdown-toc-手动实现">手动实现</a></li>
      <li><a href="#原理" id="markdown-toc-原理">原理</a></li>
    </ul>
  </li>
  <li><a href="#自定义bean" id="markdown-toc-自定义bean">自定义Bean</a>    <ul>
      <li><a href="#手动实现-1" id="markdown-toc-手动实现-1">手动实现</a></li>
    </ul>
  </li>
  <li><a href="#应用监听器" id="markdown-toc-应用监听器">应用监听器</a>    <ul>
      <li><a href="#手动实现-2" id="markdown-toc-手动实现-2">手动实现</a></li>
      <li><a href="#原理-1" id="markdown-toc-原理-1">原理</a></li>
    </ul>
  </li>
  <li><a href="#eventlistener" id="markdown-toc-eventlistener">@EventListener</a></li>
</ul>
<h3 id="后置处理器">后置处理器</h3>

<ul>
  <li>BeanPostProcessor：<strong>bean的后置处理器</strong>，bean创建对象初始化前后进行拦截工作的</li>
  <li>BeanFactoryPostProcessor：<strong>BeanFactory的后置处理器</strong>，在BeanFactory的标准初始化之后调用
所有bean的定义已经保存加载到BeanFactory，但是bean的实例还未创建</li>
</ul>

<h4 id="手动实现">手动实现</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 扩展原理:
 * BeanPostProcessor：bean的后置处理器，bean创建对象初始化前后进行拦截工作的
 *
 * BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory的标准初始化之后调用
 * 所有bean的定义已经保存加载到BeanFactory，但是bean的实例还未创建
 */</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"com.ldc.ext"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Blue</span> <span class="nf">blue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Blue</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBeanFactoryPostProcessor</span> <span class="kd">implements</span> <span class="nc">BeanFactoryPostProcessor</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postProcessBeanFactory</span><span class="o">(</span><span class="nc">ConfigurableListableBeanFactory</span> <span class="n">beanFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"MyBeanFactoryPostProcessor...PostProcessorBeanFactory..."</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">beanFactory</span><span class="o">.</span><span class="na">getBeanDefinitionCount</span><span class="o">();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">beanFactory</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"当前的BeanFactory中有"</span><span class="o">+</span><span class="n">count</span><span class="o">+</span><span class="s">"个Bean"</span><span class="o">);</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">ExtConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MyBeanFactoryPostProcessor…PostProcessorBeanFactory…
当前的BeanFactory中有9个Bean
org.springframework.context.annotation.internalConfigurationAnnotationProcessor
org.springframework.context.annotation.internalAutowiredAnnotationProcessor
org.springframework.context.annotation.internalRequiredAnnotationProcessor
org.springframework.context.annotation.internalCommonAnnotationProcessor
org.springframework.context.event.internalEventListenerProcessor
org.springframework.context.event.internalEventListenerFactory
extConfig
myBeanFactoryPostProcessor
blue

我们可以看到MyBeanFactoryPostProcessor是在所有的bean创建之前执行的；
</code></pre></div></div>

<h4 id="原理">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  BeanFactoryPostProcessor原理:
  1)、ioc容器创建对象
  2)、invokeBeanFactoryPostProcessors(beanFactory);
  		如何找到所有的BeanFactoryPostProcessor并执行他们的方法；
  			1）、直接在BeanFactory中找到所有类型是BeanFactoryPostProcessor的组件，并执行他们的方法
  			2）、在初始化创建其他组件前面执行

</code></pre></div></div>

<h3 id="自定义bean">自定义Bean</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  2、BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor
  		postProcessBeanDefinitionRegistry();
  		在所有bean定义信息将要被加载，bean实例还未创建的；

  		优先于BeanFactoryPostProcessor执行；
  		利用BeanDefinitionRegistryPostProcessor给容器中再额外添加一些组件；

  	原理：
  		1）、ioc创建对象
  		2）、refresh()-》invokeBeanFactoryPostProcessors(beanFactory);
  		3）、从容器中获取到所有的BeanDefinitionRegistryPostProcessor组件。
  			1、依次触发所有的postProcessBeanDefinitionRegistry()方法
  			2、再来触发postProcessBeanFactory()方法BeanFactoryPostProcessor；

  		4）、再来从容器中找到BeanFactoryPostProcessor组件；然后依次触发postProcessBeanFactory()方法

</code></pre></div></div>

<h4 id="手动实现-1">手动实现</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBeanDefinitionRegistryPostProcessor</span> <span class="kd">implements</span> <span class="nc">BeanDefinitionRegistryPostProcessor</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postProcessBeanFactory</span><span class="o">(</span><span class="nc">ConfigurableListableBeanFactory</span> <span class="n">beanFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"MyBeanDefinitionRegistryPostProcessor...bean的数量"</span><span class="o">+</span><span class="n">beanFactory</span><span class="o">.</span><span class="na">getBeanDefinitionCount</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="c1">//BeanDefinitionRegistry是bean定义信息的保存中心，以后BeanFactory就是按照BeanDefinitionRegistry里面保存的每一个bean的定义信息创建bean的实例</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postProcessBeanDefinitionRegistry</span><span class="o">(</span><span class="nc">BeanDefinitionRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"MyBeanDefinitionRegistryPostProcessor...bean的数量"</span><span class="o">+</span><span class="n">registry</span><span class="o">.</span><span class="na">getBeanDefinitionCount</span><span class="o">());</span>
        <span class="nc">RootBeanDefinition</span> <span class="n">beanDefinition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RootBeanDefinition</span><span class="o">(</span><span class="nc">Blue</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">registerBeanDefinition</span><span class="o">(</span><span class="s">"hello"</span><span class="o">,</span><span class="n">beanDefinition</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MyBeanDefinitionRegistryPostProcessor…bean的数量10
MyBeanDefinitionRegistryPostProcessor…bean的数量11
MyBeanFactoryPostProcessor…PostProcessorBeanFactory…
当前的BeanFactory中有11个Bean
org.springframework.context.annotation.internalConfigurationAnnotationProcessor
org.springframework.context.annotation.internalAutowiredAnnotationProcessor
org.springframework.context.annotation.internalRequiredAnnotationProcessor
org.springframework.context.annotation.internalCommonAnnotationProcessor
org.springframework.context.event.internalEventListenerProcessor
org.springframework.context.event.internalEventListenerFactory
extConfig
myBeanDefinitionRegistryPostProcessor
myBeanFactoryPostProcessor
blue
hello
</code></pre></div></div>

<h3 id="应用监听器">应用监听器</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 3、ApplicationListener：监听容器中发布的事件。事件驱动模型开发；
  	  public interface ApplicationListener&lt;E extends ApplicationEvent&gt;
  		监听 ApplicationEvent 及其下面的子事件；

  	 步骤：
  		1）、写一个监听器（ApplicationListener实现类）来监听某个事件（ApplicationEvent及其子类）
  			@EventListener;
  			原理：使用EventListenerMethodProcessor处理器来解析方法上的@EventListener；

  		2）、把监听器加入到容器；
  		3）、只要容器中有相关事件的发布，我们就能监听到这个事件；
  				ContextRefreshedEvent：容器刷新完成（所有bean都完全创建）会发布这个事件；
  				ContextClosedEvent：关闭容器会发布这个事件；
  		4）、发布一个事件：
  				applicationContext.publishEvent()；

</code></pre></div></div>

<h4 id="手动实现-2">手动实现</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplicationListener</span> <span class="kd">implements</span> <span class="nc">ApplicationListener</span><span class="o">&lt;</span><span class="nc">ApplicationEvent</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">//当容器中发布次事件，方法触发</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onApplicationEvent</span><span class="o">(</span><span class="nc">ApplicationEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"收到的事件"</span><span class="o">+</span><span class="n">event</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test01</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">ExtConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MyBeanDefinitionRegistryPostProcessor…bean的数量11
MyBeanDefinitionRegistryPostProcessor…bean的数量12
MyBeanFactoryPostProcessor…PostProcessorBeanFactory…
当前的BeanFactory中有12个Bean
org.springframework.context.annotation.internalConfigurationAnnotationProcessor
org.springframework.context.annotation.internalAutowiredAnnotationProcessor
org.springframework.context.annotation.internalRequiredAnnotationProcessor
org.springframework.context.annotation.internalCommonAnnotationProcessor
org.springframework.context.event.internalEventListenerProcessor
org.springframework.context.event.internalEventListenerFactory
extConfig
myApplicationListener
myBeanDefinitionRegistryPostProcessor
myBeanFactoryPostProcessor
blue
hello
收到的事件org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@3a4afd8d: startup date [Wed Jan 16 20:51:59 CST 2019]; root of context hierarchy]
收到的事件org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@3a4afd8d: startup date [Wed Jan 16 20:51:59 CST 2019]; root of context hierarchy]

</code></pre></div></div>

<h4 id="原理-1">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   原理：
   	ContextRefreshedEvent、IOCTest_Ext$1[source=我发布的时间]、ContextClosedEvent；
   1）、ContextRefreshedEvent事件：
   	1）、容器创建对象：refresh()；
   	2）、finishRefresh();容器刷新完成会发布ContextRefreshedEvent事件
   2）、自己发布事件；
   3）、容器关闭会发布ContextClosedEvent；

   【事件发布流程】：
   	3）、publishEvent(new ContextRefreshedEvent(this));
   			1）、获取事件的多播器（派发器）：getApplicationEventMulticaster()
   			2）、multicastEvent派发事件：
   			3）、获取到所有的ApplicationListener；
   				for (final ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) {
   				1）、如果有Executor，可以支持使用Executor进行异步派发；
   					Executor executor = getTaskExecutor();
   				2）、否则，同步的方式直接执行listener方法；invokeListener(listener, event);
   				 拿到listener回调onApplicationEvent方法；

   【事件多播器（派发器）】
   	1）、容器创建对象：refresh();
   	2）、initApplicationEventMulticaster();初始化ApplicationEventMulticaster；
   		1）、先去容器中找有没有id=“applicationEventMulticaster”的组件；
   		2）、如果没有this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);
   			并且加入到容器中，我们就可以在其他组件要派发事件，自动注入这个applicationEventMulticaster；

   【容器中有哪些监听器】
   	1）、容器创建对象：refresh();
   	2）、registerListeners();
   		从容器中拿到所有的监听器，把他们注册到applicationEventMulticaster中；
   		String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
   		//将listener注册到ApplicationEventMulticaster中
   		getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);

</code></pre></div></div>

<h3 id="eventlistener">@EventListener</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@EventListener</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">ApplicationEvent</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listen</span><span class="o">(</span><span class="nc">ApplicationEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"UserService监听的事件"</span><span class="o">+</span><span class="n">event</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UserService监听的事件org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@3a4afd8d: startup date [Wed Jan 16 21:11:12 CST 2019]; root of context hierarchy]
收到的事件org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@3a4afd8d: startup date [Wed Jan 16 21:11:12 CST 2019]; root of context hierarchy]

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    SmartInitializingSingleton 原理：-&gt;afterSingletonsInstantiated();
    		1）、ioc容器创建对象并refresh()；
    		2）、finishBeanFactoryInitialization(beanFactory);初始化剩下的单实例bean；
    			1）、先创建所有的单实例bean；getBean();
    			2）、获取所有创建好的单实例bean，判断是否是SmartInitializingSingleton类型的；
    				如果是就调用afterSingletonsInstantiated();

</code></pre></div></div>

:ET
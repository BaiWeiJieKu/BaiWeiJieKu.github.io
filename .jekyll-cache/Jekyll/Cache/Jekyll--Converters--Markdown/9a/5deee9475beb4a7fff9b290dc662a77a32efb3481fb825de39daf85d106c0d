I"3<ul id="markdown-toc">
  <li><a href="#存储引擎" id="markdown-toc-存储引擎">存储引擎</a>    <ul>
      <li><a href="#myisam和innodb" id="markdown-toc-myisam和innodb">MyISAM和InnoDB</a></li>
    </ul>
  </li>
</ul>
<h3 id="存储引擎">存储引擎</h3>

<ul>
  <li>查看mysql提供的所有存储引擎<code class="language-plaintext highlighter-rouge">mysql&gt; show engines;</code></li>
  <li>查看默认存储引擎<code class="language-plaintext highlighter-rouge">mysql&gt; show variables like '%storage_engine%';</code></li>
  <li>查看表的存储引擎<code class="language-plaintext highlighter-rouge">show table status like "table_name" ;</code></li>
  <li>MySQL 当前默认的存储引擎是InnoDB,并且在5.7版本所有的存储引擎中只有 InnoDB 是事务性存储引擎，也就是说只有 InnoDB 支持事务。</li>
</ul>

<h4 id="myisam和innodb">MyISAM和InnoDB</h4>

<ul>
  <li>对比：
    <ul>
      <li><strong>是否支持行级锁</strong> : MyISAM 只有表级锁(table-level locking)，而InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。</li>
      <li><strong>是否支持事务和崩溃后的安全恢复： MyISAM</strong> 强调的是性能，每次查询具有原子性,其执行速度比InnoDB类型更快，但是不提供事务支持。但是<strong>InnoDB</strong> 提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</li>
      <li><strong>是否支持外键：</strong> MyISAM不支持，而InnoDB支持。</li>
      <li><strong>是否支持MVCC</strong> ：仅 InnoDB 支持。应对高并发事务, MVCC比单纯的加锁更高效;MVCC只在 <code class="language-plaintext highlighter-rouge">READ COMMITTED</code> 和 <code class="language-plaintext highlighter-rouge">REPEATABLE READ</code> 两个隔离级别下工作;MVCC可以使用 乐观(optimistic)锁 和 悲观(pessimistic)锁来实现;各数据库中MVCC实现并不统一。</li>
    </ul>
  </li>
  <li>InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code class="language-plaintext highlighter-rouge">SELECT @@tx_isolation;</code>命令来查看</li>
  <li>InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong> 事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，可以完全保证事务的隔离性要求，即达到了 SQL标准的 <strong>SERIALIZABLE(可串行化)</strong> 隔离级别。</li>
  <li>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 <strong>READ-COMMITTED(读取提交内容)</strong> ，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEAaTABLE-READ（可重读）</strong> 并不会有任何性能损失。</li>
  <li>InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下一般会用到 <strong>SERIALIZABLE(可串行化)</strong> 隔离级别。</li>
</ul>
:ET
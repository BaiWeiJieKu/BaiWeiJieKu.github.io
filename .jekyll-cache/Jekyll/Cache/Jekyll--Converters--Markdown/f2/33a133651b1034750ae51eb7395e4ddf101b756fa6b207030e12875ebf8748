I"Ϝ<ul id="markdown-toc">
  <li><a href="#what" id="markdown-toc-what">what?</a></li>
  <li><a href="#demo" id="markdown-toc-demo">Demo</a>    <ul>
      <li><a href="#servlet" id="markdown-toc-servlet">servlet</a></li>
      <li><a href="#webxml" id="markdown-toc-webxml">web.xml</a></li>
    </ul>
  </li>
  <li><a href="#获取参数" id="markdown-toc-获取参数">获取参数</a></li>
  <li><a href="#返回响应" id="markdown-toc-返回响应">返回响应</a></li>
  <li><a href="#调用流程" id="markdown-toc-调用流程">调用流程</a></li>
  <li><a href="#service" id="markdown-toc-service">service</a>    <ul>
      <li><a href="#doget" id="markdown-toc-doget">doGet</a></li>
      <li><a href="#dopost" id="markdown-toc-dopost">doPost</a></li>
      <li><a href="#service-1" id="markdown-toc-service-1">service</a></li>
    </ul>
  </li>
  <li><a href="#中文问题" id="markdown-toc-中文问题">中文问题</a></li>
  <li><a href="#生命周期" id="markdown-toc-生命周期">生命周期</a>    <ul>
      <li><a href="#实例化" id="markdown-toc-实例化">实例化</a></li>
      <li><a href="#初始化" id="markdown-toc-初始化">初始化</a></li>
      <li><a href="#提供服务" id="markdown-toc-提供服务">提供服务</a></li>
      <li><a href="#销毁" id="markdown-toc-销毁">销毁</a></li>
      <li><a href="#被回收" id="markdown-toc-被回收">被回收</a></li>
    </ul>
  </li>
  <li><a href="#跳转" id="markdown-toc-跳转">跳转</a>    <ul>
      <li><a href="#服务端" id="markdown-toc-服务端">服务端</a></li>
      <li><a href="#客户端" id="markdown-toc-客户端">客户端</a></li>
    </ul>
  </li>
  <li><a href="#自启动" id="markdown-toc-自启动">自启动</a>    <ul>
      <li><a href="#webxml-1" id="markdown-toc-webxml-1">web.xml</a></li>
    </ul>
  </li>
  <li><a href="#request" id="markdown-toc-request">request</a>    <ul>
      <li><a href="#常见方法" id="markdown-toc-常见方法">常见方法</a></li>
      <li><a href="#获取参数-1" id="markdown-toc-获取参数-1">获取参数</a></li>
      <li><a href="#头信息" id="markdown-toc-头信息">头信息</a></li>
    </ul>
  </li>
  <li><a href="#response" id="markdown-toc-response">response</a></li>
  <li><a href="#上传文件" id="markdown-toc-上传文件">上传文件</a>    <ul>
      <li><a href="#非文件字段" id="markdown-toc-非文件字段">非文件字段</a></li>
    </ul>
  </li>
</ul>
<h2 id="what">what?</h2>

<ul>
  <li>如果把 Web 应用比作一个餐厅，Servlet 就是餐厅中的服务员——负责接待顾客、上菜、结账。</li>
  <li>从广义上来讲，Servlet 规范是 Sun 公司制定的一套技术标准，包含与 Web 应用相关的一系列接口，是 Web 应用实现方式的宏观解决方案。而具体的 Servlet 容器负责提供标准的实现。</li>
  <li>从狭义上来讲，Servlet 指的是 javax.servlet.Servlet 接口及其子接口，也可以指实现了 Servlet 接口的实现类。</li>
  <li>Servlet 作为服务器端的一个组件，它的本意是“服务器端的小程序”。Servlet 的实例对象由 Servlet 容器负责创建；Servlet 的方法由容器在特定情况下调用；Servlet 容器会在 Web 应用卸载时销毁 Servlet 对象的实例。</li>
  <li>Servlet 本身不能独立运行，需要在一个web应用中运行的,而一个web应用是部署在tomcat中的</li>
  <li>所以开发一个servlet需要如下几个步骤
创建web应用项目
编写servlet代码
部署到tomcat中</li>
</ul>

<h2 id="demo">Demo</h2>

<h3 id="servlet">servlet</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span><span class="o">{</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">){</span>
		
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span><span class="o">);</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">toLocaleString</span><span class="o">());</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// TODO Auto-generated catch block</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h3 id="webxml">web.xml</h3>

<ul>
  <li>在WEB-INF目录中创建 web.xml</li>
  <li>web.xml提供路径与servlet的映射关系</li>
  <li>把/hello这个路径，映射到 HelloServlet这个类上</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;servlet&gt; 标签下的 &lt;servlet-name&gt;与 &lt;servlet-mapping&gt; 标签下的 &lt;servlet-name&gt; 必须一样</code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;servlet-name&gt;与&lt;servlet-class&gt;可以不一样，但是为了便于理解与维护，一般都会写的一样。 一目了然</code></li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app&gt;</span>

	<span class="nt">&lt;servlet&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>HelloServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;servlet-class&gt;</span>HelloServlet<span class="nt">&lt;/servlet-class&gt;</span>
	<span class="nt">&lt;/servlet&gt;</span>

	<span class="nt">&lt;servlet-mapping&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>HelloServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;url-pattern&gt;</span>/hello<span class="nt">&lt;/url-pattern&gt;</span>
	<span class="nt">&lt;/servlet-mapping&gt;</span>

<span class="nt">&lt;/web-app&gt;</span>

</code></pre></div></div>

<ul>
  <li>http://127.0.0.1/hello</li>
</ul>

<h2 id="获取参数">获取参数</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
<span class="nt">&lt;title&gt;</span>登录页面<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
 
<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"login"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
账号: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span>
密码: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"登录"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
 
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<ul>
  <li>创建一个LoginServlet,因为浏览器中的form的method是post,所以LoginServlet需要提供一个doPost方法</li>
  <li>在doPost方法中，通过request.getParameter 根据name取出对应的账号和密码</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>
 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"name:"</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"password:"</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>在web.xml中新增映射</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app&gt;</span>

	<span class="nt">&lt;servlet&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>HelloServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;servlet-class&gt;</span>HelloServlet<span class="nt">&lt;/servlet-class&gt;</span>
	<span class="nt">&lt;/servlet&gt;</span>

	<span class="nt">&lt;servlet-mapping&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>HelloServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;url-pattern&gt;</span>/hello<span class="nt">&lt;/url-pattern&gt;</span>
	<span class="nt">&lt;/servlet-mapping&gt;</span>
	
	<span class="nt">&lt;servlet&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>LoginServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;servlet-class&gt;</span>LoginServlet<span class="nt">&lt;/servlet-class&gt;</span>
	<span class="nt">&lt;/servlet&gt;</span>

	<span class="nt">&lt;servlet-mapping&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>LoginServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;url-pattern&gt;</span>/login<span class="nt">&lt;/url-pattern&gt;</span>
	<span class="nt">&lt;/servlet-mapping&gt;</span>	

<span class="nt">&lt;/web-app&gt;</span>

</code></pre></div></div>

<h2 id="返回响应">返回响应</h2>

<ul>
  <li>根据浏览器提交的账号密码返回登录成功或者失败</li>
  <li>注: 比较的时候把常量字符串”admin” “123”放前面，因为用户可能没有输入账号密码就提交，servlet会获取到null。 这样就规避了空指针异常的问题。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
 
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
 
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>
 
        <span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
 
        <span class="k">if</span> <span class="o">(</span><span class="s">"admin"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">"123"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span>
            <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span><span class="o">;</span>
        <span class="k">else</span>
            <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span><span class="o">;</span>
 
        <span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">html</span><span class="o">);</span>
 
    <span class="o">}</span>
 
<span class="o">}</span>

</code></pre></div></div>

<h2 id="调用流程">调用流程</h2>

<p><img src="http://stepimagewm.how2j.cn/7461.png" alt="" /></p>

<ul>
  <li>Tomcat 定位到了LoginServlet后，发现并没有LoginServlet的实例存在，于是就调用LoginServlet的public无参的构造方法LoginServlet()实例化一个LoginServlet对象以备后续使用</li>
  <li>Tomcat从上一步拿到了LoginServlet的实例之后，根据页面login.html提交信息的时候带的method=”post”，去调用对应的doPost方法。</li>
  <li>接着流程进入了doPost方法中</li>
  <li>然后把html字符串通过如下方式，设置在了response对象上。</li>
  <li>在Servlet完成工作之后，tomcat拿到被Servlet修改过的response，根据这个response生成html 字符串，然后再通过<a href="http://how2j.cn/k/http/http-tutorials/568.html">HTTP协议</a>，这个html字符串，回发给浏览器，浏览器再根据HTTP协议获取这个html字符串，并渲染在界面上。</li>
</ul>

<h2 id="service">service</h2>

<ul>
  <li>Servlet 需要提供对应的doGet() 与 doPost()方法</li>
</ul>

<h3 id="doget">doGet</h3>

<ul>
  <li>
    <p>当浏览器使用get方式提交数据的时候，servlet需要提供doGet()方法</p>
  </li>
  <li>
    <p>哪些是get方式呢？</p>

    <p>form默认的提交方式
如果通过一个超链访问某个地址
如果在地址栏直接输入某个地址
ajax指定使用get方式的时候</p>
  </li>
</ul>

<h3 id="dopost">doPost</h3>

<ul>
  <li>当浏览器使用post方式提交数据的时候，servlet需要提供doPost()方法</li>
  <li>哪些是post方式呢？
在form上显示设置 method=”post”的时候
ajax指定post方式的时候</li>
</ul>

<h3 id="service-1">service</h3>

<ul>
  <li>LoginServlet继承了HttpServlet,同时也继承了一个方法</li>
  <li><code class="language-plaintext highlighter-rouge">service(HttpServletRequest , HttpServletResponse )</code></li>
  <li>实际上，在执行doGet()或者doPost()之前，都会先执行service()</li>
  <li>由service()方法进行判断，到底该调用doGet()还是doPost()</li>
  <li>可以发现，service(), doGet(), doPost() 三种方式的参数列表都是一样的。</li>
  <li>所以，有时候也会直接重写service()方法，在其中提供相应的服务，就不用区分到底是get还是post了。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

		<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
		<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>

		<span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">if</span> <span class="o">(</span><span class="s">"admin"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">"123"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span>
			<span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span><span class="o">;</span>
		<span class="k">else</span>
			<span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span><span class="o">;</span>

		<span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
		<span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">html</span><span class="o">);</span>

	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h2 id="中文问题">中文问题</h2>

<ul>
  <li>为了成功获取中文参数，需要做如下操作</li>
  <li>login.html中加上<code class="language-plaintext highlighter-rouge">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</code>这句话的目的是告诉浏览器，等下发消息给服务器的时候，使用UTF-8编码</li>
  <li>login.html中form的method修改为post</li>
  <li>在servlet进行解码和编码<code class="language-plaintext highlighter-rouge">byte[] bytes=  name.getBytes("ISO-8859-1");</code>,<code class="language-plaintext highlighter-rouge">name = new String(bytes,"UTF-8");</code></li>
  <li>先根据ISO-8859-1解码，然后用UTF-8编码,这样就可以得到正确的中文参数了</li>
  <li>这样需要对每一个提交的数据都进行编码和解码处理，如果觉得麻烦，也可以使用一句话代替：</li>
  <li><code class="language-plaintext highlighter-rouge">request.setCharacterEncoding("UTF-8"); </code>并且把这句话放在request.getParameter()之前</li>
  <li>向浏览器返回中文时：在Servlet中，加上<code class="language-plaintext highlighter-rouge">response.setContentType("text/html; charset=UTF-8");</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="n">request</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
		<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
		<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>

		<span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">if</span> <span class="o">(</span><span class="s">"admin"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">"123"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span>
			<span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:green'&gt;登录成功&lt;/div&gt;"</span><span class="o">;</span>
		<span class="k">else</span>
			<span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:red'&gt;登录失败&lt;/div&gt;"</span><span class="o">;</span>

		<span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html; charset=UTF-8"</span><span class="o">);</span>
		<span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
		<span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">html</span><span class="o">);</span>

	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h2 id="生命周期">生命周期</h2>

<ul>
  <li>一个Servlet的生命周期由 <a href="http://how2j.cn/k/servlet/servlet-lifecycle/550.html#step1594">实例化</a>，<a href="http://how2j.cn/k/servlet/servlet-lifecycle/550.html#step1595">初始化</a>，<a href="http://how2j.cn/k/servlet/servlet-lifecycle/550.html#step1596">提供服务</a>，<a href="http://how2j.cn/k/servlet/servlet-lifecycle/550.html#step1597">销毁</a>，<a href="http://how2j.cn/k/servlet/servlet-lifecycle/550.html#step1597">被回收</a> 几个步骤组成</li>
</ul>

<h3 id="实例化">实例化</h3>

<ul>
  <li>当用户通过浏览器输入一个路径，这个路径对应的servlet被调用的时候，该Servlet就会被实例化</li>
  <li>为LoginServlet显式提供一个构造方法 LoginServlet()</li>
  <li>然后通过浏览器访问，就可以观察到”LoginServlet 构造方法 被调用”</li>
  <li>无论访问了多少次LoginServlet，LoginServlet构造方法 只会执行一次，所以Servlet是单实例的</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="nf">LoginServlet</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoginServlet 构造方法 被调用"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

		<span class="c1">//略</span>

	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="初始化">初始化</h3>

<ul>
  <li>LoginServlet 继承了HttpServlet，同时也继承了init(ServletConfig) 方法</li>
  <li>init 方法是一个实例方法，所以会在构造方法执行后执行。</li>
  <li>无论访问了多少次LoginSerlvet，init初始化 只会执行一次</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">LoginServlet</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoginServlet 构造方法 被调用"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"init(ServletConfig)"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

		<span class="c1">// 略</span>

	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="提供服务">提供服务</h3>

<ul>
  <li>接下来就是执行service()方法，然后通过浏览器传递过来的信息进行判断，是调用doGet()还是doPost()方法</li>
  <li>在service()中就会编写我们的业务代码，在本例中就是判断用户输入的账号和密码是否正确</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">LoginServlet</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoginServlet 构造方法 被调用"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"init(ServletConfig)"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
 
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>
 
        <span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
 
        <span class="k">if</span> <span class="o">(</span><span class="s">"admin"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">"123"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span>
            <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span><span class="o">;</span>
        <span class="k">else</span>
            <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span><span class="o">;</span>
 
        <span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">html</span><span class="o">);</span>
 
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="销毁">销毁</h3>

<ul>
  <li>接着是销毁destroy()</li>
  <li>在如下几种情况下，会调用destroy()</li>
  <li>该Servlet所在的web应用重新启动，在serverl.xml中配置该web应用的时候用到了</li>
  <li>关闭tomcat的时候 destroy()方法会被调用，但是这个一般都发生的很快，不易被发现。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"destroy()"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

		<span class="c1">// 略</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="被回收">被回收</h3>

<ul>
  <li>当该Servlet被销毁后，就满足垃圾回收的条件了。 当下一次垃圾回收GC来临的时候，就有可能被回收。</li>
</ul>

<h2 id="跳转">跳转</h2>

<ul>
  <li>页面跳转是开发一个web应用经常会发生的事情。</li>
  <li>比如登录成功或是失败后，分别会跳转到不同的页面。</li>
  <li>跳转的方式有两种，服务端跳转和客户端跳转</li>
</ul>

<h3 id="服务端">服务端</h3>

<ul>
  <li>在Servlet中进行服务端跳转的方式：<code class="language-plaintext highlighter-rouge">request.getRequestDispatcher("success.html").forward(request, response);</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

		<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
		<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>

		<span class="k">if</span> <span class="o">(</span><span class="s">"admin"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">"123"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span> <span class="o">{</span>
			<span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">"success.html"</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
		<span class="o">}</span>

	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="客户端">客户端</h3>

<ul>
  <li>在Servlet中进行客户端跳转的方式：<code class="language-plaintext highlighter-rouge">response.sendRedirect("fail.html");</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

		<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
		<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>

		<span class="k">if</span> <span class="o">(</span><span class="s">"admin"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">"123"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span> <span class="o">{</span>
			<span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">"success.html"</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">else</span><span class="o">{</span>
			<span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"fail.html"</span><span class="o">);</span>
		<span class="o">}</span>

	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/1602.png" alt="" /></p>

<h2 id="自启动">自启动</h2>

<ul>
  <li>有的时候会有这样的业务需求： tomcat一启动，就需要执行一些初始化的代码，比如校验数据库的完整性等。</li>
  <li>但是Servlet的生命周期是在用户访问浏览器对应的路径开始的。如果没有用户的第一次访问，就无法执行相关代码。</li>
  <li>这个时候，就需要Servlet实现自启动 即，伴随着tomcat的启动，自动启动初始化，在初始化方法init()中，就可以进行一些业务代码的工作了。</li>
</ul>

<h3 id="webxml-1">web.xml</h3>

<ul>
  <li>在web.xml中，配置Hello Servlet的地方，增加一句<code class="language-plaintext highlighter-rouge">&lt;load-on-startup&gt;10&lt;/load-on-startup&gt;</code>,10表示启动顺序,如果有多个Servlet都配置了自动启动，数字越小，启动的优先级越高</li>
  <li>取值范围是1-99,即表明该Servlet会随着Tomcat的启动而初始化。同时，为HelloServlet提供一个init(ServletConfig) 方法，验证自启动</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app&gt;</span>

	<span class="nt">&lt;servlet&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>HelloServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;servlet-class&gt;</span>HelloServlet<span class="nt">&lt;/servlet-class&gt;</span>
		<span class="nt">&lt;load-on-startup&gt;</span>10<span class="nt">&lt;/load-on-startup&gt;</span>
	<span class="nt">&lt;/servlet&gt;</span>

	<span class="nt">&lt;servlet-mapping&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>HelloServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;url-pattern&gt;</span>/hello<span class="nt">&lt;/url-pattern&gt;</span>
	<span class="nt">&lt;/servlet-mapping&gt;</span>
	
	<span class="nt">&lt;servlet&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>LoginServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;servlet-class&gt;</span>LoginServlet<span class="nt">&lt;/servlet-class&gt;</span>
	<span class="nt">&lt;/servlet&gt;</span>

	<span class="nt">&lt;servlet-mapping&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>LoginServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;url-pattern&gt;</span>/login<span class="nt">&lt;/url-pattern&gt;</span>
	<span class="nt">&lt;/servlet-mapping&gt;</span>	

<span class="nt">&lt;/web-app&gt;</span>


</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span><span class="o">{</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">ServletConfig</span> <span class="n">config</span><span class="o">){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"init of Hello Servlet"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">){</span>
		
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span><span class="o">);</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">toLocaleString</span><span class="o">());</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// TODO Auto-generated catch block</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h2 id="request">request</h2>

<ul>
  <li>request对象的类是HttpServletRequest，提供了很多有实用价值的方法</li>
  <li>获取URL：<code class="language-plaintext highlighter-rouge">String basePath=request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath()+"/"</code></li>
</ul>

<h3 id="常见方法">常见方法</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">():</span> <span class="s">"浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)"</span> 
<span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">():</span> <span class="s">"浏览器发出请求的资源名部分，去掉了协议和主机名"</span> 
<span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">():</span> <span class="s">"请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRemoteAddr</span><span class="o">():</span> <span class="s">"浏览器所处于的客户机的IP地址"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRemoteHost</span><span class="o">():</span> <span class="s">"浏览器所处于的客户机的主机名"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRemotePort</span><span class="o">():</span> <span class="s">"浏览器所处于的客户机使用的网络端口"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getLocalAddr</span><span class="o">():</span> <span class="s">"服务器的IP地址"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getLocalName</span><span class="o">():</span> <span class="s">"服务器的主机名"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">():</span> <span class="s">"得到客户机请求方式一般是GET或者POST"</span>
    
<span class="n">setAttribute</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="nc">Object</span><span class="o">)</span><span class="err">：</span><span class="s">"设置名字为name的request的參数值"</span>
<span class="n">getAttribute</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span><span class="err">：</span><span class="s">"返回由name指定的属性值"</span>
<span class="n">getAttributeNames</span><span class="o">()</span><span class="err">：</span><span class="s">"返回request对象全部属性的名字集合，结果是一个枚举的实例"</span>
<span class="n">getCookies</span><span class="o">()</span><span class="err">：</span><span class="s">"返回client的全部Cookie对象，结果是一个Cookie数组"</span>
<span class="n">getCharacterEncoding</span><span class="o">()</span><span class="err">：</span><span class="s">"返回请求中的字符编码方式"</span>
<span class="n">getContentLength</span><span class="o">()</span><span class="err">：</span><span class="s">"返回请求的Body的长度"</span>
<span class="n">getHeader</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span><span class="err">：</span><span class="s">"获得HTTP协议定义的文件头信息"</span>
<span class="n">getHeaders</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span><span class="err">：</span><span class="s">"返回指定名字的request Header的全部值，结果是一个枚举的实例"</span>
<span class="n">getHeaderNames</span><span class="o">()</span><span class="err">：</span><span class="s">"返回所以request Header的名字，结果是一个枚举的实例"</span>
<span class="n">getInputStream</span><span class="o">()</span><span class="err">：</span><span class="s">"返回请求的输入流，用于获得请求中的数据"</span>
<span class="n">getMethod</span><span class="o">()</span><span class="err">：</span><span class="s">"获得client向server端传送数据的方法"</span>
<span class="n">getParameter</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span><span class="err">：</span><span class="s">"获得client传送给server端的有name指定的參数值"</span>
<span class="n">getParameterNames</span><span class="o">()</span><span class="err">：</span><span class="s">"获得client传送给server端的全部參数的名字，结果是一个枚举的实例"</span>
<span class="n">getParameterValues</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span><span class="err">：</span><span class="s">"获得有name指定的參数的全部值"</span>
<span class="n">getProtocol</span><span class="o">()</span><span class="err">：</span><span class="s">"获取client向server端传送数据所根据的协议名称"</span>
<span class="n">getQueryString</span><span class="o">()</span><span class="err">：</span><span class="s">"获得查询字符串"</span>
<span class="n">getRequestURI</span><span class="o">()</span><span class="err">：</span><span class="s">"获取发出请求字符串的client地址"</span>
<span class="n">getRemoteAddr</span><span class="o">()</span><span class="err">：</span><span class="s">"获取client的IP地址"</span>
<span class="n">getRemoteHost</span><span class="o">()</span><span class="err">：</span><span class="s">"获取client的名字"</span>
<span class="n">getSession</span><span class="o">([</span><span class="nc">Boolean</span> <span class="n">create</span><span class="o">])</span><span class="err">：</span><span class="s">"返回和请求相关Session"</span>
<span class="n">getServerName</span><span class="o">()</span><span class="err">：</span><span class="s">"获取server的名字"</span>
<span class="n">getServletPath</span><span class="o">()</span><span class="err">：</span><span class="s">"获取client所请求的脚本文件的路径"</span>
<span class="n">getServerPort</span><span class="o">()</span><span class="err">：</span><span class="s">"获取server的port号"</span>
<span class="n">removeAttribute</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span><span class="err">：</span><span class="s">"删除请求中的一个属性"</span>
</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/1606.png" alt="" /></p>

<h3 id="获取参数-1">获取参数</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">():</span> <span class="s">"是常见的方法，用于获取单值的参数"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">():</span> <span class="s">"用于获取具有多值的参数，比如注册时候提交的 "</span><span class="n">hobits</span><span class="s">"，可以是多选的。"</span>
<span class="n">request</span><span class="o">.</span><span class="na">getParameterMap</span><span class="o">():</span> <span class="s">"用于遍历所有的参数，并返回Map类型。"</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RegisterServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"获取单值参数name:"</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>

		<span class="nc">String</span><span class="o">[]</span> <span class="n">hobits</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="s">"hobits"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"获取具有多值的参数hobits: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">hobits</span><span class="o">));</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"通过 getParameterMap 遍历所有的参数： "</span><span class="o">);</span>
		<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]&gt;</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterMap</span><span class="o">();</span>

		<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">paramNames</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">param</span> <span class="o">:</span> <span class="n">paramNames</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">String</span><span class="o">[]</span> <span class="n">value</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">param</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">value</span><span class="o">));</span>
		<span class="o">}</span>

	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/1608.png" alt="" /></p>

<h3 id="头信息">头信息</h3>

<ul>
  <li>request.getHeader() 获取浏览器传递过来的头信息。</li>
  <li>request.getHeaderNames() 获取浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Enumeration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span><span class="o">{</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">ServletConfig</span> <span class="n">config</span><span class="o">){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"init of Hello Servlet"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">){</span>
	
		<span class="nc">Enumeration</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">headerNames</span><span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeaderNames</span><span class="o">();</span>
		<span class="k">while</span><span class="o">(</span><span class="n">headerNames</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">()){</span>
			<span class="nc">String</span> <span class="n">header</span> <span class="o">=</span> <span class="n">headerNames</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
			<span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">header</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s\t%s%n"</span><span class="o">,</span><span class="n">header</span><span class="o">,</span><span class="n">value</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span><span class="o">);</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">toLocaleString</span><span class="o">());</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// TODO Auto-generated catch block</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>访问HelloServlet获取如下头信息:
host: 主机地址
user-agent: 浏览器基本资料
accept: 表示浏览器接受的数据类型
accept-language: 表示浏览器接受的语言
accept-encoding: 表示浏览器接受的压缩方式，是压缩方式，并非编码
connection: 是否保持连接
cache-control: 缓存时限</li>
</ul>

<p><img src="http://stepimagewm.how2j.cn/1609.png" alt="" /></p>

<h2 id="response">response</h2>

<ul>
  <li>response是HttpServletResponse的实例，用于提供给浏览器的响应信息</li>
  <li><strong>response.getWriter();</strong>：可以使用println(),append(),write(),format()等等方法设置返回给浏览器的html内容。</li>
  <li><code class="language-plaintext highlighter-rouge">response.setContentType("text/html");</code>“text/html” 是即格式 ，在<a href="http://how2j.cn/k/servlet/servlet-request/555.html#step1609">request获取头信息</a> 中对应的request.getHeader(“accept”)</li>
  <li>设置响应编码有两种方式:<code class="language-plaintext highlighter-rouge">1. response.setContentType("text/html; charset=UTF-8");</code>,<code class="language-plaintext highlighter-rouge">2. response.setCharacterEncoding("UTF-8");</code></li>
  <li>这两种方式都需要在response.getWriter调用之前执行才能生效。</li>
  <li>他们的区别在于1不仅发送到浏览器的内容会使用UTF-8编码，而且还通知浏览器使用UTF-8编码方式进行显示。所以总能正常显示中文,2仅仅是发送的浏览器的内容是UTF-8编码的，至于浏览器是用哪种编码方式显示不管。 所以当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动再进行一次设置。</li>
  <li>302临时跳转：<code class="language-plaintext highlighter-rouge">response.sendRedirect("fail.html");</code></li>
  <li>301永久性跳转：<code class="language-plaintext highlighter-rouge">response.setStatus(301);response.setHeader("Location", "fail.html");</code></li>
  <li>设置不使用缓存</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>

		<span class="k">try</span> <span class="o">{</span>
			<span class="n">response</span><span class="o">.</span><span class="na">setDateHeader</span><span class="o">(</span><span class="s">"Expires"</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
			<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Cache-Control"</span><span class="o">,</span> <span class="s">"no-cache"</span><span class="o">);</span>
			<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"pragma"</span><span class="o">,</span> <span class="s">"no-cache"</span><span class="o">);</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span><span class="o">);</span>
			<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">toLocaleString</span><span class="o">());</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// TODO Auto-generated catch block</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">addCookie</span><span class="o">(</span><span class="nc">Cookie</span> <span class="n">cookie</span><span class="err">）</span><span class="s">"给客户端添加一个Cookie对象，以保存客户端的信息"</span>

<span class="kt">void</span> <span class="nf">addDateHeader</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">long</span> <span class="n">value</span><span class="o">)</span> <span class="s">"添加一个日期类型的HTTP首部信息，覆盖同名的HTTP首部"</span>

<span class="kt">void</span> <span class="nf">addIntHeader</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="s">"添加一个整型的HTTP首部，并覆盖旧的HTTP首部"</span>

<span class="nc">String</span> <span class="nf">encodeRedirectURL</span><span class="o">(</span><span class="nc">String</span> <span class="n">url</span><span class="o">)</span><span class="s">"对使用的URL进行编译"</span>

<span class="nc">String</span> <span class="nf">encodeURL</span><span class="o">(</span><span class="nc">String</span> <span class="n">url</span><span class="o">)</span><span class="s">"封装URL并返回到客户端，实现URL重写"</span>

<span class="kt">void</span> <span class="nf">flushBuffer</span><span class="o">()</span> <span class="s">"清空缓冲区"</span>

<span class="kt">int</span> <span class="nf">getCharacterEncoding</span><span class="o">()</span> <span class="s">"取得字符编码类型"</span>

<span class="nc">String</span> <span class="nf">getContentType</span><span class="o">()</span> <span class="s">"取得MIME类型"</span>

<span class="nc">Locale</span> <span class="nf">getLocale</span><span class="o">()</span> <span class="s">"取得本地化信息"</span>

<span class="nc">ServletOutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span> <span class="s">"返回一个二进制输出字节流"</span>

<span class="nc">PrintWriter</span> <span class="nf">getWriter</span><span class="o">()</span> <span class="s">"返回一个输出字符流"</span>

<span class="kt">void</span> <span class="nf">reset</span><span class="o">()</span> <span class="s">"重设response对象"</span>

<span class="kt">void</span> <span class="nf">resetBuffer</span><span class="o">()</span><span class="s">"重设缓冲区"</span>

<span class="kt">void</span> <span class="nf">sendError</span><span class="o">(</span><span class="kt">int</span> <span class="n">sc</span><span class="o">)</span> <span class="s">"向客户端发送HTTP状态码的出错信息"</span>

<span class="kt">void</span> <span class="nf">sendRedirect</span><span class="o">()</span> <span class="s">"重定向客户的请求到指定页面"</span>

<span class="kt">void</span> <span class="nf">setBufferSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="s">"设置缓冲区的大小为size"</span>

<span class="kt">void</span> <span class="nf">setCharacterEncoding</span><span class="o">(</span><span class="nc">String</span> <span class="n">encoding</span><span class="o">)</span> <span class="s">"设置字符编码类型为encoding"</span>

<span class="kt">void</span> <span class="nf">setContentLength</span><span class="o">(</span><span class="kt">int</span> <span class="n">length</span><span class="o">)</span><span class="s">"设置响应数据的大小为size"</span>

<span class="kt">void</span> <span class="nf">setContentType</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="s">"设置MIME类型"</span>

<span class="kt">void</span> <span class="nf">setDateHeader</span><span class="o">(</span><span class="nc">String</span> <span class="n">s1</span><span class="o">,</span><span class="kt">long</span> <span class="n">l</span><span class="o">)</span> <span class="s">"设置日期类型的HTPP首部信息"</span>

<span class="kt">void</span> <span class="nf">setLocale</span><span class="o">(</span><span class="nc">Locale</span> <span class="n">locale</span><span class="o">)</span> <span class="s">"设置本地化为locale"</span>

<span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="kt">int</span> <span class="n">status</span><span class="o">)</span><span class="err"> </span> <span class="s">"设置状态码为status"</span>
</code></pre></div></div>

<h2 id="上传文件">上传文件</h2>

<ul>
  <li>form 的<strong>method必须是post</strong>的，get不能上传文件。 还需要加上<strong>enctype=”multipart/form-data”</strong> 表示提交的数据是二进制文件</li>
  <li>需要提供<strong>type=”file”</strong> 的字段进行上传</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>

<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"Content-Type"</span> <span class="na">content=</span><span class="s">"text/html; charset=UTF-8"</span><span class="nt">&gt;</span>
<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"uploadPhoto"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">enctype=</span><span class="s">"multipart/form-data"</span><span class="nt">&gt;</span>
  英雄名称:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"heroName"</span> <span class="nt">/&gt;</span> <span class="nt">&lt;br&gt;</span> 
  上传头像 : <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">name=</span><span class="s">"filepath"</span> <span class="nt">/&gt;</span> <span class="nt">&lt;br&gt;</span> 
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"上传"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>

</code></pre></div></div>

<ul>
  <li>需要用到两个第三方的jar包，<strong>commons-io-1.4.jar</strong>和<strong>commons-fileupload-1.2.2.jar</strong></li>
  <li>前部分代码是固定写法，用来做一些准备工作。 直到遍历出Item,一个Item就是对应一个浏览器提交的数据，通过item.getInputStream可以打开浏览器上传的文件的输入流</li>
  <li>客户提交的文件名有可能是一样的，所以在服务端保存文件的时候，不能使用客户提交的文件名。这里使用的是一种粗糙的解决文件名重复的办法，即使用时间戳</li>
  <li>读取输入流中的数据，保存在服务端的目录下 e:/project/j2ee/web/uploaded，这个目录是通过getRealPath获取到的。 如果项目部署在其他地方，那么会自动做相应的变化</li>
  <li>根据临时生成的文件名，创建一个html img元素，然后通过response返回浏览器</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.FileItem</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.FileUploadException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.disk.DiskFileItemFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.servlet.ServletFileUpload</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadPhotoServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
 
        <span class="nc">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">DiskFileItemFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DiskFileItemFactory</span><span class="o">();</span>
            <span class="nc">ServletFileUpload</span> <span class="n">upload</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServletFileUpload</span><span class="o">(</span><span class="n">factory</span><span class="o">);</span>
            <span class="c1">// 设置上传文件的大小限制为1M</span>
            <span class="n">factory</span><span class="o">.</span><span class="na">setSizeThreshold</span><span class="o">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">);</span>
            
            <span class="nc">List</span> <span class="n">items</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">items</span> <span class="o">=</span> <span class="n">upload</span><span class="o">.</span><span class="na">parseRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileUploadException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
 
            <span class="nc">Iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">items</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">FileItem</span> <span class="n">item</span> <span class="o">=</span> <span class="o">(</span><span class="nc">FileItem</span><span class="o">)</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">item</span><span class="o">.</span><span class="na">isFormField</span><span class="o">())</span> <span class="o">{</span>
 
                    <span class="c1">// 根据时间戳创建头像文件</span>
                    <span class="n">filename</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">".jpg"</span><span class="o">;</span>
                    
                    <span class="c1">//通过getRealPath获取上传文件夹，如果项目在e:/project/j2ee/web,那么就会自动获取到 e:/project/j2ee/web/uploaded</span>
                    <span class="nc">String</span> <span class="n">photoFolder</span> <span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">().</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">"uploaded"</span><span class="o">);</span>
                    
                    <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">photoFolder</span><span class="o">,</span> <span class="n">filename</span><span class="o">);</span>
                    <span class="n">f</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">().</span><span class="na">mkdirs</span><span class="o">();</span>
 
                    <span class="c1">// 通过item.getInputStream()获取浏览器上传的文件的输入流</span>
                    <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
 
                    <span class="c1">// 复制文件</span>
                    <span class="nc">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
                    <span class="kt">byte</span> <span class="n">b</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">];</span>
                    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="k">while</span> <span class="o">(-</span><span class="mi">1</span> <span class="o">!=</span> <span class="o">(</span><span class="n">length</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">b</span><span class="o">)))</span> <span class="o">{</span>
                        <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
 
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getFieldName</span><span class="o">());</span>
                    <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getString</span><span class="o">();</span>
                    <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">"ISO-8859-1"</span><span class="o">),</span> <span class="s">"UTF-8"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
            <span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;img width='200' height='150' src='uploaded/%s' /&gt;"</span><span class="o">;</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html"</span><span class="o">);</span>
            <span class="nc">PrintWriter</span> <span class="n">pw</span><span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
            
            <span class="n">pw</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">html</span><span class="o">,</span> <span class="n">filename</span><span class="o">);</span>
            
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nt">&lt;servlet&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>UploadPhotoServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;servlet-class&gt;</span>UploadPhotoServlet<span class="nt">&lt;/servlet-class&gt;</span>
	<span class="nt">&lt;/servlet&gt;</span>

	<span class="nt">&lt;servlet-mapping&gt;</span>
		<span class="nt">&lt;servlet-name&gt;</span>UploadPhotoServlet<span class="nt">&lt;/servlet-name&gt;</span>
		<span class="nt">&lt;url-pattern&gt;</span>/uploadPhoto<span class="nt">&lt;/url-pattern&gt;</span>
	<span class="nt">&lt;/servlet-mapping&gt;</span>	

</code></pre></div></div>

<h3 id="非文件字段">非文件字段</h3>

<ul>
  <li>因为浏览器指定了以二进制的形式提交数据，那么就不能通过常规的手段获取非File字段：<code class="language-plaintext highlighter-rouge">request.getParameter("heroName")</code></li>
  <li>在遍历Item时(Item即对应浏览器提交的字段)，可以通过:<code class="language-plaintext highlighter-rouge">item.isFormField</code>来判断是否是常规字段还是提交的文件。 当item.isFormField返回true的时候，就表示是常规字段。</li>
  <li>然后通过item.getFieldName()和item.getString()就知道分别是哪个字段，以及字段的值了。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.FileItem</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.FileUploadException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.disk.DiskFileItemFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.commons.fileupload.servlet.ServletFileUpload</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadPhotoServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
 
        <span class="nc">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">DiskFileItemFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DiskFileItemFactory</span><span class="o">();</span>
            <span class="nc">ServletFileUpload</span> <span class="n">upload</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServletFileUpload</span><span class="o">(</span><span class="n">factory</span><span class="o">);</span>
            <span class="c1">// 设置上传文件的大小限制为1M</span>
            <span class="n">factory</span><span class="o">.</span><span class="na">setSizeThreshold</span><span class="o">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">);</span>
            
            <span class="nc">List</span> <span class="n">items</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">items</span> <span class="o">=</span> <span class="n">upload</span><span class="o">.</span><span class="na">parseRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileUploadException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
 
            <span class="nc">Iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">items</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">FileItem</span> <span class="n">item</span> <span class="o">=</span> <span class="o">(</span><span class="nc">FileItem</span><span class="o">)</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">item</span><span class="o">.</span><span class="na">isFormField</span><span class="o">())</span> <span class="o">{</span>
 
                    <span class="c1">// 根据时间戳创建头像文件</span>
                    <span class="n">filename</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">".jpg"</span><span class="o">;</span>
                    <span class="nc">String</span> <span class="n">photoFolder</span> <span class="o">=</span> <span class="s">"e:\\project\\j2ee\\web\\uploaded"</span><span class="o">;</span>
                    <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">photoFolder</span><span class="o">,</span> <span class="n">filename</span><span class="o">);</span>
                    <span class="n">f</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">().</span><span class="na">mkdirs</span><span class="o">();</span>
 
                    <span class="c1">// 通过item.getInputStream()获取浏览器上传的文件的输入流</span>
                    <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
 
                    <span class="c1">// 复制文件</span>
                    <span class="nc">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
                    <span class="kt">byte</span> <span class="n">b</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">];</span>
                    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="k">while</span> <span class="o">(-</span><span class="mi">1</span> <span class="o">!=</span> <span class="o">(</span><span class="n">length</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">b</span><span class="o">)))</span> <span class="o">{</span>
                        <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
 
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getFieldName</span><span class="o">());</span>
                    <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getString</span><span class="o">();</span>
                    <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">"ISO-8859-1"</span><span class="o">),</span> <span class="s">"UTF-8"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
            <span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;img width='200' height='150' src='uploaded/%s' /&gt;"</span><span class="o">;</span>
            <span class="nc">PrintWriter</span> <span class="n">pw</span><span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">html</span><span class="o">,</span> <span class="n">filename</span><span class="o">);</span>
            
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>本文章参考自：http://how2j.cn</p>
:ET
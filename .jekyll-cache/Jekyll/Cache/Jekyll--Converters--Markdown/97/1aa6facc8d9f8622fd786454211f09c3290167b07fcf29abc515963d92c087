I"t5<ul id="markdown-toc">
  <li><a href="#文件对象" id="markdown-toc-文件对象">文件对象</a></li>
  <li><a href="#流" id="markdown-toc-流">流</a></li>
  <li><a href="#字节流" id="markdown-toc-字节流">字节流</a>    <ul>
      <li><a href="#ascii码" id="markdown-toc-ascii码">ASCII码</a></li>
      <li><a href="#读取" id="markdown-toc-读取">读取</a></li>
      <li><a href="#写入" id="markdown-toc-写入">写入</a></li>
    </ul>
  </li>
  <li><a href="#关闭流" id="markdown-toc-关闭流">关闭流</a>    <ul>
      <li><a href="#try" id="markdown-toc-try">try</a></li>
      <li><a href="#finally" id="markdown-toc-finally">finally</a></li>
      <li><a href="#try-1" id="markdown-toc-try-1">try()</a></li>
    </ul>
  </li>
  <li><a href="#字符流" id="markdown-toc-字符流">字符流</a>    <ul>
      <li><a href="#读取-1" id="markdown-toc-读取-1">读取</a></li>
      <li><a href="#写入-1" id="markdown-toc-写入-1">写入</a></li>
    </ul>
  </li>
  <li><a href="#中文问题" id="markdown-toc-中文问题">中文问题</a>    <ul>
      <li><a href="#编码" id="markdown-toc-编码">编码</a></li>
      <li><a href="#读取中文" id="markdown-toc-读取中文">读取中文</a></li>
    </ul>
  </li>
  <li><a href="#缓存流" id="markdown-toc-缓存流">缓存流</a>    <ul>
      <li><a href="#读取-2" id="markdown-toc-读取-2">读取</a></li>
      <li><a href="#写入-2" id="markdown-toc-写入-2">写入</a></li>
      <li><a href="#flush" id="markdown-toc-flush">flush</a></li>
    </ul>
  </li>
  <li><a href="#数据流" id="markdown-toc-数据流">数据流</a></li>
  <li><a href="#对象流" id="markdown-toc-对象流">对象流</a></li>
  <li><a href="#system" id="markdown-toc-system">system</a></li>
  <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
</ul>
<h2 id="文件对象">文件对象</h2>

<ul>
  <li>文件和文件夹都是用File代表</li>
  <li>使用绝对路径或者相对路径创建File对象</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">file</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFile</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 绝对路径</span>
        <span class="nc">File</span> <span class="n">f1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/LOLFolder"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"f1的绝对路径："</span> <span class="o">+</span> <span class="n">f1</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
        <span class="c1">// 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span>
        <span class="nc">File</span> <span class="n">f2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"LOL.exe"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"f2的绝对路径："</span> <span class="o">+</span> <span class="n">f2</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
 
        <span class="c1">// 把f1作为父目录创建文件对象</span>
        <span class="nc">File</span> <span class="n">f3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">f1</span><span class="o">,</span> <span class="s">"LOL.exe"</span><span class="o">);</span>
 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"f3的绝对路径："</span> <span class="o">+</span> <span class="n">f3</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/756.png" alt="" /></p>

<ul>
  <li>注意1： 需要在D:\LOLFolder确实存在一个LOL.exe,才可以看到对应的文件长度、修改时间等信息</li>
  <li>注意2： renameTo方法用于对物理文件名称进行修改，但是并不会修改File对象的name属性。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">file</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFile</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
 
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/LOLFolder/LOL.exe"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"当前文件是："</span> <span class="o">+</span><span class="n">f</span><span class="o">);</span>
        <span class="c1">//文件是否存在</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"判断是否存在："</span><span class="o">+</span><span class="n">f</span><span class="o">.</span><span class="na">exists</span><span class="o">());</span>
        
        <span class="c1">//是否是文件夹</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"判断是否是文件夹："</span><span class="o">+</span><span class="n">f</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">());</span>
         
        <span class="c1">//是否是文件（非文件夹）</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"判断是否是文件："</span><span class="o">+</span><span class="n">f</span><span class="o">.</span><span class="na">isFile</span><span class="o">());</span>
         
        <span class="c1">//文件长度</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"获取文件的长度："</span><span class="o">+</span><span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
         
        <span class="c1">//文件最后修改时间</span>
        <span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">lastModified</span><span class="o">();</span>
        <span class="nc">Date</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">(</span><span class="n">time</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"获取文件的最后修改时间："</span><span class="o">+</span><span class="n">d</span><span class="o">);</span>
        <span class="c1">//设置文件修改时间为1970.1.1 08:00:00</span>
        <span class="n">f</span><span class="o">.</span><span class="na">setLastModified</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
         
        <span class="c1">//文件重命名</span>
        <span class="nc">File</span> <span class="n">f2</span> <span class="o">=</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/LOLFolder/DOTA.exe"</span><span class="o">);</span>
        <span class="n">f</span><span class="o">.</span><span class="na">renameTo</span><span class="o">(</span><span class="n">f2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"把LOL.exe改名成了DOTA.exe"</span><span class="o">);</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"注意： 需要在D:\\LOLFolder确实存在一个LOL.exe,\r\n才可以看到对应的文件长度、修改时间等信息"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/757.png" alt="" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">file</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFile</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
 
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/LOLFolder/skin/garen.ski"</span><span class="o">);</span>
 
        <span class="c1">// 以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span>
        <span class="n">f</span><span class="o">.</span><span class="na">list</span><span class="o">();</span>
 
        <span class="c1">// 以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span>
        <span class="nc">File</span><span class="o">[]</span><span class="n">fs</span><span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">listFiles</span><span class="o">();</span>
 
        <span class="c1">// 以字符串形式返回获取所在文件夹</span>
        <span class="n">f</span><span class="o">.</span><span class="na">getParent</span><span class="o">();</span>
 
        <span class="c1">// 以文件形式返回获取所在文件夹</span>
        <span class="n">f</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">();</span>
        <span class="c1">// 创建文件夹，如果父文件夹skin不存在，创建就无效</span>
        <span class="n">f</span><span class="o">.</span><span class="na">mkdir</span><span class="o">();</span>
 
        <span class="c1">// 创建文件夹，如果父文件夹skin不存在，就会创建父文件夹</span>
        <span class="n">f</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">();</span>
 
        <span class="c1">// 创建一个空文件,如果父文件夹skin不存在，就会抛出异常</span>
        <span class="n">f</span><span class="o">.</span><span class="na">createNewFile</span><span class="o">();</span>
        <span class="c1">// 所以创建一个空文件之前，通常都会创建父目录</span>
        <span class="n">f</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">().</span><span class="na">mkdirs</span><span class="o">();</span>
 
        <span class="c1">// 列出所有的盘符c: d: e: 等等</span>
        <span class="n">f</span><span class="o">.</span><span class="na">listRoots</span><span class="o">();</span>
 
        <span class="c1">// 刪除文件</span>
        <span class="n">f</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
 
        <span class="c1">// JVM结束的时候，刪除文件，常用于临时文件的删除</span>
        <span class="n">f</span><span class="o">.</span><span class="na">deleteOnExit</span><span class="o">();</span>
 
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="流">流</h2>

<ul>
  <li>当不同的介质之间有数据交互的时候，JAVA就使用流来实现。</li>
  <li>数据源可以是文件，还可以是数据库，网络甚至是其他的程序</li>
  <li>比如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流</li>
  <li>输入流： InputStream；输出流：OutputStream</li>
</ul>

<p><img src="http://stepimagewm.how2j.cn/759.png" alt="" /></p>

<h2 id="字节流">字节流</h2>

<ul>
  <li>InputStream字节输入流</li>
  <li>OutputStream字节输出流</li>
  <li>用于以字节的形式读取和写入数据</li>
</ul>

<h3 id="ascii码">ASCII码</h3>

<ul>
  <li>所有的数据存放在计算机中都是以数字的形式存放的。 所以字母就需要转换为数字才能够存放</li>
  <li>比如A就对应的数字65，a对应的数字97. 不同的字母和符号对应不同的数字，就是一张码表。</li>
  <li>ASCII是这样的一种码表。 只包含简单的英文字母，符号，数字等等。</li>
</ul>

<h3 id="读取">读取</h3>

<ul>
  <li>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。</li>
  <li>FileInputStream 是InputStream子类，以FileInputStream 为例进行文件读取</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">//准备文件lol.txt其中的内容是AB，对应的ASCII分别是65 66</span>
            <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
            <span class="c1">//创建基于文件的输入流</span>
            <span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
            <span class="c1">//创建字节数组，其长度就是文件的长度</span>
            <span class="kt">byte</span><span class="o">[]</span> <span class="n">all</span> <span class="o">=</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
            <span class="c1">//以字节流的形式读取文件所有内容</span>
            <span class="n">fis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">all</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">all</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">//打印出来是65 66</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="o">}</span>
            
            <span class="c1">//每次使用完流，都应该进行关闭</span>
            <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
             
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
         
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="写入">写入</h3>

<ul>
  <li>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。</li>
  <li>FileOutputStream 是OutputStream子类，以FileOutputStream 为例向文件写出数据</li>
  <li>注: 如果文件d:/lol2.txt不存在，写出操作会自动创建该文件。</li>
  <li>但是如果是文件 d:/xyz/lol2.txt，而目录xyz又不存在，会抛出异常</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="c1">// 准备文件lol2.txt其中的内容是空的</span>
			<span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol2.txt"</span><span class="o">);</span>
			<span class="c1">// 准备长度是2的字节数组，用88,89初始化，其对应的字符分别是X,Y</span>
			<span class="kt">byte</span> <span class="n">data</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">88</span><span class="o">,</span> <span class="mi">89</span> <span class="o">};</span>

			<span class="c1">// 创建基于文件的输出流</span>
			<span class="nc">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
			<span class="c1">// 把数据写入到输出流</span>
			<span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
			<span class="c1">// 关闭输出流</span>
			<span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
			
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// TODO Auto-generated catch block</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>

	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="关闭流">关闭流</h2>

<ul>
  <li>所有的流，无论是输入流还是输出流，使用完毕之后，都应该关闭。</li>
  <li>如果不关闭，会产生对资源占用的浪费。</li>
  <li>当量比较大的时候，会影响到业务的正常开展。</li>
</ul>

<h3 id="try">try</h3>

<ul>
  <li>在try的作用域里关闭文件输入流，在前面的示例中都是使用这种方式，这样做有一个弊端；</li>
  <li>如果文件不存在，或者读取的时候出现问题而抛出异常，那么就不会执行这一行关闭流的代码，存在巨大的资源占用隐患。</li>
  <li>不推荐使用</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
			<span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
			<span class="kt">byte</span><span class="o">[]</span> <span class="n">all</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
			<span class="n">fis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">all</span><span class="o">);</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">all</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="c1">// 在try 里关闭流</span>
			<span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>

	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="finally">finally</h3>

<ul>
  <li>这是标准的关闭流的方式
    <ol>
      <li>首先把流的引用声明在try的外面，如果声明在try里面，其作用域无法抵达finally.</li>
      <li>在finally关闭之前，要先判断该引用是否为空</li>
      <li>关闭的时候，需要再一次进行try catch处理</li>
    </ol>
  </li>
  <li>这是标准的严谨的关闭流的方式，但是看上去很繁琐，所以写不重要的或者测试代码的时候，都会采用上面的有隐患try的方式，因为不麻烦</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
		<span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
			<span class="kt">byte</span><span class="o">[]</span> <span class="n">all</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
			<span class="n">fis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">all</span><span class="o">);</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">all</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
			<span class="o">}</span>

		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
			<span class="c1">// 在finally 里关闭流</span>
			<span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">fis</span><span class="o">)</span>
				<span class="k">try</span> <span class="o">{</span>

					<span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
					<span class="c1">// TODO Auto-generated catch block</span>
					<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
				<span class="o">}</span>
		<span class="o">}</span>

	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="try-1">try()</h3>

<ul>
  <li>把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</li>
  <li>这种编写代码的方式叫做 try-with-resources， 这是从JDK7开始支持的技术</li>
  <li>所有的流，都实现了一个接口叫做 AutoCloseable，任何类实现了这个接口，都可以在try()中进行实例化。 并且在try, catch, finally结束的时候自动关闭，回收相关资源。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
 
        <span class="c1">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">))</span> <span class="o">{</span>
            <span class="kt">byte</span><span class="o">[]</span> <span class="n">all</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
            <span class="n">fis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">all</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">all</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
 
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="字符流">字符流</h2>

<ul>
  <li>Reader字符输入流</li>
  <li>Writer字符输出流</li>
  <li>专门用于字符的形式读取和写入数据</li>
</ul>

<h3 id="读取-1">读取</h3>

<ul>
  <li>FileReader 是Reader子类，以FileReader 为例进行文件读取</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 准备文件lol.txt其中的内容是AB</span>
		<span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
		<span class="c1">// 创建基于文件的Reader</span>
		<span class="k">try</span> <span class="o">(</span><span class="nc">FileReader</span> <span class="n">fr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="n">f</span><span class="o">))</span> <span class="o">{</span>
			<span class="c1">// 创建字符数组，其长度就是文件的长度</span>
			<span class="kt">char</span><span class="o">[]</span> <span class="n">all</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
			<span class="c1">// 以字符流的形式读取文件所有内容</span>
			<span class="n">fr</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">all</span><span class="o">);</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">b</span> <span class="o">:</span> <span class="n">all</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// 打印出来是A B</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// TODO Auto-generated catch block</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>

	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="写入-1">写入</h3>

<ul>
  <li>FileWriter 是Writer的子类，以FileWriter 为例把字符串写入到文件</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 准备文件lol2.txt</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol2.txt"</span><span class="o">);</span>
        <span class="c1">// 创建基于文件的Writer</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">FileWriter</span> <span class="n">fr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">f</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 以字符流的形式把数据写入到文件中</span>
        	<span class="nc">String</span> <span class="n">data</span><span class="o">=</span><span class="s">"abcdefg1234567890"</span><span class="o">;</span>
        	<span class="kt">char</span><span class="o">[]</span> <span class="n">cs</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
            <span class="n">fr</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cs</span><span class="o">);</span>
 
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
 
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="中文问题">中文问题</h2>

<h3 id="编码">编码</h3>

<ul>
  <li>计算机存放数据只能存放数字，所有的字符都会被转换为不同的数字。</li>
</ul>

<p><img src="http://stepimagewm.how2j.cn/2481.png" alt="" /></p>

<ul>
  <li>工作后经常接触的编码方式有如下几种：
ISO-8859-1 ASCII 数字和西欧字母
GBK GB2312 BIG5 中文
UNICODE (统一码，万国码)</li>
  <li>其中
ISO-8859-1 包含 ASCII
GB2312 是简体中文，BIG5是繁体中文，GBK同时包含简体和繁体以及日文。
UNICODE 包括了所有的文字，无论中文，英文，藏文，法文，世界所有的文字都包含其中</li>
</ul>

<p><img src="http://stepimagewm.how2j.cn/2483.png" alt="" /></p>

<h3 id="读取中文">读取中文</h3>

<ul>
  <li>为了能够正确的读取中文内容
    <ol>
      <li>必须了解文本是以哪种编码方式保存字符的</li>
      <li>使用字节流读取了文本后，再使用对应的编码方式去识别这些数字，得到正确的字符</li>
    </ol>
  </li>
</ul>

<h2 id="缓存流">缓存流</h2>

<ul>
  <li>以介质是硬盘为例，字节流和字符流的弊端： 
在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。</li>
  <li>为了解决以上弊端，采用缓存流。 
缓存流在读取的时候，会一次性读较多的数据到缓存中，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。</li>
  <li>就好比吃饭，不用缓存就是每吃一口都到锅里去铲。用缓存就是先把饭盛到碗里，碗里的吃完了，再到锅里去铲</li>
  <li>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区达到一定的量，才把这些数据，一起写入到硬盘中去。按照这种操作模式，就不会像字节流，字符流那样每写一个字节都访问硬盘，从而减少了IO操作</li>
</ul>

<h3 id="读取-2">读取</h3>

<ul>
  <li>缓存字符输入流 BufferedReader 可以一次读取一行数据</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 准备文件lol.txt其中的内容是</span>
        <span class="c1">// garen kill teemo</span>
        <span class="c1">// teemo revive after 1 minutes</span>
        <span class="c1">// teemo try to garen, but killed again</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
        <span class="c1">// 创建文件字符流</span>
        <span class="c1">// 缓存流必须建立在一个存在的流的基础上</span>
        <span class="k">try</span> <span class="o">(</span>
        		<span class="nc">FileReader</span> <span class="n">fr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="n">f</span><span class="o">);</span> 
        		<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="n">fr</span><span class="o">);</span>
        	<span class="o">)</span> 
        <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 一次读一行</span>
                <span class="nc">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">line</span><span class="o">)</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
 
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="写入-2">写入</h3>

<ul>
  <li>PrintWriter 缓存字符输出流， 可以一次写出一行数据</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 向文件lol2.txt中写入三行语句</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol2.txt"</span><span class="o">);</span>
         
        <span class="k">try</span> <span class="o">(</span>
                <span class="c1">// 创建文件字符流</span>
                <span class="nc">FileWriter</span> <span class="n">fw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
                <span class="c1">// 缓存流必须建立在一个存在的流的基础上               </span>
                <span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">fw</span><span class="o">);</span>               
        <span class="o">)</span> <span class="o">{</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"garen kill teemo"</span><span class="o">);</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"teemo revive after 1 minutes"</span><span class="o">);</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"teemo try to garen, but killed again"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
  
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="flush">flush</h3>

<ul>
  <li>有的时候，需要立即把数据写入到硬盘，而不是等缓存满了才写出去。 这时候就需要用到flush</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
   
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//向文件lol2.txt中写入三行语句</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol2.txt"</span><span class="o">);</span>
        <span class="c1">//创建文件字符流</span>
        <span class="c1">//缓存流必须建立在一个存在的流的基础上</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileWriter</span> <span class="n">fr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">f</span><span class="o">);</span><span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">fr</span><span class="o">);)</span> <span class="o">{</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"garen kill teemo"</span><span class="o">);</span>
            <span class="c1">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span>
                <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>            
            <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"teemo revive after 1 minutes"</span><span class="o">);</span>
                <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"teemo try to garen, but killed again"</span><span class="o">);</span>
                <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="数据流">数据流</h2>

<ul>
  <li>DataInputStream 数据输入流</li>
  <li>DataOutputStream 数据输出流</li>
  <li>使用数据流的writeUTF()和readUTF() 可以进行数据的格式化顺序读写</li>
  <li>通过DataOutputStream 向文件顺序写出 布尔值，整数和字符串。 然后再通过DataInputStream 顺序读入这些数据。</li>
  <li>要用DataInputStream 读取一个文件，这个文件必须是由DataOutputStream 写出的，否则会出现EOFException，因为DataOutputStream 在写出的时候会做一些特殊标记，只有DataInputStream 才能成功的读取。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
     
<span class="kn">import</span> <span class="nn">java.io.DataInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.DataOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
     
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
     
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    	<span class="n">write</span><span class="o">();</span>
    	<span class="n">read</span><span class="o">();</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
		<span class="k">try</span> <span class="o">(</span>
                <span class="nc">FileInputStream</span> <span class="n">fis</span>  <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
                <span class="nc">DataInputStream</span> <span class="n">dis</span> <span class="o">=</span><span class="k">new</span> <span class="nc">DataInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
        <span class="o">){</span>
            <span class="kt">boolean</span> <span class="n">b</span><span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="na">readBoolean</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
            <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="na">readUTF</span><span class="o">();</span>
            
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"读取到布尔值:"</span><span class="o">+</span><span class="n">b</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"读取到整数:"</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"读取到字符串:"</span><span class="o">+</span><span class="n">str</span><span class="o">);</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
		
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/lol.txt"</span><span class="o">);</span>
		<span class="k">try</span> <span class="o">(</span>
                <span class="nc">FileOutputStream</span> <span class="n">fos</span>  <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
                <span class="nc">DataOutputStream</span> <span class="n">dos</span> <span class="o">=</span><span class="k">new</span> <span class="nc">DataOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
        <span class="o">){</span>
            <span class="n">dos</span><span class="o">.</span><span class="na">writeBoolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="n">dos</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="mi">300</span><span class="o">);</span>
            <span class="n">dos</span><span class="o">.</span><span class="na">writeUTF</span><span class="o">(</span><span class="s">"123 this is gareen"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/771.png" alt="" /></p>

<h2 id="对象流">对象流</h2>

<ul>
  <li>对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘</li>
  <li>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现Serializable接口</li>
  <li>创建一个Hero对象，设置其名称为garen。 
把该对象序列化到一个文件garen.lol。
然后再通过序列化把该文件转换为一个Hero对象</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">charactor</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hero</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
	<span class="c1">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span> 
	<span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kt">float</span> <span class="n">hp</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">stream</span><span class="o">;</span>
   
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.ObjectInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.ObjectOutputStream</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
   
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestStream</span> <span class="o">{</span>
   
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//创建一个Hero garen</span>
        <span class="c1">//要把Hero对象直接保存在文件上，务必让Hero类实现Serializable接口</span>
        <span class="nc">Hero</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hero</span><span class="o">();</span>
        <span class="n">h</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"garen"</span><span class="o">;</span>
        <span class="n">h</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="mi">616</span><span class="o">;</span>
         
        <span class="c1">//准备一个文件用于保存该对象</span>
        <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"d:/garen.lol"</span><span class="o">);</span>

        <span class="k">try</span><span class="o">(</span>
	        <span class="c1">//创建对象输出流</span>
	        <span class="nc">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
	        <span class="nc">ObjectOutputStream</span> <span class="n">oos</span> <span class="o">=</span><span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
        	<span class="c1">//创建对象输入流        		</span>
            <span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
            <span class="nc">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span><span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>
            <span class="nc">Hero</span> <span class="n">h2</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Hero</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h2</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h2</span><span class="o">.</span><span class="na">hp</span><span class="o">);</span>
              
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
           
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="system">system</h2>

<ul>
  <li>System.out 是常用的在控制台输出数据的</li>
  <li>System.in 可以从控制台输入数据</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScannerDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="c1">// 从键盘接收数据</span>
 
        <span class="c1">// next方式接收字符串</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"next方式接收："</span><span class="o">);</span>
        <span class="c1">// 判断是否还有输入</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">scan</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"输入的数据为："</span> <span class="o">+</span> <span class="n">str1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*
next方式接收：
runoob com
输入的数据为：runoob
*/</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScannerDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="c1">// 从键盘接收数据</span>
 
        <span class="c1">// nextLine方式接收字符串</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"nextLine方式接收："</span><span class="o">);</span>
        <span class="c1">// 判断是否还有输入</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">scan</span><span class="o">.</span><span class="na">hasNextLine</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"输入的数据为："</span> <span class="o">+</span> <span class="n">str2</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*
nextLine方式接收：
runoob com
输入的数据为：runoob com
*/</span>
</code></pre></div></div>

<ul>
  <li>next():
    <ul>
      <li>1、一定要读取到有效字符后才可以结束输入。</li>
      <li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>
      <li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>
      <li>next() 不能得到带有空格的字符串。</li>
    </ul>
  </li>
  <li>nextLine()：
    <ul>
      <li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>
      <li>2、可以获得空白。</li>
    </ul>
  </li>
  <li>在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScannerDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="c1">// 从键盘接收数据</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"输入整数："</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">scan</span><span class="o">.</span><span class="na">hasNextInt</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// 判断输入的是否是整数</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="c1">// 接收整数</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"整数数据："</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 输入错误的信息</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"输入的不是整数！"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"输入小数："</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">scan</span><span class="o">.</span><span class="na">hasNextFloat</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// 判断输入的是否是小数</span>
            <span class="n">f</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextFloat</span><span class="o">();</span>
            <span class="c1">// 接收小数</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"小数数据："</span> <span class="o">+</span> <span class="n">f</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 输入错误的信息</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"输入的不是小数！"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*
输入整数：12
整数数据：12
输入小数：1.2
小数数据：1.2
*/</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ScannerDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
 
        <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
 
        <span class="k">while</span> <span class="o">(</span><span class="n">scan</span><span class="o">.</span><span class="na">hasNextDouble</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">();</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">x</span><span class="o">;</span>
        <span class="o">}</span>
 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">m</span> <span class="o">+</span> <span class="s">"个数的和为"</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">m</span> <span class="o">+</span> <span class="s">"个数的平均值是"</span> <span class="o">+</span> <span class="o">(</span><span class="n">sum</span> <span class="o">/</span> <span class="n">m</span><span class="o">));</span>
        <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*
12
23
15
21.4
end
4个数的和为71.4
4个数的平均值是17.85
*/</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/IO-%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%88%86%E7%B1%BB.png" alt="" /></p>

<p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/IO-%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB.png" alt="" /></p>

<p>本文参考自：http://how2j.cn</p>

:ET
I"ԩ<ul id="markdown-toc">
  <li><a href="#jdbc" id="markdown-toc-jdbc">JDBC</a></li>
  <li><a href="#jdbctemplate" id="markdown-toc-jdbctemplate">JDBCTemplate</a>    <ul>
      <li><a href="#数据库" id="markdown-toc-数据库">数据库</a></li>
      <li><a href="#配置文件" id="markdown-toc-配置文件">配置文件</a></li>
      <li><a href="#pojo" id="markdown-toc-pojo">pojo</a></li>
      <li><a href="#dao" id="markdown-toc-dao">Dao</a></li>
      <li><a href="#test" id="markdown-toc-test">Test</a></li>
      <li><a href="#具名参数" id="markdown-toc-具名参数">具名参数</a></li>
    </ul>
  </li>
</ul>
<h3 id="jdbc">JDBC</h3>

<h3 id="jdbctemplate">JDBCTemplate</h3>

<ul>
  <li>为了使 JDBC 更加易于使用, Spring 在 JDBC API 上定义了一个抽象层, 以此建立一个 JDBC 存取框架</li>
  <li>JdbcTemplate 类被设计成为线程安全的，所以可以再 IOC 容器中声明它的单个实例, 并将这个实例注入到所有的 DAO 实例中</li>
  <li>JdbcTemplate 也利用了 Java 1.5 的特定(自动装箱, 泛型, 可变长度等)来简化开发</li>
  <li>Spring JDBC 框架还提供了一个 JdbcDaoSupport 类来简化 DAO 实现. 该类声明了 jdbcTemplate 属性, 它可以从 IOC 容器中注入, 或者自动从数据源中创建</li>
</ul>

<h4 id="数据库">数据库</h4>

<ul>
  <li>db.properties</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jdbc.user=root
jdbc.password=1230
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl=jdbc:mysql:///spring

jdbc.initPoolSize=5
jdbc.maxPoolSize=10
</code></pre></div></div>

<h4 id="配置文件">配置文件</h4>

<ul>
  <li>ApplicationContext.xml</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;
	&lt;!-- 自动扫描注解的包 --&gt;
	&lt;context:component-scan base-package="com.atguigu.spring"&gt;&lt;/context:component-scan&gt;
	
	&lt;!-- 导入资源文件 --&gt;
	&lt;context:property-placeholder location="classpath:db.properties"/&gt;
	
	&lt;!-- 配置 C3P0 数据源 --&gt;
	&lt;bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;
		&lt;property name="user" value="${jdbc.user}"&gt;&lt;/property&gt;
		&lt;property name="password" value="${jdbc.password}"&gt;&lt;/property&gt;
		&lt;property name="jdbcUrl" value="${jdbc.jdbcUrl}"&gt;&lt;/property&gt;
		&lt;property name="driverClass" value="${jdbc.driverClass}"&gt;&lt;/property&gt;

		&lt;property name="initialPoolSize" value="${jdbc.initPoolSize}"&gt;&lt;/property&gt;
		&lt;property name="maxPoolSize" value="${jdbc.maxPoolSize}"&gt;&lt;/property&gt;
	&lt;/bean&gt;
	
	&lt;!-- 配置 Spirng 的 JdbcTemplate --&gt;
	&lt;bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate"&gt;
		&lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;
	&lt;/bean&gt;
	
&lt;/beans&gt;

</code></pre></div></div>

<h4 id="pojo">pojo</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.atguigu.spring.jdbc</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="nc">Integer</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">lastName</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
	
	<span class="kd">private</span> <span class="nc">Integer</span> <span class="n">dpetId</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastName</span><span class="o">(</span><span class="nc">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">email</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDpetId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dpetId</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDpetId</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">dpetId</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">dpetId</span> <span class="o">=</span> <span class="n">dpetId</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"Employee [id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", lastName="</span> <span class="o">+</span> <span class="n">lastName</span> <span class="o">+</span> <span class="s">", email="</span>
				<span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="s">", dpetId="</span> <span class="o">+</span> <span class="n">dpetId</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>

	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.atguigu.spring.jdbc</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Department</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Integer</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"Department [id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="dao">Dao</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.atguigu.spring.jdbc</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.BeanPropertyRowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.RowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.support.JdbcDaoSupport</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="cm">/**
 * 不推荐使用 JdbcDaoSupport, 而推荐直接使用 JdbcTempate 作为 Dao 类的成员变量
 */</span>
<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DepartmentDao</span> <span class="kd">extends</span> <span class="nc">JdbcDaoSupport</span><span class="o">{</span>

	<span class="nd">@Autowired</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource2</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">){</span>
		<span class="n">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Department</span> <span class="nf">get</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">id</span><span class="o">){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT id, dept_name name FROM departments WHERE id = ?"</span><span class="o">;</span>
		<span class="nc">RowMapper</span><span class="o">&lt;</span><span class="nc">Department</span><span class="o">&gt;</span> <span class="n">rowMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">Department</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="k">return</span> <span class="nf">getJdbcTemplate</span><span class="o">().</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">rowMapper</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.atguigu.spring.jdbc</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.BeanPropertyRowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.RowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmployeeDao</span> <span class="o">{</span>
	
	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nc">Employee</span> <span class="nf">get</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">id</span><span class="o">){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT id, last_name lastName, email FROM employees WHERE id = ?"</span><span class="o">;</span>
		<span class="nc">RowMapper</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="n">rowMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="nc">Employee</span> <span class="n">employee</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">rowMapper</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
		
		<span class="k">return</span> <span class="n">employee</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="test">Test</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.atguigu.spring.jdbc</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.BeanPropertyRowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.RowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.namedparam.SqlParameterSource</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JDBCTest</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="nc">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">EmployeeDao</span> <span class="n">employeeDao</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">DepartmentDao</span> <span class="n">departmentDao</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">NamedParameterJdbcTemplate</span> <span class="n">namedParameterJdbcTemplate</span><span class="o">;</span>
	
	<span class="o">{</span>
		<span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"applicationContext.xml"</span><span class="o">);</span>
		<span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="o">(</span><span class="nc">JdbcTemplate</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"jdbcTemplate"</span><span class="o">);</span>
		<span class="n">employeeDao</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">EmployeeDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">departmentDao</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">DepartmentDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">namedParameterJdbcTemplate</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">NamedParameterJdbcTemplate</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 使用具名参数时, 可以使用 update(String sql, SqlParameterSource paramSource) 方法进行更新操作
	 * 1. SQL 语句中的参数名和类的属性一致!
	 * 2. 使用 SqlParameterSource 的 BeanPropertySqlParameterSource 实现类作为参数. 
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNamedParameterJdbcTemplate2</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"INSERT INTO employees(last_name, email, dept_id) "</span>
				<span class="o">+</span> <span class="s">"VALUES(:lastName,:email,:dpetId)"</span><span class="o">;</span>
		
		<span class="nc">Employee</span> <span class="n">employee</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">();</span>
		<span class="n">employee</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="s">"XYZ"</span><span class="o">);</span>
		<span class="n">employee</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"xyz@sina.com"</span><span class="o">);</span>
		<span class="n">employee</span><span class="o">.</span><span class="na">setDpetId</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
		
		<span class="nc">SqlParameterSource</span> <span class="n">paramSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">employee</span><span class="o">);</span>
		<span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">paramSource</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 可以为参数起名字. 
	 * 1. 好处: 若有多个参数, 则不用再去对应位置, 直接对应参数名, 便于维护
	 * 2. 缺点: 较为麻烦. 
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNamedParameterJdbcTemplate</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"INSERT INTO employees(last_name, email, dept_id) VALUES(:ln,:email,:deptid)"</span><span class="o">;</span>
		
		<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"ln"</span><span class="o">,</span> <span class="s">"FF"</span><span class="o">);</span>
		<span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="s">"ff@atguigu.com"</span><span class="o">);</span>
		<span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"deptid"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
		
		<span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">paramMap</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDepartmentDao</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">departmentDao</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
	<span class="o">}</span>
	
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testEmployeeDao</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">employeeDao</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 获取单个列的值, 或做统计查询
	 * 使用 queryForObject(String sql, Class&lt;Long&gt; requiredType) 
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testQueryForObject2</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT count(id) FROM employees"</span><span class="o">;</span>
		<span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="nc">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 查到实体类的集合
	 * 注意调用的不是 queryForList 方法
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testQueryForList</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT id, last_name lastName, email FROM employees WHERE id &gt; ?"</span><span class="o">;</span>
		<span class="nc">RowMapper</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="n">rowMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="n">employees</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">rowMapper</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">employees</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 从数据库中获取一条记录, 实际得到对应的一个对象
	 * 注意不是调用 queryForObject(String sql, Class&lt;Employee&gt; requiredType, Object... args) 方法!
	 * 而需要调用 queryForObject(String sql, RowMapper&lt;Employee&gt; rowMapper, Object... args)
	 * 1. 其中的 RowMapper 指定如何去映射结果集的行, 常用的实现类为 BeanPropertyRowMapper
	 * 2. 使用 SQL 中列的别名完成列名和类的属性名的映射. 例如 last_name lastName
	 * 3. 不支持级联属性. JdbcTemplate 到底是一个 JDBC 的小工具, 而不是 ORM 框架
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testQueryForObject</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT id, last_name lastName, email, dept_id as \"department.id\" FROM employees WHERE id = ?"</span><span class="o">;</span>
		<span class="nc">RowMapper</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="n">rowMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="nc">Employee</span> <span class="n">employee</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">rowMapper</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">employee</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 执行批量更新: 批量的 INSERT, UPDATE, DELETE
	 * 最后一个参数是 Object[] 的 List 类型: 因为修改一条记录需要一个 Object 的数组, 那么多条不就需要多个 Object 的数组吗
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testBatchUpdate</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"INSERT INTO employees(last_name, email, dept_id) VALUES(?,?,?)"</span><span class="o">;</span>
		
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="n">batchArgs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
		
		<span class="n">batchArgs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"AA"</span><span class="o">,</span> <span class="s">"aa@atguigu.com"</span><span class="o">,</span> <span class="mi">1</span><span class="o">});</span>
		<span class="n">batchArgs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"BB"</span><span class="o">,</span> <span class="s">"bb@atguigu.com"</span><span class="o">,</span> <span class="mi">2</span><span class="o">});</span>
		<span class="n">batchArgs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"CC"</span><span class="o">,</span> <span class="s">"cc@atguigu.com"</span><span class="o">,</span> <span class="mi">3</span><span class="o">});</span>
		<span class="n">batchArgs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"DD"</span><span class="o">,</span> <span class="s">"dd@atguigu.com"</span><span class="o">,</span> <span class="mi">3</span><span class="o">});</span>
		<span class="n">batchArgs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"EE"</span><span class="o">,</span> <span class="s">"ee@atguigu.com"</span><span class="o">,</span> <span class="mi">2</span><span class="o">});</span>
		
		<span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">batchUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">batchArgs</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 执行 INSERT, UPDATE, DELETE
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"UPDATE employees SET last_name = ? WHERE id = ?"</span><span class="o">;</span>
		<span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="s">"Jack"</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDataSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
		<span class="nc">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">());</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="具名参数">具名参数</h4>

<ul>
  <li>在 SpringJDBC 框架中, 绑定 SQL 参数的另一种选择是使用具名参数(named parameter).</li>
  <li>具名参数: SQL 按名称(以冒号开头)而不是按位置进行指定. 具名参数更易于维护, 也提升了可读性. 具名参数由框架类在运行时用占位符取代</li>
  <li>具名参数只在 NamedParameterJdbcTemplate 中得到支持</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- 配置 Spirng 的 JdbcTemplate --&gt;
	&lt;bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate"&gt;
		&lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;
	&lt;/bean&gt;
	
	&lt;!-- 配置 NamedParameterJdbcTemplate, 该对象可以使用具名参数, 其没有无参数的构造器, 所以必须为其构造器指定参数 --&gt;
	&lt;bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"&gt;
		&lt;constructor-arg ref="dataSource"&gt;&lt;/constructor-arg&gt;	
	&lt;/bean&gt;

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.atguigu.spring.jdbc</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.BeanPropertyRowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.RowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.namedparam.SqlParameterSource</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JDBCTest</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="nc">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">EmployeeDao</span> <span class="n">employeeDao</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">DepartmentDao</span> <span class="n">departmentDao</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">NamedParameterJdbcTemplate</span> <span class="n">namedParameterJdbcTemplate</span><span class="o">;</span>
	
	<span class="o">{</span>
		<span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"applicationContext.xml"</span><span class="o">);</span>
		<span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="o">(</span><span class="nc">JdbcTemplate</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"jdbcTemplate"</span><span class="o">);</span>
		<span class="n">employeeDao</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">EmployeeDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">departmentDao</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">DepartmentDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">namedParameterJdbcTemplate</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">NamedParameterJdbcTemplate</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 使用具名参数时, 可以使用 update(String sql, SqlParameterSource paramSource) 方法进行更新操作
	 * 1. SQL 语句中的参数名和类的属性一致!
	 * 2. 使用 SqlParameterSource 的 BeanPropertySqlParameterSource 实现类作为参数. 
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNamedParameterJdbcTemplate2</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"INSERT INTO employees(last_name, email, dept_id) "</span>
				<span class="o">+</span> <span class="s">"VALUES(:lastName,:email,:dpetId)"</span><span class="o">;</span>
		
		<span class="nc">Employee</span> <span class="n">employee</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">();</span>
		<span class="n">employee</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="s">"XYZ"</span><span class="o">);</span>
		<span class="n">employee</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"xyz@sina.com"</span><span class="o">);</span>
		<span class="n">employee</span><span class="o">.</span><span class="na">setDpetId</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
		
		<span class="nc">SqlParameterSource</span> <span class="n">paramSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">employee</span><span class="o">);</span>
		<span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">paramSource</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * 可以为参数起名字. 
	 * 1. 好处: 若有多个参数, 则不用再去对应位置, 直接对应参数名, 便于维护
	 * 2. 缺点: 较为麻烦. 
	 */</span>
	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNamedParameterJdbcTemplate</span><span class="o">(){</span>
		<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"INSERT INTO employees(last_name, email, dept_id) VALUES(:ln,:email,:deptid)"</span><span class="o">;</span>
		
		<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"ln"</span><span class="o">,</span> <span class="s">"FF"</span><span class="o">);</span>
		<span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="s">"ff@atguigu.com"</span><span class="o">);</span>
		<span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"deptid"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
		
		<span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">paramMap</span><span class="o">);</span>
	<span class="o">}</span>
	

<span class="o">}</span>

</code></pre></div></div>

:ET
I"5%<ul id="markdown-toc">
  <li><a href="#结构型模式" id="markdown-toc-结构型模式">结构型模式</a>    <ul>
      <li><a href="#核心作用" id="markdown-toc-核心作用">核心作用</a></li>
      <li><a href="#分类" id="markdown-toc-分类">分类</a></li>
    </ul>
  </li>
  <li><a href="#适配模式" id="markdown-toc-适配模式">适配模式</a>    <ul>
      <li><a href="#概念" id="markdown-toc-概念">概念</a></li>
      <li><a href="#角色" id="markdown-toc-角色">角色</a></li>
    </ul>
  </li>
  <li><a href="#案例" id="markdown-toc-案例">案例</a>    <ul>
      <li><a href="#被适配类" id="markdown-toc-被适配类">被适配类</a></li>
      <li><a href="#适配器" id="markdown-toc-适配器">适配器</a></li>
      <li><a href="#目标接口" id="markdown-toc-目标接口">目标接口</a></li>
      <li><a href="#客户端" id="markdown-toc-客户端">客户端</a></li>
      <li><a href="#原理" id="markdown-toc-原理">原理</a></li>
    </ul>
  </li>
  <li><a href="#使用场景" id="markdown-toc-使用场景">使用场景</a></li>
</ul>
<h3 id="结构型模式">结构型模式</h3>

<h4 id="核心作用">核心作用</h4>

<ul>
  <li>核心作用：是从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</li>
</ul>

<h4 id="分类">分类</h4>

<ul>
  <li>适配器模式：使原本由于接口不兼容不能一起工作的类可以一起工作</li>
  <li>代理模式：为真实对象提供一个代理，从而控制对真实对象的访问</li>
  <li>桥接模式：处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联。</li>
  <li>装饰模式：动态地给一个对象添加额外的功能，比继承灵活</li>
  <li>组合模式：将对象组合成树状结构以表示”部分和整体”层次结构，使得客户可以统一的调用叶子对象和容器对象</li>
  <li>外观模式：为子系统提供统一的调用接口，使得子系统更加容易使用</li>
  <li>享元模式：运用共享技术有效的实现管理大量细粒度对象，节省内存，提高效率</li>
</ul>

<h3 id="适配模式">适配模式</h3>

<h4 id="概念">概念</h4>

<ul>
  <li>适配器模式是将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作</li>
</ul>

<h4 id="角色">角色</h4>

<ul>
  <li>目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口</li>
  <li>需要适配的类（Adaptee）：需要适配的类或适配者类</li>
  <li>适配器（Adapter）：通过包装一个需要适配的对象，把原接口转换成目标接口</li>
</ul>

<h3 id="案例">案例</h3>

<h4 id="被适配类">被适配类</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.adapter</span><span class="o">;</span>

<span class="cm">/**
 * 被适配的类
 * (相当于例子中的，PS/2键盘)
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Adaptee</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"可以完成客户请求的需要的功能！"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="适配器">适配器</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.adapter</span><span class="o">;</span>

<span class="cm">/**
 * 适配器 (类适配器方式)
 * (相当于usb和ps/2的转接器)
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Adapter</span> <span class="kd">extends</span> <span class="nc">Adaptee</span> <span class="kd">implements</span> <span class="nc">Target</span> <span class="o">{</span>
	
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleReq</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.adapter</span><span class="o">;</span>

<span class="cm">/**
 * 适配器 (对象适配器方式,使用了组合的方式跟被适配对象整合)
 * (相当于usb和ps/2的转接器)
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Adapter2</span>  <span class="kd">implements</span> <span class="nc">Target</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="nc">Adaptee</span> <span class="n">adaptee</span><span class="o">;</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleReq</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">adaptee</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Adapter2</span><span class="o">(</span><span class="nc">Adaptee</span> <span class="n">adaptee</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">adaptee</span> <span class="o">=</span> <span class="n">adaptee</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h4 id="目标接口">目标接口</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.adapter</span><span class="o">;</span>
<span class="cm">/**
 * 目标接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Target</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">handleReq</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="客户端">客户端</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.adapter</span><span class="o">;</span>

<span class="cm">/**
 * 客户端类
 * (相当于例子中的笔记本，只有USB接口)
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">(</span><span class="nc">Target</span> <span class="n">t</span><span class="o">){</span>
		<span class="n">t</span><span class="o">.</span><span class="na">handleReq</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Client</span>  <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Client</span><span class="o">();</span>
		
		<span class="nc">Adaptee</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Adaptee</span><span class="o">();</span>
		
<span class="c1">//		Target t = new Adapter();</span>

		<span class="nc">Target</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Adapter2</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
		
		<span class="n">c</span><span class="o">.</span><span class="na">test1</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
		
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h4 id="原理">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>客户端---&gt;适配器（实现了目标接口，包含被适配对象）
</code></pre></div></div>

<h3 id="使用场景">使用场景</h3>

<ul>
  <li>经常用来做旧系统改造和升级</li>
  <li>如果我们的系统开发之后再也不需要维护，那么很多模式都是没必要的，但是不幸的是，事实却是维护一个系统的代价往往是开发一个系统的数倍</li>
  <li>–java.io.InputStreamReader(InputStream)</li>
  <li>–java.io.OutputStreamWriter(OutputStream)</li>
</ul>
:ET
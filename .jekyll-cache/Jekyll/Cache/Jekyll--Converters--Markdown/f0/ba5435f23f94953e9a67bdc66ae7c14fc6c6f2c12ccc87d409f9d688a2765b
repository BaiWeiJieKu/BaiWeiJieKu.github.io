I" <ul id="markdown-toc">
  <li><a href="#分类" id="markdown-toc-分类">分类</a></li>
  <li><a href="#分支结构" id="markdown-toc-分支结构">分支结构</a></li>
  <li><a href="#循环结构" id="markdown-toc-循环结构">循环结构</a></li>
</ul>
<h2 id="分类">分类</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>顺序、分支、循环
</code></pre></div></div>

<h2 id="分支结构">分支结构</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#一、分支结构
#1.if函数
/*
语法：if(条件,值1，值2)
功能：实现双分支
应用在begin end中或外面

*/

#2.case结构
/*
语法：
情况1：类似于switch
case 变量或表达式
when 值1 then 语句1;
when 值2 then 语句2;
...
else 语句n;
end 

情况2：
case 
when 条件1 then 语句1;
when 条件2 then 语句2;
...
else 语句n;
end 

应用在begin end 中或外面


*/

#3.if结构

/*
语法：
if 条件1 then 语句1;
elseif 条件2 then 语句2;
....
else 语句n;
end if;
功能：类似于多重if

只能应用在begin end 中

*/
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#案例1：创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D

CREATE FUNCTION test_if(score FLOAT) RETURNS CHAR
BEGIN
	DECLARE ch CHAR DEFAULT 'A';
	IF score&gt;90 THEN SET ch='A';
	ELSEIF score&gt;80 THEN SET ch='B';
	ELSEIF score&gt;60 THEN SET ch='C';
	ELSE SET ch='D';
	END IF;
	RETURN ch;
	
	
END $

SELECT test_if(87)$
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#案例2：创建存储过程，如果工资&lt;2000,则删除，如果5000&gt;工资&gt;2000,则涨工资1000，否则涨工资500


CREATE PROCEDURE test_if_pro(IN sal DOUBLE)
BEGIN
	IF sal&lt;2000 THEN DELETE FROM employees WHERE employees.salary=sal;
	ELSEIF sal&gt;=2000 AND sal&lt;5000 THEN UPDATE employees SET salary=salary+1000 WHERE employees.`salary`=sal;
	ELSE UPDATE employees SET salary=salary+500 WHERE employees.`salary`=sal;
	END IF;
	
END $

CALL test_if_pro(2100)$
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#案例1：创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D

CREATE FUNCTION test_case(score FLOAT) RETURNS CHAR
BEGIN 
	DECLARE ch CHAR DEFAULT 'A';
	
	CASE 
	WHEN score&gt;90 THEN SET ch='A';
	WHEN score&gt;80 THEN SET ch='B';
	WHEN score&gt;60 THEN SET ch='C';
	ELSE SET ch='D';
	END CASE;
	
	RETURN ch;
END $

SELECT test_case(56)$
</code></pre></div></div>

<h2 id="循环结构">循环结构</h2>

<p>```
/*
分类：
while、loop、repeat</p>

<p>循环控制：</p>

<p>iterate类似于 continue，继续，结束本次循环，继续下一次
leave 类似于  break，跳出，结束当前所在的循环</p>

<p>*/</p>

<p>#1.while
/*</p>

<p>语法：</p>

<p>【标签:】while 循环条件 do
	循环体;
end while【 标签】;</p>

<p>联想：</p>

<p>while(循环条件){</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>循环体; }
</code></pre></div></div>

<p>*/</p>

<p>#2.loop
/*</p>

<p>语法：
【标签:】loop
	循环体;
end loop 【标签】;</p>

<p>可以用来模拟简单的死循环</p>
:ET
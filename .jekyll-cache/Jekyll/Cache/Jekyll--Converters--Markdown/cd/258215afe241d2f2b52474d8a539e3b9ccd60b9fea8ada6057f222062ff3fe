I"(^<ul id="markdown-toc">
  <li><a href="#场景" id="markdown-toc-场景">场景</a></li>
  <li><a href="#核心" id="markdown-toc-核心">核心</a></li>
  <li><a href="#案例" id="markdown-toc-案例">案例</a>    <ul>
      <li><a href="#目标父类" id="markdown-toc-目标父类">目标父类</a></li>
      <li><a href="#真实目标" id="markdown-toc-真实目标">真实目标</a></li>
      <li><a href="#观察者接口" id="markdown-toc-观察者接口">观察者接口</a></li>
      <li><a href="#真实观察者" id="markdown-toc-真实观察者">真实观察者</a></li>
      <li><a href="#测试" id="markdown-toc-测试">测试</a></li>
    </ul>
  </li>
  <li><a href="#java自带" id="markdown-toc-java自带">java自带</a>    <ul>
      <li><a href="#目标对象" id="markdown-toc-目标对象">目标对象</a></li>
      <li><a href="#观察者" id="markdown-toc-观察者">观察者</a></li>
      <li><a href="#测试-1" id="markdown-toc-测试-1">测试</a></li>
    </ul>
  </li>
</ul>
<h3 id="场景">场景</h3>

<ul>
  <li>网站上，很多人订阅了”java主题”的新闻。当有这个主题新闻时，就会将这些新闻发给所有订阅的人</li>
  <li>大家一起玩CS游戏时，服务器需要将每个人的方位变化发给所有的客户</li>
  <li>我们可以把<strong>多个订阅者、客户称之为观察者</strong>；
需要同步给多个订阅者的数据封装到对象中，称之为<strong>目标</strong></li>
</ul>

<h3 id="核心">核心</h3>

<ul>
  <li>–观察者模式主要用于1：N的通知。当一个对象(<strong>目标对象Subject或Objservable</strong>)的状态变化时，他需要及时告知一系列对象(<strong>观察者对象,Observer</strong>)，令他们做出响应</li>
  <li>通知观察者的方式：</li>
  <li>推：每次都会把通知以广播方式发送给所有观察者，所有观察者只能被动接收。</li>
  <li>拉：观察者只要直到有情况即可。至于什么时候获取内容，获取什么内容，都可以自主决定。</li>
  <li>JAVASE提供了<strong>java.util.Observable和java.util.Observer</strong>来实现观察者模式</li>
</ul>

<h3 id="案例">案例</h3>

<h4 id="目标父类">目标父类</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="cm">/**
 * 目标通用父类
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Subject</span> <span class="o">{</span>
	<span class="c1">//存储所有观察者</span>
	<span class="kd">protected</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Observer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Observer</span><span class="o">&gt;();</span>
	<span class="c1">//注册</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">obs</span><span class="o">){</span>
		<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obs</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="c1">//删除</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeObserver</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">obs</span><span class="o">){</span>
		<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obs</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="c1">//如果目标状态改变，通知所有的观察者更新状态</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyAllObservers</span><span class="o">(){</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Observer</span> <span class="n">obs</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">obs</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h4 id="真实目标">真实目标</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer</span><span class="o">;</span>
<span class="cm">/**
 * 具体目标类，状态改变通知所有观察者
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteSubject</span> <span class="kd">extends</span> <span class="nc">Subject</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">state</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">state</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="kt">int</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
		<span class="c1">//主题对象(目标对象)值发生了变化，请通知所有的观察者</span>
		<span class="k">this</span><span class="o">.</span><span class="na">notifyAllObservers</span><span class="o">();</span>
	<span class="o">}</span> 
	
	
<span class="o">}</span>

</code></pre></div></div>

<h4 id="观察者接口">观察者接口</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer</span><span class="o">;</span>
<span class="cm">/**
 * 观察者接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
	<span class="kt">void</span>  <span class="nf">update</span><span class="o">(</span><span class="nc">Subject</span> <span class="n">subject</span><span class="o">);</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="真实观察者">真实观察者</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer</span><span class="o">;</span>
<span class="cm">/**
 * 真实观察者
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObserverA</span> <span class="kd">implements</span> <span class="nc">Observer</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="n">myState</span><span class="o">;</span>   <span class="c1">//myState需要跟目标对象的state值保持一致！</span>
	
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="nc">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">myState</span> <span class="o">=</span> <span class="o">((</span><span class="nc">ConcreteSubject</span><span class="o">)</span><span class="n">subject</span><span class="o">).</span><span class="na">getState</span><span class="o">();</span>
	<span class="o">}</span>


	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMyState</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">myState</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMyState</span><span class="o">(</span><span class="kt">int</span> <span class="n">myState</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">myState</span> <span class="o">=</span> <span class="n">myState</span><span class="o">;</span>
	<span class="o">}</span>
	
	

<span class="o">}</span>

</code></pre></div></div>

<h4 id="测试">测试</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//目标对象</span>
		<span class="nc">ConcreteSubject</span> <span class="n">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcreteSubject</span><span class="o">();</span>
		
		<span class="c1">//创建多个观察者</span>
		<span class="nc">ObserverA</span>  <span class="n">obs1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObserverA</span><span class="o">();</span>
		<span class="nc">ObserverA</span>  <span class="n">obs2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObserverA</span><span class="o">();</span>
		<span class="nc">ObserverA</span>  <span class="n">obs3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObserverA</span><span class="o">();</span>
		
		<span class="c1">//将这三个观察者添加到subject对象的观察者队伍中</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">obs1</span><span class="o">);</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">obs2</span><span class="o">);</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">obs3</span><span class="o">);</span>
		
		
		<span class="c1">//改变subject的状态</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"########################"</span><span class="o">);</span>
		<span class="c1">//我们看看，观察者的状态是不是也发生了变化</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs1</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs2</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs3</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		
		<span class="c1">//改变subject的状态</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"########################"</span><span class="o">);</span>
		<span class="c1">//我们看看，观察者的状态是不是也发生了变化</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs1</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs2</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs3</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>########################
3000
3000
3000
########################
30
30
30
</code></pre></div></div>

<h3 id="java自带">java自带</h3>

<ul>
  <li>JAVASE提供了<strong>java.util.Observable和java.util.Observer</strong>来实现观察者模式</li>
</ul>

<h4 id="目标对象">目标对象</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer2</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Observable</span><span class="o">;</span>

<span class="c1">//目标对象</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteSubject</span> <span class="kd">extends</span> <span class="nc">Observable</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">state</span><span class="o">;</span> 
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">){</span>
		<span class="n">state</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>  <span class="c1">//目标对象的状态发生了改变</span>
		
		<span class="n">setChanged</span><span class="o">();</span>  <span class="c1">//表示目标对象已经做了更改</span>
		<span class="n">notifyObservers</span><span class="o">(</span><span class="n">state</span><span class="o">);</span>  <span class="c1">//通知所有的观察者</span>
		
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">state</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="kt">int</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h4 id="观察者">观察者</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer2</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Observable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Observer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObserverA</span> <span class="kd">implements</span> <span class="nc">Observer</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="n">myState</span><span class="o">;</span>
	
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="nc">Observable</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">myState</span> <span class="o">=</span> <span class="o">((</span><span class="nc">ConcreteSubject</span><span class="o">)</span><span class="n">o</span><span class="o">).</span><span class="na">getState</span><span class="o">();</span>
	<span class="o">}</span>


	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMyState</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">myState</span><span class="o">;</span>
	<span class="o">}</span>


	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMyState</span><span class="o">(</span><span class="kt">int</span> <span class="n">myState</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">myState</span> <span class="o">=</span> <span class="n">myState</span><span class="o">;</span>
	<span class="o">}</span>

	
	
<span class="o">}</span>

</code></pre></div></div>

<h4 id="测试-1">测试</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.observer2</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//创建目标对象Obserable</span>
		<span class="nc">ConcreteSubject</span> <span class="n">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcreteSubject</span><span class="o">();</span>
		
		<span class="c1">//创建观察者</span>
		<span class="nc">ObserverA</span> <span class="n">obs1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObserverA</span><span class="o">();</span>
		<span class="nc">ObserverA</span> <span class="n">obs2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObserverA</span><span class="o">();</span>
		<span class="nc">ObserverA</span> <span class="n">obs3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObserverA</span><span class="o">();</span>
		
		<span class="c1">//将上面三个观察者对象添加到目标对象subject的观察者容器中</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">obs1</span><span class="o">);</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">obs2</span><span class="o">);</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">obs3</span><span class="o">);</span>
		
		<span class="c1">//改变subject对象的状态</span>
		<span class="n">subject</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"===============状态修改了！"</span><span class="o">);</span>
		<span class="c1">//观察者的状态发生了变化</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs1</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs2</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs3</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>

		<span class="n">subject</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">600</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"===============状态修改了！"</span><span class="o">);</span>
		<span class="c1">//观察者的状态发生了变化</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs1</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs2</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obs3</span><span class="o">.</span><span class="na">getMyState</span><span class="o">());</span>		
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>===============状态修改了！
3000
3000
3000
===============状态修改了！
600
600
600
</code></pre></div></div>

<p>###使用场景</p>

<ul>
  <li>–聊天室程序的，服务器转发给所有客户端</li>
  <li>–网络游戏(多人联机对战)场景中，服务器将客户端的状态进行分发</li>
  <li>–邮件订阅</li>
  <li>–Servlet中，监听器的实现</li>
  <li>–Android中，广播机制</li>
  <li>–JDK的AWT中事件处理模型,基于观察者模式的委派事件模型(Delegation  Event 
Model)，•事件源—————-目标对象，•事件监听器————观察者</li>
  <li>–京东商城中，群发某商品打折信息</li>
</ul>
:ET
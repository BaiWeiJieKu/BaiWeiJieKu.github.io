I"_L<ul id="markdown-toc">
  <li><a href="#网络编程" id="markdown-toc-网络编程">网络编程</a>    <ul>
      <li><a href="#通讯demo" id="markdown-toc-通讯demo">通讯demo</a></li>
    </ul>
  </li>
</ul>
<h3 id="网络编程">网络编程</h3>

<ul>
  <li>什么是网络：
    <ul>
      <li>在计算机领域中，网络是信息传输、接收、共享的虚拟平台。</li>
      <li>通过它把各个点、面、体的信息联系到一起，从而实现这些资源的共享</li>
    </ul>
  </li>
  <li>什么是网络编程：
    <ul>
      <li>网络编程从大的方面说就是对信息的发送到接收</li>
      <li>通过操作相应的Api调度计算机硬件资源，并利用传输管道（网线）进行数据交换的过程。</li>
      <li>更为具体的涉及：网络模型，套接字，数据包</li>
    </ul>
  </li>
  <li>七层网络模型-OSI</li>
</ul>

<p><img src="https://i.loli.net/2020/05/29/SqIye8WgiGsfHCv.png" alt="image.png" /></p>

<ul>
  <li>基础层：物理层（physical），数据链路层（datalink），网络层（network）</li>
  <li>传输层（transport）：TCP-UDP协议层、socket</li>
  <li>高级层：会话层（session），表示层（presentation），应用层（application）</li>
  <li>什么是socket：简单来说就是IP地址与端口的结合协议（RFC 793），一种地址与端口的结合描述协议</li>
  <li>socket作用与组成
    <ul>
      <li>在网络传输中用于唯一标示两个端点之间的链接</li>
      <li>端点包括ip和port</li>
      <li>四个要素：客户端地址，客户端端口，服务器地址，服务器端口</li>
    </ul>
  </li>
  <li>socket之TCP：
    <ul>
      <li>TCP是面向连接的通信协议</li>
      <li>通过三次握手建立连接，通讯完成时要拆除连接</li>
      <li>由于TCP是面向连接的，所以只能用于端到端的通讯</li>
    </ul>
  </li>
  <li>socket之UDP
    <ul>
      <li>UDP是面向无连接的通讯协议</li>
      <li>UDP数据包括目的端口号和源端口号信息</li>
      <li>由于通讯不需要连接，所以可以实现广播发送，并不局限于端到端</li>
    </ul>
  </li>
</ul>

<h4 id="通讯demo">通讯demo</h4>

<ul>
  <li>客户端</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
		<span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">();</span>
		<span class="c1">//超时时间</span>
		<span class="n">socket</span><span class="o">.</span><span class="na">setSoTimeout</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
		<span class="c1">//连接本地，端口2000，超时时间3000ms</span>
		<span class="n">socket</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="nc">InetSocketAddress</span><span class="o">.</span><span class="na">getLocalHost</span><span class="o">(),</span><span class="mi">2000</span><span class="o">),</span><span class="mi">3000</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"已发起服务器连接，并进入后续流程~"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"客户端信息："</span><span class="o">+</span><span class="n">socket</span><span class="o">.</span><span class="na">getLocalAddress</span><span class="o">()+</span><span class="s">"P:"</span><span class="o">+</span><span class="n">socket</span><span class="o">.</span><span class="na">getLocalPort</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"服务器信息："</span><span class="o">+</span><span class="n">socket</span><span class="o">.</span><span class="na">getInetAddress</span><span class="o">()+</span><span class="s">"P:"</span><span class="o">+</span><span class="n">socket</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>

		<span class="k">try</span><span class="o">{</span>
			<span class="n">todo</span><span class="o">(</span><span class="n">socket</span><span class="o">);</span>
		<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"异常关闭"</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"客户端已退出"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">todo</span><span class="o">(</span><span class="nc">Socket</span> <span class="n">client</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
		<span class="c1">//构建键盘输入流</span>
		<span class="nc">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">;</span>
		<span class="nc">BufferedReader</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">in</span><span class="o">));</span>

		<span class="c1">//得到socket输出流，并转换为打印流</span>
		<span class="nc">OutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
		<span class="nc">PrintStream</span> <span class="n">socketPrintStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintStream</span><span class="o">(</span><span class="n">outputStream</span><span class="o">);</span>

		<span class="c1">//得到socket输入流，并转换为BufferedReader</span>
		<span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
		<span class="nc">BufferedReader</span> <span class="n">socketBufferedReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">inputStream</span><span class="o">));</span>

		<span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
		<span class="k">do</span><span class="o">{</span>
			<span class="c1">//键盘读取一行</span>
			<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
			<span class="c1">//发送到服务器</span>
			<span class="n">socketPrintStream</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>

			<span class="c1">//从服务器读取一行</span>
			<span class="nc">String</span> <span class="n">echo</span> <span class="o">=</span> <span class="n">socketBufferedReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="s">"bye"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">echo</span><span class="o">))</span> <span class="o">{</span>
				<span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
			<span class="o">}</span><span class="k">else</span><span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">echo</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span><span class="k">while</span><span class="o">(</span><span class="n">flag</span><span class="o">);</span>

		<span class="c1">//资源释放</span>
		<span class="n">socketPrintStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="n">socketBufferedReader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>服务端</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOexception</span><span class="o">{</span>
		<span class="nc">ServerSocket</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"服务器准备就绪~"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"服务器信息:"</span><span class="o">+</span><span class="n">server</span><span class="o">.</span><span class="na">getInetAddress</span><span class="o">()+</span><span class="s">" P:"</span><span class="o">+</span><span class="n">server</span><span class="o">.</span><span class="na">getLocalPort</span><span class="o">());</span>

		<span class="c1">//等待客户端连接</span>
		<span class="k">for</span> <span class="o">(;</span> <span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
			<span class="c1">//得到客户端</span>
			<span class="nc">Socket</span> <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
			<span class="c1">//客户端构建异步线程</span>
			<span class="nc">ClientHandler</span> <span class="n">clientHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClientHandler</span><span class="o">(</span><span class="n">client</span><span class="o">);</span>
			<span class="c1">//启动线程</span>
			<span class="n">clientHandler</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
		<span class="o">}</span>
		
		
	<span class="o">}</span>

	<span class="c1">//客户端消息处理</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ClientHandler</span> <span class="kd">extends</span> <span class="nc">Thread</span><span class="o">{</span>
		<span class="kd">private</span> <span class="nc">Socket</span> <span class="n">socket</span><span class="o">;</span>
		<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

		<span class="nc">ClientHandler</span><span class="o">(</span><span class="nc">Socket</span> <span class="n">socket</span><span class="o">){</span>
			<span class="k">this</span><span class="o">.</span><span class="na">socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">;</span>
		<span class="o">}</span>

		<span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"新客户端连接："</span> <span class="o">+</span> <span class="n">socket</span><span class="o">.</span><span class="na">getInetAddress</span><span class="o">()</span> <span class="o">+</span>
                    <span class="s">" P:"</span> <span class="o">+</span> <span class="n">socket</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>

            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// 得到打印流，用于数据输出；服务器回送数据使用</span>
                <span class="nc">PrintStream</span> <span class="n">socketOutput</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
                <span class="c1">// 得到输入流，用于接收数据</span>
                <span class="nc">BufferedReader</span> <span class="n">socketInput</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span>
                        <span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>

                <span class="k">do</span> <span class="o">{</span>
                    <span class="c1">// 客户端拿到一条数据</span>
                    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">socketInput</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
                    <span class="k">if</span> <span class="o">(</span><span class="s">"bye"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">str</span><span class="o">))</span> <span class="o">{</span>
                        <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                        <span class="c1">// 回送</span>
                        <span class="n">socketOutput</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"bye"</span><span class="o">);</span>
                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                        <span class="c1">// 打印到屏幕。并回送数据长度</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
                        <span class="n">socketOutput</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"回送："</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
                    <span class="o">}</span>

                <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">);</span>

                <span class="n">socketInput</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="n">socketOutput</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>

            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"连接异常断开"</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                <span class="c1">// 连接关闭</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"客户端已退出："</span> <span class="o">+</span> <span class="n">socket</span><span class="o">.</span><span class="na">getInetAddress</span><span class="o">()</span> <span class="o">+</span>
                    <span class="s">" P:"</span> <span class="o">+</span> <span class="n">socket</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>

        <span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET
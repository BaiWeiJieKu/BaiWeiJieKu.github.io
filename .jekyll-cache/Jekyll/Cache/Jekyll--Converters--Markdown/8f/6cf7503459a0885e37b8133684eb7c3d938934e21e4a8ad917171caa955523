I"6
<ul id="markdown-toc">
  <li><a href="#简介" id="markdown-toc-简介">简介</a>    <ul>
      <li><a href="#为什么选择" id="markdown-toc-为什么选择">为什么选择？</a></li>
      <li><a href="#amqp" id="markdown-toc-amqp">AMQP</a></li>
    </ul>
  </li>
</ul>
<h3 id="简介">简介</h3>

<p><a href="https://github.com/BaiWeiJieKu/MK-rabbitmq">github</a></p>

<h4 id="为什么选择">为什么选择？</h4>

<ul>
  <li>开源，性能优秀，稳定性保障</li>
  <li>提供可靠性消息投递模式（confirm），返回模式（return）</li>
  <li>与SpringAMQP完美整合，API丰富</li>
  <li>集群模式丰富，表达式配置，HA模式，镜像队列模型</li>
  <li>保证数据不丢失的前提做到高可靠性，可用性</li>
  <li>Erlang语言最初应用于交换机领域的架构模式，这样使得RabbitMQ在Broker之间进行数据交互的性能是非常优秀的</li>
  <li>Erlang的特点：Erlang有着和原生Socket一样的延迟</li>
</ul>

<h4 id="amqp">AMQP</h4>

<ul>
  <li>高级消息队列协议（Advanced Message Queuing Protocol）</li>
  <li>AMQP定义：是具有现代特征的二进制协议。是一个提供统一消息服务的应用层准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</li>
  <li>核心概念：
    <ul>
      <li>Server：又称Broker，接收客户端的连接，实现AMQP实体服务</li>
      <li>Connection：连接，应用程序与Broker的网络连接</li>
      <li>Channel：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务</li>
      <li>Message：消息，服务器和应用程序之间传送的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级，延迟等高级特性；Body就是消息体内容</li>
      <li>Virtual host：虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个Virtual Host里面可以有若干个Exchange和Queue，同一个Virtual Host 里面不能有相同名称的Exchange或Queue。</li>
      <li>Exchange：交换机，接收消息，根据路由键转发消息到绑定的队列</li>
      <li>Binding：Exchange和Queue之间的虚拟连接，binding中可以包含routing key</li>
      <li>Routing key：一个路由规则，虚拟机可用它来确定如何路由一个特定消息</li>
      <li>Queue：也称为Message Queue，消息队列，保存消息并将它们转发给消费者</li>
    </ul>
  </li>
</ul>
:ET
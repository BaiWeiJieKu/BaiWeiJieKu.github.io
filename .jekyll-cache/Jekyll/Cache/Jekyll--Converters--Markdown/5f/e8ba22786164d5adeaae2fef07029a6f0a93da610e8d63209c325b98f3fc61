I"R~<ul id="markdown-toc">
  <li><a href="#工厂分类" id="markdown-toc-工厂分类">工厂分类</a>    <ul>
      <li><a href="#核心本质" id="markdown-toc-核心本质">核心本质</a></li>
      <li><a href="#工厂模式" id="markdown-toc-工厂模式">工厂模式</a></li>
    </ul>
  </li>
  <li><a href="#普通模式" id="markdown-toc-普通模式">普通模式</a></li>
  <li><a href="#简单工厂" id="markdown-toc-简单工厂">简单工厂</a></li>
  <li><a href="#工厂方法" id="markdown-toc-工厂方法">工厂方法</a>    <ul>
      <li><a href="#原理" id="markdown-toc-原理">原理</a></li>
      <li><a href="#比较与建议" id="markdown-toc-比较与建议">比较与建议</a></li>
    </ul>
  </li>
  <li><a href="#抽象工厂" id="markdown-toc-抽象工厂">抽象工厂</a>    <ul>
      <li><a href="#原理-1" id="markdown-toc-原理-1">原理</a></li>
    </ul>
  </li>
  <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
  <li><a href="#应用场景" id="markdown-toc-应用场景">应用场景</a></li>
</ul>
<h3 id="工厂分类">工厂分类</h3>

<ul>
  <li>工厂模式实现了创建者和调用者的分离</li>
  <li>详细分类：
• 简单工厂模式
• 工厂方法模式
• 抽象工厂模式</li>
  <li>面向对象设计的基本原则</li>
  <li>OCP（开闭原则，Open-Closed Principle）：一个软件的实体应当对扩展开放，对修改关闭。</li>
  <li>DIP（依赖倒转原则，Dependence Inversion Principle）：要针对接口编程，不要针对实现编程。</li>
  <li>LoD（迪米特法则，Law of Demeter）：只与你直接的朋友通信，而避免和陌生人通信。</li>
</ul>

<h4 id="核心本质">核心本质</h4>

<ul>
  <li>实例化对象，用工厂方法代替new操作</li>
  <li>将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</li>
</ul>

<h4 id="工厂模式">工厂模式</h4>

<ul>
  <li>简单工厂模式：用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）</li>
  <li>工厂方法模式：用来生产同一等级结构中的固定产品。（支持增加任意产品）</li>
  <li>抽象工厂模式：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）</li>
</ul>

<h3 id="普通模式">普通模式</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.simplefactory</span><span class="o">;</span>
<span class="cm">/**
 * 汽车接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Car</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.simplefactory</span><span class="o">;</span>
<span class="cm">/**
 * 奥迪汽车类
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Audi</span> <span class="kd">implements</span> <span class="nc">Car</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"奥迪再跑！"</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.simplefactory</span><span class="o">;</span>
<span class="cm">/**
 * 比亚迪汽车类
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Byd</span> <span class="kd">implements</span> <span class="nc">Car</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"比亚迪再跑！"</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.simplefactory</span><span class="o">;</span>

<span class="cm">/**
 * 测试在没有工厂模式的情况下
 * @author 尚学堂高淇 www.sxt.cn
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client01</span> <span class="o">{</span>   <span class="c1">//调用者</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Car</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Audi</span><span class="o">();</span>
		<span class="nc">Car</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Byd</span><span class="o">();</span>
		
		<span class="n">c1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
		<span class="n">c2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="简单工厂">简单工厂</h3>

<ul>
  <li>简单工厂模式也叫静态工厂模式，就是工厂类一般是使用静态方法，通过接收的参数的不同来返回不同的对象实例。</li>
  <li>对于增加新产品无能为力！不修改代码的话，是无法扩展的。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.simplefactory</span><span class="o">;</span>

<span class="cm">/**
 * 简单工厂类
 * @author 尚学堂高淇 www.sxt.cn
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CarFactory2</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span>  <span class="nc">Car</span> <span class="nf">createAudi</span><span class="o">(){</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Audi</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span>  <span class="nc">Car</span> <span class="nf">createByd</span><span class="o">(){</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Byd</span><span class="o">();</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.simplefactory</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CarFactory</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span>  <span class="nc">Car</span> <span class="nf">createCar</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="s">"奥迪"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">type</span><span class="o">)){</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">Audi</span><span class="o">();</span>
		<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="s">"比亚迪"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">type</span><span class="o">)){</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">Byd</span><span class="o">();</span>
		<span class="o">}</span><span class="k">else</span><span class="o">{</span>
			<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.simplefactory</span><span class="o">;</span>

<span class="cm">/**
 * 简单工厂情况下
 * @author 尚学堂高淇 www.sxt.cn
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client02</span> <span class="o">{</span>   <span class="c1">//调用者</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Car</span> <span class="n">c1</span> <span class="o">=</span><span class="nc">CarFactory</span><span class="o">.</span><span class="na">createCar</span><span class="o">(</span><span class="s">"奥迪"</span><span class="o">);</span>
		<span class="nc">Car</span> <span class="n">c2</span> <span class="o">=</span> <span class="nc">CarFactory</span><span class="o">.</span><span class="na">createCar</span><span class="o">(</span><span class="s">"比亚迪"</span><span class="o">);</span>
		
		<span class="n">c1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
		<span class="n">c2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="工厂方法">工厂方法</h3>

<ul>
  <li>为了避免简单工厂模式的缺点，不完全满足OCP。</li>
  <li>工厂方法模式和简单工厂模式最大的不同在于，简单工厂模式只有一个（对于一个项目或者一个独立模块而言）工厂类，而工厂方法模式有一组实现了相同接口的工厂类。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.factorymethod</span><span class="o">;</span>
<span class="cm">/**
 * 汽车创建工厂接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CarFactory</span> <span class="o">{</span>
	<span class="nc">Car</span> <span class="nf">createCar</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.factorymethod</span><span class="o">;</span>
<span class="cm">/**
 * 奥迪生产工厂类，实现了汽车生产工厂
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AudiFactory</span> <span class="kd">implements</span> <span class="nc">CarFactory</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Car</span> <span class="nf">createCar</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Audi</span><span class="o">();</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.factorymethod</span><span class="o">;</span>
<span class="cm">/**
 * 奔驰生产工厂类，实现了汽车生产工厂
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BenzFactory</span> <span class="kd">implements</span> <span class="nc">CarFactory</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Car</span> <span class="nf">createCar</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Benz</span><span class="o">();</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.factorymethod</span><span class="o">;</span>
<span class="cm">/**
 * 比亚迪生产工厂类，实现了汽车生产工厂
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BydFactory</span> <span class="kd">implements</span> <span class="nc">CarFactory</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Car</span> <span class="nf">createCar</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Byd</span><span class="o">();</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.factorymethod</span><span class="o">;</span>
<span class="cm">/**
 * 测试工厂方法
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Car</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AudiFactory</span><span class="o">().</span><span class="na">createCar</span><span class="o">();</span>
		<span class="nc">Car</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BydFactory</span><span class="o">().</span><span class="na">createCar</span><span class="o">();</span>
		
		<span class="n">c1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
		<span class="n">c2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="原理">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>汽车接口(有run方法)————&gt;奥迪类，奔驰类，比亚迪类

汽车生产工厂接口（有生产汽车方法createCar）-----&gt;奥迪生产工厂类,奔驰生产工厂类,比亚迪生产工厂类

</code></pre></div></div>

<h4 id="比较与建议">比较与建议</h4>

<ul>
  <li>结构复杂度：
从这个角度比较，显然简单工厂模式要占优。简单工厂模式只需一个工厂类，而工厂方法模式的工厂类随着产品类个数增加而增加，这无疑会使类的个数越来越多，从而增加了结构的复杂程度。</li>
  <li>代码复杂度：
代码复杂度和结构复杂度是一对矛盾，既然简单工厂模式在结构方面相对简洁，那么它在代码方面肯定是比工厂方法模式复杂的了。简单工厂模式的工厂类随着产品类的增加需要增加很多方法（或代码），而工厂方法模式每个具体工厂类只完成单一任务，代码简洁。</li>
  <li>客户端编程难度：
工厂方法模式虽然在工厂类结构中引入了接口从而满足了OCP，但是在客户端编码中需要对工厂类进行实例化。而简单工厂模式的工厂类是个静态类，在客户端无需实例化，这无疑是个吸引人的优点。</li>
  <li>管理上的难度：
这是个关键的问题。
我们先谈扩展。众所周知，工厂方法模式完全满足OCP，即它有非常良好的扩展性。那是否就说明了简单工厂模式就没有扩展性呢？答案是否定的。简单工厂模式同样具备良好的扩展性——扩展的时候仅需要修改少量的代码（修改工厂类的代码）就可以满足扩展性的要求了。尽管这没有完全满足OCP，但我们不需要太拘泥于设计理论，要知道，sun提供的java官方工具包中也有想到多没有满足OCP的例子啊。然后我们从维护性的角度分析下。假如某个具体产品类需要进行一定的修改，很可能需要修改对应的工厂类。当同时需要修改多个产品类的时候，对工厂类的修改会变得相当麻烦（对号入座已经是个问题了）。反而简单工厂没有这些麻烦，当多个产品类需要修改是，简单工厂模式仍然仅仅需要修改唯一的工厂类（无论怎样都能改到满足要求吧？大不了把这个类重写）。</li>
  <li><strong>根据设计理论建议：工厂方法模式。但实际上，我们一般都用简单工厂模式。</strong></li>
</ul>

<h3 id="抽象工厂">抽象工厂</h3>

<ul>
  <li>抽象工厂模式用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）</li>
  <li>抽象工厂模式是工厂方法模式的升级版本，在有多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.abstractFactory</span><span class="o">;</span>
<span class="cm">/**
 * 发动机接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Engine</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
	<span class="kt">void</span> <span class="nf">start</span><span class="o">();</span>
<span class="o">}</span>

<span class="cm">/**
 * 高级发动机
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">LuxuryEngine</span> <span class="kd">implements</span> <span class="nc">Engine</span><span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转的快！"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"启动快!可以自动启停！"</span><span class="o">);</span>
	<span class="o">}</span>
	
<span class="o">}</span>
<span class="cm">/**
 * 低端发动机
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">LowEngine</span> <span class="kd">implements</span> <span class="nc">Engine</span><span class="o">{</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转的慢！"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"启动慢!"</span><span class="o">);</span>
	<span class="o">}</span>
	
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.abstractFactory</span><span class="o">;</span>
<span class="cm">/**
 * 座椅接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Seat</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">massage</span><span class="o">();</span>
<span class="o">}</span>
<span class="cm">/**
 * 高级座椅类
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">LuxurySeat</span> <span class="kd">implements</span> <span class="nc">Seat</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">massage</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"可以自动按摩！"</span><span class="o">);</span>
	<span class="o">}</span>
	
<span class="o">}</span>
<span class="cm">/**
 * 低级座椅类
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">LowSeat</span> <span class="kd">implements</span> <span class="nc">Seat</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">massage</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"不能按摩！"</span><span class="o">);</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.abstractFactory</span><span class="o">;</span>
<span class="cm">/**
 * 轮胎接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Tyre</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">revolve</span><span class="o">();</span>
<span class="o">}</span>
<span class="cm">/**
 * 高级轮胎类
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">LuxuryTyre</span> <span class="kd">implements</span> <span class="nc">Tyre</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">revolve</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"旋转不磨损！"</span><span class="o">);</span>
	<span class="o">}</span>
	
<span class="o">}</span>
<span class="cm">/**
 * 低级轮胎类
 * @author Administrator
 *
 */</span>
<span class="kd">class</span> <span class="nc">LowTyre</span> <span class="kd">implements</span> <span class="nc">Tyre</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">revolve</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"旋转磨损快！"</span><span class="o">);</span>
	<span class="o">}</span>
	
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.abstractFactory</span><span class="o">;</span>
<span class="cm">/**
 * 汽车创建工厂接口
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CarFactory</span> <span class="o">{</span>
	<span class="cm">/**
	 * 创建发动机方法
	 * @return
	 */</span>
	<span class="nc">Engine</span> <span class="nf">createEngine</span><span class="o">();</span>
	<span class="cm">/**
	 * 创建座椅方法
	 * @return
	 */</span>
	<span class="nc">Seat</span> <span class="nf">createSeat</span><span class="o">();</span>
	<span class="cm">/**
	 * 创建轮胎工厂
	 * @return
	 */</span>
	<span class="nc">Tyre</span> <span class="nf">createTyre</span><span class="o">();</span>
<span class="o">}</span>


</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.abstractFactory</span><span class="o">;</span>
<span class="cm">/**
 * 高级汽车生产工厂类
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LuxuryCarFactory</span> <span class="kd">implements</span> <span class="nc">CarFactory</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Engine</span> <span class="nf">createEngine</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LuxuryEngine</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Seat</span> <span class="nf">createSeat</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LuxurySeat</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Tyre</span> <span class="nf">createTyre</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LuxuryTyre</span><span class="o">();</span>
	<span class="o">}</span>


<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.abstractFactory</span><span class="o">;</span>
<span class="cm">/**
 * 低级汽车创建类
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LowCarFactory</span> <span class="kd">implements</span> <span class="nc">CarFactory</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Engine</span> <span class="nf">createEngine</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LowEngine</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Seat</span> <span class="nf">createSeat</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LowSeat</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Tyre</span> <span class="nf">createTyre</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LowTyre</span><span class="o">();</span>
	<span class="o">}</span>


<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.bjsxt.factory.abstractFactory</span><span class="o">;</span>
<span class="cm">/**
 * 测试抽象工厂
 * @author Administrator
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//用汽车工厂接口创建高级汽车工厂类</span>
		<span class="nc">CarFactory</span>  <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LuxuryCarFactory</span><span class="o">();</span>
		<span class="c1">//用汽车工厂创建一个发动机，这个发动机就是高级发动机</span>
		<span class="nc">Engine</span> <span class="n">e</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createEngine</span><span class="o">();</span>
		<span class="n">e</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
		<span class="n">e</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="原理-1">原理</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>发动机接口（有run和start方法）---&gt;高级发动机类，低级发动机类

座椅接口（有massage方法）---&gt;高级座椅类，低级座椅类

轮胎接口（有revolve方法）---&gt;高级轮胎类，低级轮胎类

汽车创建工厂接口（有创建发动机，座椅，轮胎方法）---&gt;高级汽车生产工厂类,低级汽车生产工厂类
</code></pre></div></div>

<h3 id="总结">总结</h3>

<ul>
  <li>简单工厂模式(静态工厂模式)：虽然某种程度不符合设计原则，但实际使用最多。</li>
  <li>工厂方法模式：不修改已有类的前提下，通过增加新的工厂类实现扩展。</li>
  <li>抽象工厂模式：不可以增加产品，可以增加产品族！</li>
</ul>

<h3 id="应用场景">应用场景</h3>

<ul>
  <li>JDK中Calendar的getInstance方法</li>
  <li>JDBC中Connection对象的获取</li>
  <li>Hibernate中SessionFactory创建Session</li>
  <li>spring中IOC容器创建管理bean对象</li>
  <li>XML解析时的DocumentBuilderFactory创建解析器对象</li>
  <li>反射中Class对象的newInstance()</li>
</ul>
:ET
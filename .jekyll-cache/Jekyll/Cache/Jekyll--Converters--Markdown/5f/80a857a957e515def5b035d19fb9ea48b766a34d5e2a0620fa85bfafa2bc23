I"'H<ul id="markdown-toc">
  <li><a href="#lambda" id="markdown-toc-lambda">Lambda</a>    <ul>
      <li><a href="#普通方法" id="markdown-toc-普通方法">普通方法</a></li>
      <li><a href="#匿名类" id="markdown-toc-匿名类">匿名类</a></li>
      <li><a href="#lambda-1" id="markdown-toc-lambda-1">Lambda</a></li>
      <li><a href="#匿名方法" id="markdown-toc-匿名方法">匿名方法</a></li>
      <li><a href="#弊端" id="markdown-toc-弊端">弊端</a></li>
    </ul>
  </li>
  <li><a href="#方法引用" id="markdown-toc-方法引用">方法引用</a>    <ul>
      <li><a href="#静态方法" id="markdown-toc-静态方法">静态方法</a></li>
      <li><a href="#对象方法" id="markdown-toc-对象方法">对象方法</a></li>
      <li><a href="#引用容器" id="markdown-toc-引用容器">引用容器</a></li>
      <li><a href="#构造器" id="markdown-toc-构造器">构造器</a></li>
    </ul>
  </li>
  <li><a href="#聚合操作" id="markdown-toc-聚合操作">聚合操作</a>    <ul>
      <li><a href="#管道源" id="markdown-toc-管道源">管道源</a></li>
      <li><a href="#中间操作" id="markdown-toc-中间操作">中间操作</a></li>
      <li><a href="#结束操作" id="markdown-toc-结束操作">结束操作</a></li>
    </ul>
  </li>
</ul>
<h2 id="lambda">Lambda</h2>

<ul>
  <li>假设一个情景： 找出满足条件的Hero</li>
</ul>

<h3 id="普通方法">普通方法</h3>

<ul>
  <li>使用一个普通方法，在for循环遍历中进行条件判断，筛选出满足条件的数据</li>
  <li><code class="language-plaintext highlighter-rouge">hp&gt;100 &amp;&amp; damage&lt;50</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">charactor</span><span class="o">;</span>
    
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hero</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> 
    <span class="kd">public</span> <span class="kt">float</span> <span class="n">hp</span><span class="o">;</span>
       
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">damage</span><span class="o">;</span>
       
    <span class="kd">public</span> <span class="nf">Hero</span><span class="o">(){</span>
          
    <span class="o">}</span>
      
    <span class="kd">public</span> <span class="nf">Hero</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span><span class="n">name</span><span class="o">;</span>
  
    <span class="o">}</span>
      
    <span class="c1">//初始化name,hp,damage的构造方法</span>
    <span class="kd">public</span> <span class="nf">Hero</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">float</span> <span class="n">hp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">damage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span><span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">damage</span> <span class="o">=</span> <span class="n">damage</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">anotherHero</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">damage</span><span class="o">&lt;</span><span class="n">anotherHero</span><span class="o">.</span><span class="na">damage</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>  
        <span class="k">else</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Hero [name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", hp="</span> <span class="o">+</span> <span class="n">hp</span> <span class="o">+</span> <span class="s">", damage="</span> <span class="o">+</span> <span class="n">damage</span> <span class="o">+</span> <span class="s">"]\r\n"</span><span class="o">;</span>
    <span class="o">}</span>
      
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLambda</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化后的集合："</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"筛选出 hp&gt;100 &amp;&amp; damange&lt;50的英雄"</span><span class="o">);</span>
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">filter</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Hero</span> <span class="n">hero</span> <span class="o">:</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">hero</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">hero</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">)</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hero</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
 
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/2551.png" alt="" /></p>

<h3 id="匿名类">匿名类</h3>

<ul>
  <li>首先准备一个接口HeroChecker，提供一个test(Hero)方法</li>
  <li>然后通过匿名类的方式，实现这个接口</li>
  <li>接着调用filter，传递这个checker进去进行判断，这种方式就很像通过Collections.sort在对一个Hero集合排序，需要传一个<a href="http://how2j.cn/k/collection/collection-comparator-comparable/693.html#step828">Comparator</a>的匿名类对象进去一样。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HeroChecker</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">h</span><span class="o">);</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLambda</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化后的集合："</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"使用匿名类的方式，筛选出 hp&gt;100 &amp;&amp; damange&lt;50的英雄"</span><span class="o">);</span>
        <span class="nc">HeroChecker</span> <span class="n">checker</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HeroChecker</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
          
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span><span class="n">checker</span><span class="o">);</span>
    <span class="o">}</span>
  
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">filter</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span><span class="o">,</span><span class="nc">HeroChecker</span> <span class="n">checker</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Hero</span> <span class="n">hero</span> <span class="o">:</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">checker</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">hero</span><span class="o">))</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hero</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
  
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/2552.png" alt="" /></p>

<h3 id="lambda-1">Lambda</h3>

<ul>
  <li>使用Lambda方式筛选出数据</li>
  <li><code class="language-plaintext highlighter-rouge">filter(heros,(h)-&gt;h.hp&gt;100 &amp;&amp; h.damage&lt;50);</code></li>
  <li>同样是调用filter方法，从上一步的传递匿名类对象，变成了传递一个Lambda表达式进去</li>
  <li><code class="language-plaintext highlighter-rouge">h-&gt;h.hp&gt;100 &amp;&amp; h.damage&lt;50</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLamdba</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化后的集合："</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"使用Lamdba的方式，筛选出 hp&gt;100 &amp;&amp; damange&lt;50的英雄"</span><span class="o">);</span>
		<span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">filter</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span><span class="o">,</span><span class="nc">HeroChecker</span> <span class="n">checker</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Hero</span> <span class="n">hero</span> <span class="o">:</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">checker</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">hero</span><span class="o">))</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hero</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="匿名方法">匿名方法</h3>

<ul>
  <li>Lambda 其实就是匿名方法，这是一种把方法作为参数进行传递的编程思想。</li>
  <li><code class="language-plaintext highlighter-rouge">filter(heros, h -&gt; h.hp &gt; 100 &amp;&amp; h.damage &lt; 50);</code></li>
  <li>引入Lambda表达式，会使得代码更加紧凑，而不是各种接口和匿名类到处飞。</li>
</ul>

<h3 id="弊端">弊端</h3>

<ul>
  <li>Lambda表达式虽然带来了代码的简洁，但是也有其局限性。</li>
  <li>可读性差，与啰嗦的但是清晰的匿名类代码结构比较起来，Lambda表达式一旦变得比较长，就难以理解</li>
  <li>便于调试，很难在Lambda表达式中增加调试信息，比如日志</li>
  <li>版本支持，Lambda表达式在JDK8版本中才开始支持</li>
  <li>Lambda比较适合用在简短的业务代码中，并不适合用在复杂的系统中，会加大维护成本。</li>
</ul>

<h2 id="方法引用">方法引用</h2>

<h3 id="静态方法">静态方法</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLambda</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化后的集合："</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
          
        <span class="nc">HeroChecker</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HeroChecker</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>
         
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"使用匿名类过滤"</span><span class="o">);</span>
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"使用Lambda表达式"</span><span class="o">);</span>
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"在Lambda表达式中使用静态方法"</span><span class="o">);</span>
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span> <span class="n">h</span> <span class="o">-&gt;</span> <span class="nc">TestLambda</span><span class="o">.</span><span class="na">testHero</span><span class="o">(</span><span class="n">h</span><span class="o">)</span> <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"直接引用静态方法"</span><span class="o">);</span>
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span> <span class="nl">TestLambda:</span><span class="o">:</span><span class="n">testHero</span><span class="o">);</span>
    <span class="o">}</span>
      
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">testHero</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">;</span>
    <span class="o">}</span>
      
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">filter</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span><span class="o">,</span> <span class="nc">HeroChecker</span> <span class="n">checker</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Hero</span> <span class="n">hero</span> <span class="o">:</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">checker</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">hero</span><span class="o">))</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hero</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
  
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/2560.png" alt="" /></p>

<h3 id="对象方法">对象方法</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLambda</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化后的集合："</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
	
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"使用引用对象方法  的过滤结果："</span><span class="o">);</span>
		<span class="c1">//使用类的对象方法</span>
		<span class="nc">TestLambda</span> <span class="n">testLambda</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestLambda</span><span class="o">();</span>
		<span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span> <span class="nl">testLambda:</span><span class="o">:</span><span class="n">testHero</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">testHero</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">filter</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span><span class="o">,</span> <span class="nc">HeroChecker</span> <span class="n">checker</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Hero</span> <span class="n">hero</span> <span class="o">:</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">checker</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">hero</span><span class="o">))</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hero</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/2561.png" alt="" /></p>

<h3 id="引用容器">引用容器</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
  
<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLambda</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化后的集合："</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Lambda表达式："</span><span class="o">);</span>        
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span><span class="n">h</span><span class="o">-&gt;</span> <span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span> <span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Lambda表达式中调用容器中的对象的matched方法："</span><span class="o">);</span>        
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span><span class="n">h</span><span class="o">-&gt;</span> <span class="n">h</span><span class="o">.</span><span class="na">matched</span><span class="o">()</span> <span class="o">);</span>
 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"引用容器中对象的方法 之过滤结果："</span><span class="o">);</span>        
        <span class="n">filter</span><span class="o">(</span><span class="n">heros</span><span class="o">,</span> <span class="nl">Hero:</span><span class="o">:</span><span class="n">matched</span><span class="o">);</span>
    <span class="o">}</span>
      
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">testHero</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">;</span>
    <span class="o">}</span>
      
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">filter</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span><span class="o">,</span> <span class="nc">HeroChecker</span> <span class="n">checker</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Hero</span> <span class="n">hero</span> <span class="o">:</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">checker</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">hero</span><span class="o">))</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hero</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
  
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/2562.png" alt="" /></p>

<h3 id="构造器">构造器</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Supplier</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLambda</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&gt;()</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="nc">List</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">ArrayList</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">};</span>

	<span class="c1">//匿名类</span>
	<span class="nc">List</span> <span class="n">list1</span> <span class="o">=</span> <span class="n">getList</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
	
	<span class="c1">//Lambda表达式</span>
	<span class="nc">List</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">getList</span><span class="o">(()-&gt;</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">());</span>
	
	<span class="c1">//引用构造器</span>
	<span class="nc">List</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">getList</span><span class="o">(</span><span class="nl">ArrayList:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>

    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span> <span class="nf">getList</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">){</span>
    	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
     
<span class="o">}</span>

</code></pre></div></div>

<h2 id="聚合操作">聚合操作</h2>

<ul>
  <li>要了解聚合操作，首先要建立Stream和管道的概念</li>
  <li>Stream 和Collection结构化的数据不一样，Stream是一系列的元素，就像是生产线上的罐头一样，一串串的出来。</li>
  <li>管道指的是一系列的聚合操作。</li>
  <li>管道又分3个部分
管道源：在这个例子里，源是一个List
中间操作： 每个中间操作，又会返回一个Stream，比如.filter()又返回一个Stream, 中间操作是“懒”操作，并不会真正进行遍历。
结束操作：当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。 结束操作不会返回Stream，但是会返回int、float、String、 Collection或者像forEach，什么都不返回, 结束操作才进行真正的遍历行为，在遍历的时候，才会去进行中间操作的相关判断</li>
  <li>这个Stream和I/O章节的InputStream,OutputStream是不一样的概念。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAggregate</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化后的集合："</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"查询条件：hp&gt;100 &amp;&amp; damage&lt;50"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"通过传统操作方式找出满足条件的数据："</span><span class="o">);</span>

		<span class="k">for</span> <span class="o">(</span><span class="nc">Hero</span> <span class="n">h</span> <span class="o">:</span> <span class="n">heros</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">hp</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">)</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"通过聚合操作方式找出满足条件的数据："</span><span class="o">);</span>
		<span class="n">heros</span>
			<span class="o">.</span><span class="na">stream</span><span class="o">()</span>
			<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">h</span> <span class="o">-&gt;</span> <span class="n">h</span><span class="o">.</span><span class="na">hp</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">)</span>
			<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">name</span><span class="o">));</span>

	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="管道源">管道源</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAggregate</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
		<span class="o">}</span>
		<span class="c1">//管道源是集合</span>
		<span class="n">heros</span>
		<span class="o">.</span><span class="na">stream</span><span class="o">()</span>
		<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">name</span><span class="o">));</span>
		
		<span class="c1">//管道源是数组</span>
		<span class="nc">Hero</span> <span class="n">hs</span><span class="o">[]</span> <span class="o">=</span> <span class="n">heros</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">[</span><span class="n">heros</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
		<span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">hs</span><span class="o">)</span>
		<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">name</span><span class="o">));</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="中间操作">中间操作</h3>

<ul>
  <li>每个中间操作，又会返回一个Stream，比如.filter()又返回一个Stream, 中间操作是“懒”操作，并不会真正进行遍历。</li>
  <li>中间操作比较多，主要分两类</li>
  <li>对元素进行筛选 和 转换为其他形式的流</li>
  <li>对元素进行筛选：
filter 匹配
distinct 去除重复(根据equals判断)
sorted 自然排序
sorted(Comparator<T>) 指定排序
limit 保留
skip 忽略</T></li>
  <li>转换为其他形式的流
mapToDouble 转换为double的流
map 转换为任意类型的流</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">charactor</span><span class="o">;</span>
     
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hero</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> 
    <span class="kd">public</span> <span class="kt">float</span> <span class="n">hp</span><span class="o">;</span>
        
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">damage</span><span class="o">;</span>
        
    <span class="kd">public</span> <span class="nf">Hero</span><span class="o">(){</span>
           
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">float</span> <span class="nf">getHp</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">hp</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHp</span><span class="o">(</span><span class="kt">float</span> <span class="n">hp</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getDamage</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">damage</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDamage</span><span class="o">(</span><span class="kt">int</span> <span class="n">damage</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">damage</span> <span class="o">=</span> <span class="n">damage</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Hero</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span><span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">//初始化name,hp,damage的构造方法</span>
    <span class="kd">public</span> <span class="nf">Hero</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">float</span> <span class="n">hp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">damage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span><span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">damage</span> <span class="o">=</span> <span class="n">damage</span><span class="o">;</span>
    <span class="o">}</span>
   
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Hero</span> <span class="n">anotherHero</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">damage</span><span class="o">&lt;</span><span class="n">anotherHero</span><span class="o">.</span><span class="na">damage</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>  
        <span class="k">else</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
   
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Hero [name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", hp="</span> <span class="o">+</span> <span class="n">hp</span> <span class="o">+</span> <span class="s">", damage="</span> <span class="o">+</span> <span class="n">damage</span> <span class="o">+</span> <span class="s">"]\r\n"</span><span class="o">;</span>
    <span class="o">}</span>
       
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAggregate</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
        <span class="o">}</span>
        <span class="c1">//制造一个重复数据</span>
        <span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">heros</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"初始化集合后的数据 (最后一个数据重复)："</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heros</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"满足条件hp&gt;100&amp;&amp;damage&lt;50的数据"</span><span class="o">);</span>
         
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">h</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;</span><span class="mi">100</span><span class="o">&amp;&amp;</span><span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">)</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
         
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"去除重复的数据，去除标准是看equals"</span><span class="o">);</span>
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">distinct</span><span class="o">()</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"按照血量排序"</span><span class="o">);</span>
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">sorted</span><span class="o">((</span><span class="n">h1</span><span class="o">,</span><span class="n">h2</span><span class="o">)-&gt;</span><span class="n">h1</span><span class="o">.</span><span class="na">hp</span><span class="o">&gt;=</span><span class="n">h2</span><span class="o">.</span><span class="na">hp</span><span class="o">?</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="o">)</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
         
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保留3个"</span><span class="o">);</span>
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
         
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"忽略前3个"</span><span class="o">);</span>
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
         
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转换为double的Stream"</span><span class="o">);</span>
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">mapToDouble</span><span class="o">(</span><span class="nl">Hero:</span><span class="o">:</span><span class="n">getHp</span><span class="o">)</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
         
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转换任意类型的Stream"</span><span class="o">);</span>
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">map</span><span class="o">((</span><span class="n">h</span><span class="o">)-&gt;</span> <span class="n">h</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">" - "</span> <span class="o">+</span> <span class="n">h</span><span class="o">.</span><span class="na">hp</span> <span class="o">+</span> <span class="s">" - "</span> <span class="o">+</span> <span class="n">h</span><span class="o">.</span><span class="na">damage</span><span class="o">)</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
         
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/2568.png" alt="" /></p>

<h3 id="结束操作">结束操作</h3>

<ul>
  <li>当进行结束操作后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。 结束操作不会返回Stream，但是会返回int、float、String、 Collection或者像forEach，什么都不返回,。</li>
  <li>结束操作才真正进行遍历行为，前面的中间操作也在这个时候，才真正的执行。</li>
  <li>常见结束操作如下：
forEach() 遍历每个元素
toArray() 转换为数组
<code class="language-plaintext highlighter-rouge">min(Comparator&lt;T&gt;)</code> 取最小的元素
<code class="language-plaintext highlighter-rouge">max(Comparator&lt;T&gt;) </code>取最大的元素
count() 总数
findFirst() 第一个元素</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">lambda</span><span class="o">;</span>
 
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.omg.Messaging.SYNC_WITH_TRANSPORT</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">charactor.Hero</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAggregate</span> <span class="o">{</span>
 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;</span> <span class="n">heros</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Hero</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">heros</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hero</span><span class="o">(</span><span class="s">"hero "</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"遍历集合中的每个数据"</span><span class="o">);</span>
        <span class="n">heros</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">h</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"返回一个数组"</span><span class="o">);</span>
        <span class="nc">Object</span><span class="o">[]</span> <span class="n">hs</span><span class="o">=</span> <span class="n">heros</span>
	        <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	        <span class="o">.</span><span class="na">toArray</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">hs</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"返回伤害最低的那个英雄"</span><span class="o">);</span>
        <span class="nc">Hero</span> <span class="n">minDamageHero</span> <span class="o">=</span>
        <span class="n">heros</span>
	        <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	        <span class="o">.</span><span class="na">min</span><span class="o">((</span><span class="n">h1</span><span class="o">,</span><span class="n">h2</span><span class="o">)-&gt;</span><span class="n">h1</span><span class="o">.</span><span class="na">damage</span><span class="o">-</span><span class="n">h2</span><span class="o">.</span><span class="na">damage</span><span class="o">)</span>
	        <span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">minDamageHero</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"返回伤害最高的那个英雄"</span><span class="o">);</span>

        <span class="nc">Hero</span> <span class="n">mxnDamageHero</span> <span class="o">=</span>
                <span class="n">heros</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">max</span><span class="o">((</span><span class="n">h1</span><span class="o">,</span><span class="n">h2</span><span class="o">)-&gt;</span><span class="n">h1</span><span class="o">.</span><span class="na">damage</span><span class="o">-</span><span class="n">h2</span><span class="o">.</span><span class="na">damage</span><span class="o">)</span>
                <span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">mxnDamageHero</span><span class="o">);</span>      
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"流中数据的总数"</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">heros</span>
        		<span class="o">.</span><span class="na">stream</span><span class="o">()</span>
        		<span class="o">.</span><span class="na">count</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"第一个英雄"</span><span class="o">);</span>
        <span class="nc">Hero</span> <span class="n">firstHero</span> <span class="o">=</span>
                <span class="n">heros</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
                <span class="o">.</span><span class="na">get</span><span class="o">();</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">firstHero</span><span class="o">);</span>
        
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><img src="http://stepimagewm.how2j.cn/2569.png" alt="" /></p>

<p>本文章参考自：http://how2j.cn</p>
:ET